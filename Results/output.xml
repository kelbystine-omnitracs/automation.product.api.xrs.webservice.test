<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.8.0 on win32)" generated="20191220 16:16:09.178" rpa="false">
<suite id="s1" name="Tests" source="C:\Users\kstine\git\aws-api-gateway-tests\Tests">
<suite id="s1-s1" name="AWS XRS WebServicesTests" source="C:\Users\kstine\git\aws-api-gateway-tests\Tests\AWS_XRS_WebServicesTests">
<suite id="s1-s1-s1" name="ValidateAWSXRSSiteWebService" source="C:\Users\kstine\git\aws-api-gateway-tests\Tests\AWS_XRS_WebServicesTests\05__ValidateAWSXRSSiteWebService.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Create AWS XRS Web Services Session</arg>
<arg>AND</arg>
<arg>Test Data Setup For XRS AWS Site Web Service Test Suite</arg>
</arguments>
<msg timestamp="20191220 16:16:09.407" level="TRACE">Arguments: [ 'Create AWS XRS Web Services Session' | 'AND' | 'Test Data Setup For XRS AWS Site Web Service Test Suite' ]</msg>
<kw name="Create AWS XRS Web Services Session" library="XRSCommonWebService">
<doc>Create a session with aws xrs web services</doc>
<msg timestamp="20191220 16:16:09.407" level="TRACE">Arguments: [  ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${XRS_AWS_WEBSERVICES_URL}[${XRS_HOST_ENVIRONMENT}]</arg>
<arg>verify=True</arg>
<arg>auth=${XRS_WEBSERVICES_AUTHORIZATION}</arg>
</arguments>
<msg timestamp="20191220 16:16:09.407" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'https://d3ws.xataxrs.com' | verify=True | auth=['GnomeShippingD3|admin', 'xrs123'] ]</msg>
<msg timestamp="20191220 16:16:09.408" level="INFO">Creating Session using : alias=xrs_web_service_session, url=https://d3ws.xataxrs.com, headers={},                     cookies={}, auth=&lt;requests.auth.HTTPBasicAuth object at 0x0000023384237EE0&gt;, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<msg timestamp="20191220 16:16:09.408" level="DEBUG">Creating session: xrs_web_service_session</msg>
<msg timestamp="20191220 16:16:09.408" level="DEBUG">Argument types are:
&lt;class 'bool'&gt;</msg>
<msg timestamp="20191220 16:16:09.408" level="TRACE">Return: &lt;requests.sessions.Session object at 0x000002338423D220&gt;</msg>
<status status="PASS" starttime="20191220 16:16:09.407" endtime="20191220 16:16:09.408"></status>
</kw>
<msg timestamp="20191220 16:16:09.408" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191220 16:16:09.407" endtime="20191220 16:16:09.408"></status>
</kw>
<kw name="Test Data Setup For XRS AWS Site Web Service Test Suite">
<doc>Keyword for setting up suite variables for AWS Site Web Service Tests.</doc>
<msg timestamp="20191220 16:16:09.408" level="TRACE">Arguments: [  ]</msg>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>ArrivalGeoCodeType=${XRS_WEB_SERVICES_TEST_SITE.ArrivalGeoCodeType}</arg>
<arg>ArrivalRadius=${XRS_WEB_SERVICES_TEST_SITE.ArrivalRadius}</arg>
<arg>City=${XRS_WEB_SERVICES_TEST_SITE.City}</arg>
<arg>Country=${XRS_WEB_SERVICES_TEST_SITE.Country}</arg>
<arg>DepartureGeoCodeType=${XRS_WEB_SERVICES_TEST_SITE.DepartureGeoCodeType}</arg>
<arg>DepartureRadius=${XRS_WEB_SERVICES_TEST_SITE.DepartureRadius}</arg>
<arg>DepartureSameAsArrival=${XRS_WEB_SERVICES_TEST_SITE.DepartureSameAsArrival}</arg>
<arg>Measure=${XRS_WEB_SERVICES_TEST_SITE.Measure}</arg>
<arg>Name=${XRS_WEB_SERVICES_TEST_SITE.Name}</arg>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>OrganizationName=${XRS_GENERAL_INFORMATION.Company.Company_Name}</arg>
<arg>SiteID=${XRS_WEB_SERVICES_TEST_SITE.SiteID}</arg>
<arg>SiteType=${XRS_WEB_SERVICES_TEST_SITE.SiteType}</arg>
<arg>StateName=${XRS_WEB_SERVICES_TEST_SITE.StateName}</arg>
<arg>TimeZone=${XRS_WEB_SERVICES_TEST_SITE.TimeZone}</arg>
</arguments>
<assign>
<var>&amp;{XRS_AWS_WEBSERVICE_POST_TEST_SITE_1_DICT}</var>
</assign>
<msg timestamp="20191220 16:16:09.409" level="TRACE">Arguments: [ 'ArrivalGeoCodeType=${XRS_WEB_SERVICES_TEST_SITE.ArrivalGeoCodeType}' | 'ArrivalRadius=${XRS_WEB_SERVICES_TEST_SITE.ArrivalRadius}' | 'City=${XRS_WEB_SERVICES_TEST_SITE.City}' | 'Country=${XRS_WEB_SERVICES_TEST_SITE.Country}' | 'DepartureGeoCodeType=${XRS_WEB_SERVICES_TEST_SITE.DepartureGeoCodeType}' | 'DepartureRadius=${XRS_WEB_SERVICES_TEST_SITE.DepartureRadius}' | 'DepartureSameAsArrival=${XRS_WEB_SERVICES_TEST_SITE.DepartureSameAsArrival}' | 'Measure=${XRS_WEB_SERVICES_TEST_SITE.Measure}' | 'Name=${XRS_WEB_SERVICES_TEST_SITE.Name}' | 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'OrganizationName=${XRS_GENERAL_INFORMATION.Company.Company_Name}' | 'SiteID=${XRS_WEB_SERVICES_TEST_SITE.SiteID}' | 'SiteType=${XRS_WEB_SERVICES_TEST_SITE.SiteType}' | 'StateName=${XRS_WEB_SERVICES_TEST_SITE.StateName}' | 'TimeZone=${XRS_WEB_SERVICES_TEST_SITE.TimeZone}' ]</msg>
<msg timestamp="20191220 16:16:09.410" level="TRACE">Return: {'ArrivalGeoCodeType': 'Circle',
 'ArrivalRadius': 500.0,
 'City': 'Minnetonka',
 'Country': 'USA',
 'DepartureGeoCodeType': 'Circle',
 'DepartureRadius': 500.0,
 'DepartureSameAsArrival': True,
 'Measure': 'Feet',
 'Name': 'Test Site',
 'OrganizationID': 46663,
 'OrganizationName': 'Gnome Shipping D3',
 'SiteID': 'TestSite',
 'SiteType': 'Commerce',
 'StateName': 'Minnesota',
 'TimeZone': 'Central'}</msg>
<msg timestamp="20191220 16:16:09.411" level="INFO">&amp;{XRS_AWS_WEBSERVICE_POST_TEST_SITE_1_DICT} = { ArrivalGeoCodeType=Circle | ArrivalRadius=500.0 | City=Minnetonka | Country=USA | DepartureGeoCodeType=Circle | DepartureRadius=500.0 | DepartureSameAsArrival=True | Measure=Feet | Name=Test Site | ...</msg>
<status status="PASS" starttime="20191220 16:16:09.408" endtime="20191220 16:16:09.411"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${XRS_AWS_WEBSERVICE_POST_TEST_SITE_1_DICT}</arg>
</arguments>
<assign>
<var>@{XRS_AWS_WEBSERVICE_POST_TEST_SITE_LIST}</var>
</assign>
<msg timestamp="20191220 16:16:09.411" level="TRACE">Arguments: [ {'ArrivalGeoCodeType': 'Circle',
 'ArrivalRadius': 500.0,
 'City': 'Minnetonka',
 'Country': 'USA',
 'DepartureGeoCodeType': 'Circle',
 'DepartureRadius': 500.0,
 'DepartureSameAsArrival': True,
 'Measure': 'Feet',
 'Name': 'Test Site',
 'OrganizationID': 46663,
 'OrganizationName': 'Gnome Shipping D3',
 'SiteID': 'TestSite',
 'SiteType': 'Commerce',
 'StateName': 'Minnesota',
 'TimeZone': 'Central'} ]</msg>
<msg timestamp="20191220 16:16:09.411" level="TRACE">Return: [{'ArrivalGeoCodeType': 'Circle',
  'ArrivalRadius': 500.0,
  'City': 'Minnetonka',
  'Country': 'USA',
  'DepartureGeoCodeType': 'Circle',
  'DepartureRadius': 500.0,
  'DepartureSameAsArrival': True,
  'Measure': 'Feet',
  'Name': 'Test Site',
  'OrganizationID': 46663,
  'OrganizationName': 'Gnome Shipping D3',
  'SiteID': 'TestSite',
  'SiteType': 'Commerce',
  'StateName': 'Minnesota',
  'TimeZone': 'Central'}]</msg>
<msg timestamp="20191220 16:16:09.411" level="INFO">@{XRS_AWS_WEBSERVICE_POST_TEST_SITE_LIST} = [ {'ArrivalGeoCodeType': 'Circle', 'ArrivalRadius': 500.0, 'City': 'Minnetonka', 'Country': 'USA', 'DepartureGeoCodeType': 'Circle', 'DepartureRadius': 500.0, 'DepartureSameAsArrival': True, 'Measure'...</msg>
<status status="PASS" starttime="20191220 16:16:09.411" endtime="20191220 16:16:09.411"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_POST_TEST_Site_LIST}</arg>
</arguments>
<msg timestamp="20191220 16:16:09.412" level="TRACE">Arguments: [ '@{XRS_AWS_WEBSERVICE_POST_TEST_Site_LIST}' ]</msg>
<msg timestamp="20191220 16:16:09.412" level="INFO">@{XRS_AWS_WEBSERVICE_POST_TEST_Site_LIST} = [ {'ArrivalGeoCodeType': 'Circle', 'ArrivalRadius': 500.0, 'City': 'Minnetonka', 'Country': 'USA', 'DepartureGeoCodeType': 'Circle', 'DepartureRadius': 500.0, 'DepartureSameAsArrival': True, 'Measure'...</msg>
<msg timestamp="20191220 16:16:09.412" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191220 16:16:09.411" endtime="20191220 16:16:09.412"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>ArrivalRadius=${XRS_WEB_SERVICES_TEST_SITE.ArrivalRadius}</arg>
<arg>City=${XRS_WEB_SERVICES_TEST_SITE.City}</arg>
<arg>Country=${XRS_WEB_SERVICES_TEST_SITE.Country}</arg>
<arg>DepartureRadius=${XRS_WEB_SERVICES_TEST_SITE.DepartureRadius}</arg>
<arg>Name=${XRS_WEB_SERVICES_TEST_SITE.Name}Modified</arg>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>SiteID=${XRS_WEB_SERVICES_TEST_SITE.SiteID}</arg>
<arg>StateName=${XRS_WEB_SERVICES_TEST_SITE.StateName}</arg>
<arg>TimeZone=${XRS_WEB_SERVICES_TEST_SITE.TimeZone}</arg>
</arguments>
<assign>
<var>&amp;{XRS_AWS_WEBSERVICE_PUT_TEST_Site_1_DICT}</var>
</assign>
<msg timestamp="20191220 16:16:09.412" level="TRACE">Arguments: [ 'ArrivalRadius=${XRS_WEB_SERVICES_TEST_SITE.ArrivalRadius}' | 'City=${XRS_WEB_SERVICES_TEST_SITE.City}' | 'Country=${XRS_WEB_SERVICES_TEST_SITE.Country}' | 'DepartureRadius=${XRS_WEB_SERVICES_TEST_SITE.DepartureRadius}' | 'Name=${XRS_WEB_SERVICES_TEST_SITE.Name}Modified' | 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'SiteID=${XRS_WEB_SERVICES_TEST_SITE.SiteID}' | 'StateName=${XRS_WEB_SERVICES_TEST_SITE.StateName}' | 'TimeZone=${XRS_WEB_SERVICES_TEST_SITE.TimeZone}' ]</msg>
<msg timestamp="20191220 16:16:09.414" level="TRACE">Return: {'ArrivalRadius': 500.0,
 'City': 'Minnetonka',
 'Country': 'USA',
 'DepartureRadius': 500.0,
 'Name': 'Test SiteModified',
 'OrganizationID': 46663,
 'SiteID': 'TestSite',
 'StateName': 'Minnesota',
 'TimeZone': 'Central'}</msg>
<msg timestamp="20191220 16:16:09.414" level="INFO">&amp;{XRS_AWS_WEBSERVICE_PUT_TEST_Site_1_DICT} = { ArrivalRadius=500.0 | City=Minnetonka | Country=USA | DepartureRadius=500.0 | Name=Test SiteModified | OrganizationID=46663 | SiteID=TestSite | StateName=Minnesota | TimeZone=Central }</msg>
<status status="PASS" starttime="20191220 16:16:09.412" endtime="20191220 16:16:09.414"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${XRS_AWS_WEBSERVICE_PUT_TEST_SITE_1_DICT}</arg>
</arguments>
<assign>
<var>@{XRS_AWS_WEBSERVICE_PUT_TEST_SITE_LIST}</var>
</assign>
<msg timestamp="20191220 16:16:09.414" level="TRACE">Arguments: [ {'ArrivalRadius': 500.0,
 'City': 'Minnetonka',
 'Country': 'USA',
 'DepartureRadius': 500.0,
 'Name': 'Test SiteModified',
 'OrganizationID': 46663,
 'SiteID': 'TestSite',
 'StateName': 'Minnesota',
 'TimeZone': 'Central'} ]</msg>
<msg timestamp="20191220 16:16:09.415" level="TRACE">Return: [{'ArrivalRadius': 500.0,
  'City': 'Minnetonka',
  'Country': 'USA',
  'DepartureRadius': 500.0,
  'Name': 'Test SiteModified',
  'OrganizationID': 46663,
  'SiteID': 'TestSite',
  'StateName': 'Minnesota',
  'TimeZone': 'Central'}]</msg>
<msg timestamp="20191220 16:16:09.415" level="INFO">@{XRS_AWS_WEBSERVICE_PUT_TEST_SITE_LIST} = [ {'ArrivalRadius': 500.0, 'City': 'Minnetonka', 'Country': 'USA', 'DepartureRadius': 500.0, 'Name': 'Test SiteModified', 'OrganizationID': 46663, 'SiteID': 'TestSite', 'StateName': 'Minnesota', 'Time...</msg>
<status status="PASS" starttime="20191220 16:16:09.414" endtime="20191220 16:16:09.415"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_PUT_TEST_SITE_LIST}</arg>
</arguments>
<msg timestamp="20191220 16:16:09.415" level="TRACE">Arguments: [ '@{XRS_AWS_WEBSERVICE_PUT_TEST_SITE_LIST}' ]</msg>
<msg timestamp="20191220 16:16:09.415" level="INFO">@{XRS_AWS_WEBSERVICE_PUT_TEST_SITE_LIST} = [ {'ArrivalRadius': 500.0, 'City': 'Minnetonka', 'Country': 'USA', 'DepartureRadius': 500.0, 'Name': 'Test SiteModified', 'OrganizationID': 46663, 'SiteID': 'TestSite', 'StateName': 'Minnesota', 'Time...</msg>
<msg timestamp="20191220 16:16:09.415" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191220 16:16:09.415" endtime="20191220 16:16:09.415"></status>
</kw>
<msg timestamp="20191220 16:16:09.415" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191220 16:16:09.408" endtime="20191220 16:16:09.415"></status>
</kw>
<msg timestamp="20191220 16:16:09.415" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191220 16:16:09.407" endtime="20191220 16:16:09.416"></status>
</kw>
<test id="s1-s1-s1-t1" name="Validate AWS XRS Get Site REST Web Services Returns Geographic &quot;Site identity does not exist.&quot; Error Message">
<kw name="Get Sites By Site Id" library="Site">
<doc>Get organizations by Site ID.</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_SITE.SiteID}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191220 16:16:09.417" level="TRACE">Arguments: [ ${site_id}='TestSite' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Site}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_SITE}/${site_id}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20191220 16:16:09.418" level="TRACE">Arguments: [ 'SiteWebService.svc/sites/TestSite' ]</msg>
<msg timestamp="20191220 16:16:09.418" level="TRACE">Return: 'SiteWebService.svc/sites/TestSite'</msg>
<msg timestamp="20191220 16:16:09.418" level="INFO">${uri} = SiteWebService.svc/sites/TestSite</msg>
<status status="PASS" starttime="20191220 16:16:09.417" endtime="20191220 16:16:09.418"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191220 16:16:09.418" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'SiteWebService.svc/sites/TestSite' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20191220 16:16:09.418" level="INFO">GET Request using : uri=SiteWebService.svc/sites/TestSite, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20191220 16:16:09.420" level="DEBUG">Starting new HTTPS connection (1): d3ws.xataxrs.com:443</msg>
<msg timestamp="20191220 16:16:10.275" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /SiteWebService.svc/sites/TestSite HTTP/1.1" 500 117</msg>
<msg timestamp="20191220 16:16:10.276" level="DEBUG">GET Response : status=500, reason=Internal Server Error
{"ErrorMessage":"Geographic Site identity does not exist.","EventCode":3461579431091372032,"Parameters":["TestSite"]}</msg>
<msg timestamp="20191220 16:16:10.277" level="TRACE">Return: &lt;Response [500]&gt;</msg>
<msg timestamp="20191220 16:16:10.277" level="INFO">${response} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20191220 16:16:09.418" endtime="20191220 16:16:10.277"></status>
</kw>
<msg timestamp="20191220 16:16:10.277" level="TRACE">Return: &lt;Response [500]&gt;</msg>
<msg timestamp="20191220 16:16:10.278" level="INFO">${response} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20191220 16:16:09.417" endtime="20191220 16:16:10.278"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20191220 16:16:10.280" level="TRACE">Arguments: [ b'{"ErrorMessage":"Geographic Site identity does not exist.","EventCode":3461579431091372032,"Parameters":["TestSite"]}' ]</msg>
<msg timestamp="20191220 16:16:10.281" level="INFO">To JSON using : content={"ErrorMessage":"Geographic Site identity does not exist.","EventCode":3461579431091372032,"Parameters":["TestSite"]} </msg>
<msg timestamp="20191220 16:16:10.281" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20191220 16:16:10.281" level="TRACE">Return: {'ErrorMessage': 'Geographic Site identity does not exist.',
 'EventCode': 3461579431091372032,
 'Parameters': ['TestSite']}</msg>
<msg timestamp="20191220 16:16:10.281" level="INFO">${json_response} = {'ErrorMessage': 'Geographic Site identity does not exist.', 'EventCode': 3461579431091372032, 'Parameters': ['TestSite']}</msg>
<status status="PASS" starttime="20191220 16:16:10.279" endtime="20191220 16:16:10.281"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_response}[ErrorMessage]</arg>
<arg>Geographic Site identity does not exist.</arg>
</arguments>
<msg timestamp="20191220 16:16:10.284" level="TRACE">Arguments: [ 'Geographic Site identity does not exist.' | 'Geographic Site identity does not exist.' ]</msg>
<msg timestamp="20191220 16:16:10.284" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191220 16:16:10.284" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191220 16:16:10.283" endtime="20191220 16:16:10.285"></status>
</kw>
<doc>Verifies that a Site with a specific number does not exist</doc>
<tags>
<tag>awsxrssiterestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20191220 16:16:09.416" endtime="20191220 16:16:10.286" critical="yes"></status>
</test>
<test id="s1-s1-s1-t2" name="Validate AWS XRS Post Site REST Web Services Returns Description &quot;Geographic Site added successfully.&quot;">
<kw name="Post Sites" library="Site">
<doc>Calls the Post Method on Organizations.
Accepts a list of json objects
Json field definitions (POST/PUT requirements):
Address
The address of the site.
ArrivalGeoCodeType
Indicates whether the site area is defined as a circle or a polygon
ArrivalPolygonPoints
The collection of lat/long pairs for each point that defines the boundaries of the polygon.
ArrivalRadius
Arrival perimeter of CIRCLE GeoCode site.
The arrival circle characteristics are also used in site lookups throughout the system.​
City
The name of the city where the site is located.
Country
The name of the country where the site is located.
CreateDate
The date and time the site object was created.
The value of this field is Read Only and cannot be modified using PUT or POST commands.
DeliveryWindows
Delivery Windows Collection Field Definitions:
BeginTime
The beginning time of the delivery window.
DayOfWeek
The day to which the delivery window applies.
When multiple days are provided using a comma separated list,
the values provided in the BeginTime and EndTime fields will apply to all days provided in the list.
EndTime
The ending time of the delivery window.
IsAllowDelivery
The type of delivery window.
A value of true indicates that deliveries are allowed during this window.
A value of false indicates deliveries are not allowed during this window.
DepartureGeoCodeType
Indicates whether the site area is defined as a circle or a polygon
DeparturePolygonPoints
Collection of latitude and longitude coordinate​ pairs for each point that defines the boundary of the polygon GeoCode type.
DepartureRadius
Departure perimeter of a circle Geocode Type
NOTE: This field does not apply to polygon GeoCode types.
DepartureSameAsArrival
Indicates whether the site departure geocode is the same as the site arrive geocode.
Latitude
The latitudinal position of the site.
XRS supports up to 6 decimal points for this value.
Longitude
The longitudinal position of the site.
XRS supports up to 6 decimal points for this value.
Measure
The unit of measure to be used for the Site radius (if selected)
ModifiedBy
The ID of the last person to modify the site.
From AC: CreateDate, ModifiedDate and ModifiedBy data fields will be initialized by system.
ModifiedDate
The date the site record was last modified.
The value of this field is Read Only and cannot be modified using PUT or POST commands.
Name
The name of the Site.
Field length is 3-50 to match current host GUI.
OrganizationID
The user-defined ID of the Organization in XRS.
OrganizationName
The user-defined name of the organization.
PostalCode
The 5 to 9 digit zip code for the organization.
ResourceGroupIDs
Indicates the set of ResourceGroupIDs to which the site belongs.
SiteID
The user-defined ID of the Site in Omnitracs XRS.
SiteType
Unknown, Commerce, Domicile, Terminal, Fuel Stop, Government, Rest Stop, Shop, Truck Stop
StateName
The name of the state or province where the site is located.
This field corresponds to the State.Province field on the Edit Site &gt; General Information tab.
TimeZone
Identifies the Time Zone the site is located in.
UserDefinedField1
User-defined field #1
UserDefinedField2
User-defined field #2
UserDefinedField3
User-defined field #3
UserDefinedField4
User-defined field #4
UserDefinedField5
User-defined field #5</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_POST_TEST_SITE_LIST}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191220 16:16:10.292" level="TRACE">Arguments: [ @{list_data}=[{'ArrivalGeoCodeType': 'Circle',
  'ArrivalRadius': 500.0,
  'City': 'Minnetonka',
  'Country': 'USA',
  'DepartureGeoCodeType': 'Circle',
  'DepartureRadius': 500.0,
  'DepartureSameAsArrival': True,
  'Measure': 'Feet',
  'Name': 'Test Site',
  'OrganizationID': 46663,
  'OrganizationName': 'Gnome Shipping D3',
  'SiteID': 'TestSite',
  'SiteType': 'Commerce',
  'StateName': 'Minnesota',
  'TimeZone': 'Central'}] ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Site}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_SITE}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20191220 16:16:10.293" level="TRACE">Arguments: [ 'SiteWebService.svc/sites' ]</msg>
<msg timestamp="20191220 16:16:10.294" level="TRACE">Return: 'SiteWebService.svc/sites'</msg>
<msg timestamp="20191220 16:16:10.294" level="INFO">${uri} = SiteWebService.svc/sites</msg>
<status status="PASS" starttime="20191220 16:16:10.293" endtime="20191220 16:16:10.294"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>json=${list_data}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191220 16:16:10.295" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'SiteWebService.svc/sites' | json=[{'ArrivalGeoCodeType': 'Circle',
  'ArrivalRadius': 500.0,
  'City': 'Minnetonka',
  'Country': 'USA',
  'DepartureGeoCodeType': 'Circle',
  'DepartureRadius': 500.0,
  'DepartureSameAsArrival': True,
  'Measure': 'Feet',
  'Name': 'Test Site',
  'OrganizationID': 46663,
  'OrganizationName': 'Gnome Shipping D3',
  'SiteID': 'TestSite',
  'SiteType': 'Commerce',
  'StateName': 'Minnesota',
  'TimeZone': 'Central'}] | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20191220 16:16:10.296" level="INFO">POST Request using : uri=SiteWebService.svc/sites, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=[{'ArrivalGeoCodeType': 'Circle', 'ArrivalRadius': 500.0, 'City': 'Minnetonka', 'Country': 'USA', 'DepartureGeoCodeType': 'Circle', 'DepartureRadius': 500.0, 'DepartureSameAsArrival': True, 'Measure': 'Feet', 'Name': 'Test Site', 'OrganizationID': 46663, 'OrganizationName': 'Gnome Shipping D3', 'SiteID': 'TestSite', 'SiteType': 'Commerce', 'StateName': 'Minnesota', 'TimeZone': 'Central'}]</msg>
<msg timestamp="20191220 16:16:10.960" level="DEBUG">https://d3ws.xataxrs.com:443 "POST /SiteWebService.svc/sites HTTP/1.1" 200 173</msg>
<msg timestamp="20191220 16:16:10.961" level="DEBUG">POST Response : status=200, reason=OK
[{"Caption":"Created","Code":"201","Description":"Geographic Site added successfully.","Id":"TestSite","ObjectName":"Test Site","SID":21342,"Title":"GeographicSite Added."}]</msg>
<msg timestamp="20191220 16:16:10.961" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191220 16:16:10.962" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191220 16:16:10.294" endtime="20191220 16:16:10.962"></status>
</kw>
<msg timestamp="20191220 16:16:10.962" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191220 16:16:10.963" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191220 16:16:10.291" endtime="20191220 16:16:10.963"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20191220 16:16:10.965" level="TRACE">Arguments: [ b'[{"Caption":"Created","Code":"201","Description":"Geographic Site added successfully.","Id":"TestSite","ObjectName":"Test Site","SID":21342,"Title":"GeographicSite Added."}]' ]</msg>
<msg timestamp="20191220 16:16:10.965" level="INFO">To JSON using : content=[{"Caption":"Created","Code":"201","Description":"Geographic Site added successfully.","Id":"TestSite","ObjectName":"Test Site","SID":21342,"Title":"GeographicSite Added."}] </msg>
<msg timestamp="20191220 16:16:10.965" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20191220 16:16:10.965" level="TRACE">Return: [{'Caption': 'Created',
  'Code': '201',
  'Description': 'Geographic Site added successfully.',
  'Id': 'TestSite',
  'ObjectName': 'Test Site',
  'SID': 21342,
  'Title': 'GeographicSite Added.'}]</msg>
<msg timestamp="20191220 16:16:10.966" level="INFO">${json_response} = [{'Caption': 'Created', 'Code': '201', 'Description': 'Geographic Site added successfully.', 'Id': 'TestSite', 'ObjectName': 'Test Site', 'SID': 21342, 'Title': 'GeographicSite Added.'}]</msg>
<status status="PASS" starttime="20191220 16:16:10.964" endtime="20191220 16:16:10.966"></status>
</kw>
<kw name="${r} IN [ @{json_response} ]" type="for">
<kw name="${r} = {'Caption': 'Created', 'Code': '201', 'Description': 'Geographic Site added successfully.', 'Id': 'TestSite', 'ObjectName': 'Test Site', 'SID': 21342, 'Title': 'GeographicSite Added.'}" type="foritem">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${r}[Description]</arg>
<arg>Geographic Site added successfully.</arg>
</arguments>
<msg timestamp="20191220 16:16:10.968" level="TRACE">Arguments: [ 'Geographic Site added successfully.' | 'Geographic Site added successfully.' ]</msg>
<msg timestamp="20191220 16:16:10.969" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191220 16:16:10.969" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191220 16:16:10.968" endtime="20191220 16:16:10.969"></status>
</kw>
<status status="PASS" starttime="20191220 16:16:10.967" endtime="20191220 16:16:10.969"></status>
</kw>
<status status="PASS" starttime="20191220 16:16:10.967" endtime="20191220 16:16:10.969"></status>
</kw>
<doc>Posts a Site and expects a Code value of 201</doc>
<tags>
<tag>awsxrssiterestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20191220 16:16:10.289" endtime="20191220 16:16:10.970" critical="yes"></status>
</test>
<test id="s1-s1-s1-t3" name="Validate AWS XRS Get Site REST Web Services Returns 200 OK">
<kw name="Get Sites By Site Id" library="Site">
<doc>Get organizations by Site ID.</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_SITE.SiteID}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191220 16:16:10.974" level="TRACE">Arguments: [ ${site_id}='TestSite' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Site}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_SITE}/${site_id}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20191220 16:16:10.976" level="TRACE">Arguments: [ 'SiteWebService.svc/sites/TestSite' ]</msg>
<msg timestamp="20191220 16:16:10.976" level="TRACE">Return: 'SiteWebService.svc/sites/TestSite'</msg>
<msg timestamp="20191220 16:16:10.976" level="INFO">${uri} = SiteWebService.svc/sites/TestSite</msg>
<status status="PASS" starttime="20191220 16:16:10.975" endtime="20191220 16:16:10.976"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191220 16:16:10.977" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'SiteWebService.svc/sites/TestSite' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20191220 16:16:10.977" level="INFO">GET Request using : uri=SiteWebService.svc/sites/TestSite, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20191220 16:16:11.542" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /SiteWebService.svc/sites/TestSite HTTP/1.1" 200 727</msg>
<msg timestamp="20191220 16:16:11.543" level="DEBUG">GET Response : status=200, reason=OK
{"Address":"","ArrivalGeoCodeType":"Circle","ArrivalPolygonPoints":"","ArrivalRadius":500,"City":"Minnetonka","Country":"USA","CreateDate":"\/Date(1576880156674)\/","DeliveryWindows":[],"DepartureGeoCodeType":"Circle","DeparturePolygonPoints":"","DepartureRadius":500,"DepartureSameAsArrival":true,"Latitude":0,"Longitude":0,"Measure":"Feet","ModifiedBy":"admin","ModifiedDate":"\/Date(1576880156674)\/","Name":"Test Site","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PostalCode":"","ResourceGroupIDs":"","SiteID":"TestSite","SiteType":"Commerce","StateName":"Minnesota","TimeZone":"Central","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""}</msg>
<msg timestamp="20191220 16:16:11.543" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191220 16:16:11.543" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191220 16:16:10.976" endtime="20191220 16:16:11.544"></status>
</kw>
<msg timestamp="20191220 16:16:11.544" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191220 16:16:11.544" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191220 16:16:10.974" endtime="20191220 16:16:11.544"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191220 16:16:11.547" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191220 16:16:11.547" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191220 16:16:11.547" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191220 16:16:11.546" endtime="20191220 16:16:11.547"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20191220 16:16:11.549" level="TRACE">Arguments: [ b'{"Address":"","ArrivalGeoCodeType":"Circle","ArrivalPolygonPoints":"","ArrivalRadius":500,"City":"Minnetonka","Country":"USA","CreateDate":"\\/Date(1576880156674)\\/","DeliveryWindows":[],"DepartureGeoCodeType":"Circle","DeparturePolygonPoints":"","DepartureRadius":500,"DepartureSameAsArrival":true,"Latitude":0,"Longitude":0,"Measure":"Feet","ModifiedBy":"admin","ModifiedDate":"\\/Date(1576880156674)\\/","Name":"Test Site","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PostalCode":"","ResourceGroupIDs":"","SiteID":"TestSite","SiteType":"Commerce","StateName":"Minnesota","TimeZone":"Central","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""}' ]</msg>
<msg timestamp="20191220 16:16:11.550" level="INFO">To JSON using : content={"Address":"","ArrivalGeoCodeType":"Circle","ArrivalPolygonPoints":"","ArrivalRadius":500,"City":"Minnetonka","Country":"USA","CreateDate":"\/Date(1576880156674)\/","DeliveryWindows":[],"DepartureGeoCodeType":"Circle","DeparturePolygonPoints":"","DepartureRadius":500,"DepartureSameAsArrival":true,"Latitude":0,"Longitude":0,"Measure":"Feet","ModifiedBy":"admin","ModifiedDate":"\/Date(1576880156674)\/","Name":"Test Site","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PostalCode":"","ResourceGroupIDs":"","SiteID":"TestSite","SiteType":"Commerce","StateName":"Minnesota","TimeZone":"Central","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""} </msg>
<msg timestamp="20191220 16:16:11.550" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20191220 16:16:11.550" level="TRACE">Return: {'Address': '',
 'ArrivalGeoCodeType': 'Circle',
 'ArrivalPolygonPoints': '',
 'ArrivalRadius': 500,
 'City': 'Minnetonka',
 'Country': 'USA',
 'CreateDate': '/Date(1576880156674)/',
 'DeliveryWindows': [],
 'DepartureGeoCodeType': 'Circle',
 'DeparturePolygonPoints': '',
 'DepartureRadius': 500,
 'DepartureSameAsArrival': True,
 'Latitude': 0,
 'Longitude': 0,
 'Measure': 'Feet',
 'ModifiedBy': 'admin',
 'ModifiedDate': '/Date(1576880156674)/',
 'Name': 'Test Site',
 'OrganizationID': '46663',
 'OrganizationName': 'Gnome Shipping D3',
 'PostalCode': '',
 'ResourceGroupIDs': '',
 'SiteID': 'TestSite',
 'SiteType': 'Commerce',
 'StateName': 'Minnesota',
 'TimeZone': 'Central',
 'UserDefinedField1': '',
 'UserDefinedField2': '',
 'UserDefinedField3': '',
 'UserDefinedField4': '',
 'UserDefinedField5': ''}</msg>
<msg timestamp="20191220 16:16:11.551" level="INFO">${json_response} = {'Address': '', 'ArrivalGeoCodeType': 'Circle', 'ArrivalPolygonPoints': '', 'ArrivalRadius': 500, 'City': 'Minnetonka', 'Country': 'USA', 'CreateDate': '/Date(1576880156674)/', 'DeliveryWindows': [], ...</msg>
<status status="PASS" starttime="20191220 16:16:11.548" endtime="20191220 16:16:11.551"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${json_response}[SiteID]</arg>
</arguments>
<assign>
<var>${XRS_WEB_SERVICES_TEST_SITE_SID}</var>
</assign>
<msg timestamp="20191220 16:16:11.553" level="TRACE">Arguments: [ 'TestSite' ]</msg>
<msg timestamp="20191220 16:16:11.553" level="TRACE">Return: 'TestSite'</msg>
<msg timestamp="20191220 16:16:11.554" level="INFO">${XRS_WEB_SERVICES_TEST_SITE_SID} = TestSite</msg>
<status status="PASS" starttime="20191220 16:16:11.552" endtime="20191220 16:16:11.554"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_SITE_SID}</arg>
</arguments>
<msg timestamp="20191220 16:16:11.555" level="TRACE">Arguments: [ '${XRS_WEB_SERVICES_TEST_SITE_SID}' ]</msg>
<msg timestamp="20191220 16:16:11.556" level="INFO">${XRS_WEB_SERVICES_TEST_SITE_SID} = TestSite</msg>
<msg timestamp="20191220 16:16:11.556" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191220 16:16:11.555" endtime="20191220 16:16:11.556"></status>
</kw>
<doc>Verifies that a posted Site now exists</doc>
<tags>
<tag>awsxrssiterestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20191220 16:16:10.972" endtime="20191220 16:16:11.557" critical="yes"></status>
</test>
<test id="s1-s1-s1-t4" name="Validate AWS XRS Put Site REST Web Services Modifies Site Successfully">
<kw name="Put Sites" library="Site">
<doc>Calls the Put Method on Sites.
Accepts a list of json objects
See Json field definitions in the "Post Sites" Keyword</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_PUT_TEST_SITE_LIST}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191220 16:16:11.562" level="TRACE">Arguments: [ @{list_data}=[{'ArrivalRadius': 500.0,
  'City': 'Minnetonka',
  'Country': 'USA',
  'DepartureRadius': 500.0,
  'Name': 'Test SiteModified',
  'OrganizationID': 46663,
  'SiteID': 'TestSite',
  'StateName': 'Minnesota',
  'TimeZone': 'Central'}] ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Site}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_SITE}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20191220 16:16:11.563" level="TRACE">Arguments: [ 'SiteWebService.svc/sites' ]</msg>
<msg timestamp="20191220 16:16:11.563" level="TRACE">Return: 'SiteWebService.svc/sites'</msg>
<msg timestamp="20191220 16:16:11.563" level="INFO">${uri} = SiteWebService.svc/sites</msg>
<status status="PASS" starttime="20191220 16:16:11.562" endtime="20191220 16:16:11.563"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary">
<doc>Send a PUT request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>json=${list_data}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191220 16:16:11.564" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'SiteWebService.svc/sites' | json=[{'ArrivalRadius': 500.0,
  'City': 'Minnetonka',
  'Country': 'USA',
  'DepartureRadius': 500.0,
  'Name': 'Test SiteModified',
  'OrganizationID': 46663,
  'SiteID': 'TestSite',
  'StateName': 'Minnesota',
  'TimeZone': 'Central'}] | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20191220 16:16:11.565" level="INFO">PUT Request using : uri=SiteWebService.svc/sites, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=[{'ArrivalRadius': 500.0, 'City': 'Minnetonka', 'Country': 'USA', 'DepartureRadius': 500.0, 'Name': 'Test SiteModified', 'OrganizationID': 46663, 'SiteID': 'TestSite', 'StateName': 'Minnesota', 'TimeZone': 'Central'}]</msg>
<msg timestamp="20191220 16:16:12.313" level="DEBUG">https://d3ws.xataxrs.com:443 "PUT /SiteWebService.svc/sites HTTP/1.1" 200 183</msg>
<msg timestamp="20191220 16:16:12.314" level="DEBUG">PUT Response : status=200, reason=OK
[{"Caption":"Edited.","Code":"200","Description":"Geographic Site edited successfully.","Id":"TestSite","ObjectName":"Test SiteModified","SID":21342,"Title":"GeographicSite Edited."}]</msg>
<msg timestamp="20191220 16:16:12.314" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191220 16:16:12.314" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191220 16:16:11.563" endtime="20191220 16:16:12.314"></status>
</kw>
<msg timestamp="20191220 16:16:12.314" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191220 16:16:12.315" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191220 16:16:11.561" endtime="20191220 16:16:12.315"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20191220 16:16:12.315" level="TRACE">Arguments: [ b'[{"Caption":"Edited.","Code":"200","Description":"Geographic Site edited successfully.","Id":"TestSite","ObjectName":"Test SiteModified","SID":21342,"Title":"GeographicSite Edited."}]' ]</msg>
<msg timestamp="20191220 16:16:12.316" level="INFO">To JSON using : content=[{"Caption":"Edited.","Code":"200","Description":"Geographic Site edited successfully.","Id":"TestSite","ObjectName":"Test SiteModified","SID":21342,"Title":"GeographicSite Edited."}] </msg>
<msg timestamp="20191220 16:16:12.316" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20191220 16:16:12.316" level="TRACE">Return: [{'Caption': 'Edited.',
  'Code': '200',
  'Description': 'Geographic Site edited successfully.',
  'Id': 'TestSite',
  'ObjectName': 'Test SiteModified',
  'SID': 21342,
  'Title': 'GeographicSite Edited.'}]</msg>
<msg timestamp="20191220 16:16:12.316" level="INFO">${json_response} = [{'Caption': 'Edited.', 'Code': '200', 'Description': 'Geographic Site edited successfully.', 'Id': 'TestSite', 'ObjectName': 'Test SiteModified', 'SID': 21342, 'Title': 'GeographicSite Edited.'}]</msg>
<status status="PASS" starttime="20191220 16:16:12.315" endtime="20191220 16:16:12.316"></status>
</kw>
<kw name="${r} IN [ @{json_response} ]" type="for">
<kw name="${r} = {'Caption': 'Edited.', 'Code': '200', 'Description': 'Geographic Site edited successfully.', 'Id': 'TestSite', 'ObjectName': 'Test SiteModified', 'SID': 21342, 'Title': 'GeographicSite Edited.'}" type="foritem">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${r}[Description]</arg>
<arg>Geographic Site edited successfully.</arg>
</arguments>
<msg timestamp="20191220 16:16:12.317" level="TRACE">Arguments: [ 'Geographic Site edited successfully.' | 'Geographic Site edited successfully.' ]</msg>
<msg timestamp="20191220 16:16:12.317" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191220 16:16:12.317" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191220 16:16:12.317" endtime="20191220 16:16:12.317"></status>
</kw>
<status status="PASS" starttime="20191220 16:16:12.317" endtime="20191220 16:16:12.317"></status>
</kw>
<status status="PASS" starttime="20191220 16:16:12.316" endtime="20191220 16:16:12.317"></status>
</kw>
<doc>Posts a Site and expects a Code value of 201</doc>
<tags>
<tag>awsxrssiterestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20191220 16:16:11.560" endtime="20191220 16:16:12.318" critical="yes"></status>
</test>
<test id="s1-s1-s1-t5" name="Validate AWS XRS Get Sites REST Web Services Returns 200 OK">
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20191220 16:16:12.320" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20191220 16:16:12.321" level="TRACE">Return: ['2019', '12', '20']</msg>
<msg timestamp="20191220 16:16:12.321" level="INFO">${yyyy} = 2019</msg>
<msg timestamp="20191220 16:16:12.321" level="INFO">${mm} = 12</msg>
<msg timestamp="20191220 16:16:12.321" level="INFO">${dd} = 20</msg>
<status status="PASS" starttime="20191220 16:16:12.320" endtime="20191220 16:16:12.321"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20191220 16:16:12.322" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20191220 16:16:12.323" level="TRACE">Return: {'AsOfDateTime': '12/20/2019', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20191220 16:16:12.323" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=12/20/2019 }</msg>
<status status="PASS" starttime="20191220 16:16:12.322" endtime="20191220 16:16:12.323"></status>
</kw>
<kw name="Verify Get Sites With Forward Slash Returns 200 OK">
<doc>Verify that using a '/' in the URI returns 200 OK</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<msg timestamp="20191220 16:16:12.324" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '12/20/2019', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/</arg>
</arguments>
<assign>
<var>${ending_character}</var>
</assign>
<msg timestamp="20191220 16:16:12.325" level="TRACE">Arguments: [ '/' ]</msg>
<msg timestamp="20191220 16:16:12.325" level="TRACE">Return: '/'</msg>
<msg timestamp="20191220 16:16:12.325" level="INFO">${ending_character} = /</msg>
<status status="PASS" starttime="20191220 16:16:12.325" endtime="20191220 16:16:12.325"></status>
</kw>
<kw name="Get Sites With URI Ending With ${ending_character} And Parameters &amp;{params}" library="Site">
<doc>This Keyword modifies character between the base uri and the parameters
This will get Sites that match the provided parameters.
Params can be named individually or within a Dictionary
See the Get Sites Keyword for param definitions.</doc>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191220 16:16:12.326" level="TRACE">Arguments: [ ${ending_character}='/' | ${params}={'AsOfDateTime': '12/20/2019', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Site}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_SITE}${ending_character}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20191220 16:16:12.327" level="TRACE">Arguments: [ 'SiteWebService.svc/sites/' ]</msg>
<msg timestamp="20191220 16:16:12.327" level="TRACE">Return: 'SiteWebService.svc/sites/'</msg>
<msg timestamp="20191220 16:16:12.327" level="INFO">${uri} = SiteWebService.svc/sites/</msg>
<status status="PASS" starttime="20191220 16:16:12.326" endtime="20191220 16:16:12.327"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191220 16:16:12.328" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'SiteWebService.svc/sites/' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} | params={'AsOfDateTime': '12/20/2019', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<msg timestamp="20191220 16:16:12.328" level="INFO">GET Request using : uri=SiteWebService.svc/sites/, params={'OrganizationID': 46663, 'IsActive': 'True', 'AsOfDateTime': '12/20/2019'}, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20191220 16:16:12.922" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /SiteWebService.svc/sites/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=12%2F20%2F2019 HTTP/1.1" 200 738</msg>
<msg timestamp="20191220 16:16:12.926" level="DEBUG">GET Response : status=200, reason=OK
[{"Address":"","ArrivalGeoCodeType":"Circle","ArrivalPolygonPoints":"","ArrivalRadius":500,"City":"Minnetonka","Country":"USA","CreateDate":"\/Date(1576880156674)\/","DeliveryWindows":[],"DepartureGeoCodeType":"Circle","DeparturePolygonPoints":"","DepartureRadius":500,"DepartureSameAsArrival":false,"Latitude":0,"Longitude":0,"Measure":"Feet","ModifiedBy":"admin","ModifiedDate":"\/Date(1576880157941)\/","Name":"Test SiteModified","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PostalCode":"","ResourceGroupIDs":"","SiteID":"TestSite","SiteType":"Commerce","StateName":"Minnesota","TimeZone":"Central","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""}]</msg>
<msg timestamp="20191220 16:16:12.926" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191220 16:16:12.927" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191220 16:16:12.327" endtime="20191220 16:16:12.927"></status>
</kw>
<msg timestamp="20191220 16:16:12.928" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191220 16:16:12.929" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191220 16:16:12.325" endtime="20191220 16:16:12.929"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191220 16:16:12.931" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191220 16:16:12.931" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191220 16:16:12.932" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191220 16:16:12.930" endtime="20191220 16:16:12.932"></status>
</kw>
<msg timestamp="20191220 16:16:12.933" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191220 16:16:12.324" endtime="20191220 16:16:12.933"></status>
</kw>
<kw name="Verify Get Sites Without Forward Slash Returns 200 OK">
<doc>Verify that not using a '/' in the URI returns 200 OK</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<msg timestamp="20191220 16:16:12.937" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '12/20/2019', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Get Sites" library="Site">
<doc>Call the Get Method on Sites.
This will get Sites that match the provided parameters.
Params can be named individually or within a Dictionary
Param Definitions:
AsOfDateTime
Tells the service to return only the data that changed since the specified date and time.
System Limit: 30 days
Limit
Used in conjunction with the Offset parameter to implement paging.
Limits the number of results to a specified number.
System Limit: 10,000
Offset
Used in conjunction with the Limit parameter to implement paging.
Represents a page number for the starting point of the return set.
OrganizationID
Limits results to sites in one or more organizations.
[No Filter] - Limits results to all sites within organizations that are associated with the Web Service User ID.
[OrganizationID] - Limits results to sites that belong to the specified Organization.
Recurse
True - Limits results to all site objects in the hierarchy of organizations within the specified OrganizationID.
False - Limits results to all site objects within specified OrganizationID.
ResourceGroupID
Limits results to sites in one or more resource groups.
[No Filter] - Limits results to all sites within resource groups that are associated with the Web Service User ID.
[ResourceGroupID] - Limits results to the specified Resource Group ID.
SiteID
Limits results to site object with SiteID equal to that specified.</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191220 16:16:12.940" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '12/20/2019', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Site}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_SITE}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20191220 16:16:12.943" level="TRACE">Arguments: [ 'SiteWebService.svc/sites' ]</msg>
<msg timestamp="20191220 16:16:12.944" level="TRACE">Return: 'SiteWebService.svc/sites'</msg>
<msg timestamp="20191220 16:16:12.945" level="INFO">${uri} = SiteWebService.svc/sites</msg>
<status status="PASS" starttime="20191220 16:16:12.942" endtime="20191220 16:16:12.945"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191220 16:16:12.947" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'SiteWebService.svc/sites' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} | params={'AsOfDateTime': '12/20/2019', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<msg timestamp="20191220 16:16:12.949" level="INFO">GET Request using : uri=SiteWebService.svc/sites, params={'OrganizationID': 46663, 'IsActive': 'True', 'AsOfDateTime': '12/20/2019'}, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20191220 16:16:13.546" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /SiteWebService.svc/sites?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=12%2F20%2F2019 HTTP/1.1" 200 738</msg>
<msg timestamp="20191220 16:16:13.547" level="DEBUG">GET Response : status=200, reason=OK
[{"Address":"","ArrivalGeoCodeType":"Circle","ArrivalPolygonPoints":"","ArrivalRadius":500,"City":"Minnetonka","Country":"USA","CreateDate":"\/Date(1576880156674)\/","DeliveryWindows":[],"DepartureGeoCodeType":"Circle","DeparturePolygonPoints":"","DepartureRadius":500,"DepartureSameAsArrival":false,"Latitude":0,"Longitude":0,"Measure":"Feet","ModifiedBy":"admin","ModifiedDate":"\/Date(1576880157941)\/","Name":"Test SiteModified","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PostalCode":"","ResourceGroupIDs":"","SiteID":"TestSite","SiteType":"Commerce","StateName":"Minnesota","TimeZone":"Central","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""}]</msg>
<msg timestamp="20191220 16:16:13.547" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191220 16:16:13.547" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191220 16:16:12.946" endtime="20191220 16:16:13.548"></status>
</kw>
<msg timestamp="20191220 16:16:13.548" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191220 16:16:13.548" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191220 16:16:12.938" endtime="20191220 16:16:13.548"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191220 16:16:13.549" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191220 16:16:13.550" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191220 16:16:13.550" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191220 16:16:13.549" endtime="20191220 16:16:13.550"></status>
</kw>
<msg timestamp="20191220 16:16:13.550" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191220 16:16:12.935" endtime="20191220 16:16:13.550"></status>
</kw>
<doc>Get Sites with basic parameters</doc>
<tags>
<tag>awsxrssiterestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20191220 16:16:12.319" endtime="20191220 16:16:13.551" critical="yes"></status>
</test>
<test id="s1-s1-s1-t6" name="Validate AWS XRS Get Sites REST Web Services Returns 200 OK With Raw String URI">
<kw name="Verify Get Sites Raw String URI With /? Returns 200 OK">
<doc>Verify that using the given character string in the raw URI string returns 200 OK</doc>
<msg timestamp="20191220 16:16:13.556" level="TRACE">Arguments: [ ${character_string}='/?' ]</msg>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20191220 16:16:13.557" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20191220 16:16:13.557" level="TRACE">Return: ['2019', '12', '20']</msg>
<msg timestamp="20191220 16:16:13.558" level="INFO">${yyyy} = 2019</msg>
<msg timestamp="20191220 16:16:13.558" level="INFO">${mm} = 12</msg>
<msg timestamp="20191220 16:16:13.558" level="INFO">${dd} = 20</msg>
<status status="PASS" starttime="20191220 16:16:13.557" endtime="20191220 16:16:13.558"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20191220 16:16:13.558" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20191220 16:16:13.559" level="TRACE">Return: {'AsOfDateTime': '12/20/2019', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20191220 16:16:13.560" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=12/20/2019 }</msg>
<status status="PASS" starttime="20191220 16:16:13.558" endtime="20191220 16:16:13.560"></status>
</kw>
<kw name="Create URI String With" library="URIStringBuilderTool">
<doc>Helper Keyword to construct the request uri with different character strings
base_uri = webservice uri
request_type = request extentenstion for the webservice
character_string = final character of the uri. i.e. /, /?, etc ...</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Site}</arg>
<arg>${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_SITE}</arg>
<arg>${character_string}</arg>
</arguments>
<assign>
<var>${uri_string}</var>
</assign>
<msg timestamp="20191220 16:16:13.561" level="TRACE">Arguments: [ ${base_uri}='SiteWebService.svc' | ${request_type}='/sites' | ${character_string}='/?' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${base_uri}${request_type}${character_string}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20191220 16:16:13.561" level="TRACE">Arguments: [ 'SiteWebService.svc/sites/?' ]</msg>
<msg timestamp="20191220 16:16:13.561" level="TRACE">Return: 'SiteWebService.svc/sites/?'</msg>
<msg timestamp="20191220 16:16:13.561" level="INFO">${uri} = SiteWebService.svc/sites/?</msg>
<status status="PASS" starttime="20191220 16:16:13.561" endtime="20191220 16:16:13.561"></status>
</kw>
<msg timestamp="20191220 16:16:13.562" level="TRACE">Return: 'SiteWebService.svc/sites/?'</msg>
<msg timestamp="20191220 16:16:13.562" level="INFO">${uri_string} = SiteWebService.svc/sites/?</msg>
<status status="PASS" starttime="20191220 16:16:13.560" endtime="20191220 16:16:13.562"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${uri_string}OrganizationID=${params.OrganizationID}&amp;IsActive=${params.IsActive}&amp;AsOfDateTime=${params.AsOfDateTime}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20191220 16:16:13.563" level="TRACE">Arguments: [ 'SiteWebService.svc/sites/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=12/20/2019' ]</msg>
<msg timestamp="20191220 16:16:13.563" level="TRACE">Return: 'SiteWebService.svc/sites/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=12/20/2019'</msg>
<msg timestamp="20191220 16:16:13.563" level="INFO">${uri} = SiteWebService.svc/sites/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=12/20/2019</msg>
<status status="PASS" starttime="20191220 16:16:13.562" endtime="20191220 16:16:13.563"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191220 16:16:13.564" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'SiteWebService.svc/sites/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=12/20/2019' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20191220 16:16:13.565" level="INFO">GET Request using : uri=SiteWebService.svc/sites/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=12/20/2019, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20191220 16:16:14.201" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /SiteWebService.svc/sites/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=12/20/2019 HTTP/1.1" 200 738</msg>
<msg timestamp="20191220 16:16:14.202" level="DEBUG">GET Response : status=200, reason=OK
[{"Address":"","ArrivalGeoCodeType":"Circle","ArrivalPolygonPoints":"","ArrivalRadius":500,"City":"Minnetonka","Country":"USA","CreateDate":"\/Date(1576880156674)\/","DeliveryWindows":[],"DepartureGeoCodeType":"Circle","DeparturePolygonPoints":"","DepartureRadius":500,"DepartureSameAsArrival":false,"Latitude":0,"Longitude":0,"Measure":"Feet","ModifiedBy":"admin","ModifiedDate":"\/Date(1576880157941)\/","Name":"Test SiteModified","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PostalCode":"","ResourceGroupIDs":"","SiteID":"TestSite","SiteType":"Commerce","StateName":"Minnesota","TimeZone":"Central","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""}]</msg>
<msg timestamp="20191220 16:16:14.202" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191220 16:16:14.202" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191220 16:16:13.564" endtime="20191220 16:16:14.202"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191220 16:16:14.203" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191220 16:16:14.203" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191220 16:16:14.203" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191220 16:16:14.202" endtime="20191220 16:16:14.203"></status>
</kw>
<msg timestamp="20191220 16:16:14.204" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191220 16:16:13.555" endtime="20191220 16:16:14.204"></status>
</kw>
<kw name="Verify Get Sites Raw String URI With ? Returns 200 OK">
<doc>Verify that using the given character string in the raw URI string returns 200 OK</doc>
<msg timestamp="20191220 16:16:14.205" level="TRACE">Arguments: [ ${character_string}='?' ]</msg>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20191220 16:16:14.206" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20191220 16:16:14.206" level="TRACE">Return: ['2019', '12', '20']</msg>
<msg timestamp="20191220 16:16:14.206" level="INFO">${yyyy} = 2019</msg>
<msg timestamp="20191220 16:16:14.206" level="INFO">${mm} = 12</msg>
<msg timestamp="20191220 16:16:14.207" level="INFO">${dd} = 20</msg>
<status status="PASS" starttime="20191220 16:16:14.206" endtime="20191220 16:16:14.207"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20191220 16:16:14.207" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20191220 16:16:14.208" level="TRACE">Return: {'AsOfDateTime': '12/20/2019', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20191220 16:16:14.208" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=12/20/2019 }</msg>
<status status="PASS" starttime="20191220 16:16:14.207" endtime="20191220 16:16:14.208"></status>
</kw>
<kw name="Create URI String With" library="URIStringBuilderTool">
<doc>Helper Keyword to construct the request uri with different character strings
base_uri = webservice uri
request_type = request extentenstion for the webservice
character_string = final character of the uri. i.e. /, /?, etc ...</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Site}</arg>
<arg>${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_SITE}</arg>
<arg>${character_string}</arg>
</arguments>
<assign>
<var>${uri_string}</var>
</assign>
<msg timestamp="20191220 16:16:14.210" level="TRACE">Arguments: [ ${base_uri}='SiteWebService.svc' | ${request_type}='/sites' | ${character_string}='?' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${base_uri}${request_type}${character_string}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20191220 16:16:14.211" level="TRACE">Arguments: [ 'SiteWebService.svc/sites?' ]</msg>
<msg timestamp="20191220 16:16:14.211" level="TRACE">Return: 'SiteWebService.svc/sites?'</msg>
<msg timestamp="20191220 16:16:14.211" level="INFO">${uri} = SiteWebService.svc/sites?</msg>
<status status="PASS" starttime="20191220 16:16:14.210" endtime="20191220 16:16:14.211"></status>
</kw>
<msg timestamp="20191220 16:16:14.211" level="TRACE">Return: 'SiteWebService.svc/sites?'</msg>
<msg timestamp="20191220 16:16:14.212" level="INFO">${uri_string} = SiteWebService.svc/sites?</msg>
<status status="PASS" starttime="20191220 16:16:14.209" endtime="20191220 16:16:14.212"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${uri_string}OrganizationID=${params.OrganizationID}&amp;IsActive=${params.IsActive}&amp;AsOfDateTime=${params.AsOfDateTime}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20191220 16:16:14.213" level="TRACE">Arguments: [ 'SiteWebService.svc/sites?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=12/20/2019' ]</msg>
<msg timestamp="20191220 16:16:14.213" level="TRACE">Return: 'SiteWebService.svc/sites?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=12/20/2019'</msg>
<msg timestamp="20191220 16:16:14.213" level="INFO">${uri} = SiteWebService.svc/sites?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=12/20/2019</msg>
<status status="PASS" starttime="20191220 16:16:14.212" endtime="20191220 16:16:14.213"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191220 16:16:14.213" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'SiteWebService.svc/sites?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=12/20/2019' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20191220 16:16:14.214" level="INFO">GET Request using : uri=SiteWebService.svc/sites?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=12/20/2019, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20191220 16:16:14.819" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /SiteWebService.svc/sites?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=12/20/2019 HTTP/1.1" 200 738</msg>
<msg timestamp="20191220 16:16:14.820" level="DEBUG">GET Response : status=200, reason=OK
[{"Address":"","ArrivalGeoCodeType":"Circle","ArrivalPolygonPoints":"","ArrivalRadius":500,"City":"Minnetonka","Country":"USA","CreateDate":"\/Date(1576880156674)\/","DeliveryWindows":[],"DepartureGeoCodeType":"Circle","DeparturePolygonPoints":"","DepartureRadius":500,"DepartureSameAsArrival":false,"Latitude":0,"Longitude":0,"Measure":"Feet","ModifiedBy":"admin","ModifiedDate":"\/Date(1576880157941)\/","Name":"Test SiteModified","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PostalCode":"","ResourceGroupIDs":"","SiteID":"TestSite","SiteType":"Commerce","StateName":"Minnesota","TimeZone":"Central","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""}]</msg>
<msg timestamp="20191220 16:16:14.820" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191220 16:16:14.821" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191220 16:16:14.213" endtime="20191220 16:16:14.821"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191220 16:16:14.822" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191220 16:16:14.822" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191220 16:16:14.822" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191220 16:16:14.821" endtime="20191220 16:16:14.822"></status>
</kw>
<msg timestamp="20191220 16:16:14.823" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191220 16:16:14.205" endtime="20191220 16:16:14.823"></status>
</kw>
<doc>Get Sites with basic parameters using a raw URI string</doc>
<tags>
<tag>awsxrssiterestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20191220 16:16:13.554" endtime="20191220 16:16:14.824" critical="yes"></status>
</test>
<test id="s1-s1-s1-t7" name="Validate AWS XRS Delete Site REST Web Services Returns 200 OK">
<kw name="Delete Sites By Site Id" library="Site">
<doc>Delete Site by Site ID.</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_SITE.SiteID}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191220 16:16:14.827" level="TRACE">Arguments: [ ${site_id}='TestSite' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Site}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_SITE}/${site_id}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20191220 16:16:14.828" level="TRACE">Arguments: [ 'SiteWebService.svc/sites/TestSite' ]</msg>
<msg timestamp="20191220 16:16:14.828" level="TRACE">Return: 'SiteWebService.svc/sites/TestSite'</msg>
<msg timestamp="20191220 16:16:14.829" level="INFO">${uri} = SiteWebService.svc/sites/TestSite</msg>
<status status="PASS" starttime="20191220 16:16:14.828" endtime="20191220 16:16:14.829"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191220 16:16:14.829" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'SiteWebService.svc/sites/TestSite' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20191220 16:16:14.830" level="INFO">DELETE Request using : uri=SiteWebService.svc/sites/TestSite, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20191220 16:16:15.541" level="DEBUG">https://d3ws.xataxrs.com:443 "DELETE /SiteWebService.svc/sites/TestSite HTTP/1.1" 200 175</msg>
<msg timestamp="20191220 16:16:15.541" level="DEBUG">DELETE Response : status=200, reason=OK
{"Caption":"Deleted.","Code":"200","Description":"Geographic Site edited successfully.","Id":"TestSite","ObjectName":"GeographicSite","SID":0,"Title":"GeographicSiteDeleted."}</msg>
<msg timestamp="20191220 16:16:15.541" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191220 16:16:15.541" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191220 16:16:14.829" endtime="20191220 16:16:15.541"></status>
</kw>
<msg timestamp="20191220 16:16:15.542" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191220 16:16:15.542" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191220 16:16:14.826" endtime="20191220 16:16:15.542"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191220 16:16:15.543" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191220 16:16:15.543" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191220 16:16:15.543" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191220 16:16:15.542" endtime="20191220 16:16:15.543"></status>
</kw>
<doc>Verifies that created Site is deleted</doc>
<tags>
<tag>awsxrssiterestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20191220 16:16:14.825" endtime="20191220 16:16:15.543" critical="yes"></status>
</test>
<test id="s1-s1-s1-t8" name="Validate AWS XRS Get Sites REST Web Services For All Sites Returns 200 OK">
<kw name="Get All Sites" library="Site">
<doc>Get attributes for all sites.</doc>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191220 16:16:15.547" level="TRACE">Arguments: [  ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Site}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_SITE}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20191220 16:16:15.547" level="TRACE">Arguments: [ 'SiteWebService.svc/sites' ]</msg>
<msg timestamp="20191220 16:16:15.547" level="TRACE">Return: 'SiteWebService.svc/sites'</msg>
<msg timestamp="20191220 16:16:15.547" level="INFO">${uri} = SiteWebService.svc/sites</msg>
<status status="PASS" starttime="20191220 16:16:15.547" endtime="20191220 16:16:15.547"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191220 16:16:15.548" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'SiteWebService.svc/sites' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20191220 16:16:15.548" level="INFO">GET Request using : uri=SiteWebService.svc/sites, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20191220 16:16:16.151" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /SiteWebService.svc/sites HTTP/1.1" 200 2274</msg>
<msg timestamp="20191220 16:16:16.152" level="DEBUG">GET Response : status=200, reason=OK
[{"Address":"8 8th Ave N","ArrivalGeoCodeType":"Circle","ArrivalPolygonPoints":"","ArrivalRadius":500,"City":"Hopkins","Country":"USA","CreateDate":"\/Date(1549387274381)\/","DeliveryWindows":[],"DepartureGeoCodeType":"Circle","DeparturePolygonPoints":"","DepartureRadius":500,"DepartureSameAsArrival":true,"Latitude":44.92466,"Longitude":-93.41031,"Measure":"Feet","ModifiedBy":"","ModifiedDate":"\/Date(1549387274381)\/","Name":"LTD Brewing","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PostalCode":"55343","ResourceGroupIDs":"","SiteID":"LTD","SiteType":"Commerce","StateName":"Minnesota","TimeZone":"Central","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""},{"Address":"14625 Excelsior Blvd","ArrivalGeoCodeType":"Circle","ArrivalPolygonPoints":"","ArrivalRadius":500,"City":"Minnetonka","Country":"USA","CreateDate":"\/Date(1549387220792)\/","DeliveryWindows":[],"DepartureGeoCodeType":"Circle","DeparturePolygonPoints":"","DepartureRadius":500,"DepartureSameAsArrival":true,"Latitude":44.90355,"Longitude":-93.46639,"Measure":"Feet","ModifiedBy":"","ModifiedDate":"\/Date(1549387220792)\/","Name":"Unmapped","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PostalCode":"55345","ResourceGroupIDs":"","SiteID":"Unmapped","SiteType":"Commerce","StateName":"Minnesota","TimeZone":"Central","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""},{"Address":"9 W Wisconsin St","ArrivalGeoCodeType":"Circle","ArrivalPolygonPoints":"","ArrivalRadius":500,"City":"Grand Marais","Country":"USA","CreateDate":"\/Date(1537904719607)\/","DeliveryWindows":[],"DepartureGeoCodeType":"Circle","DeparturePolygonPoints":"","DepartureRadius":500,"DepartureSameAsArrival":true,"Latitude":47.74933,"Longitude":-90.33337,"Measure":"Feet","ModifiedBy":"","ModifiedDate":"\/Date(1537904741149)\/","Name":"Sven &amp; Ole's","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PostalCode":"55604","ResourceGroupIDs":"","SiteID":"SvenOle","SiteType":"Commerce","StateName":"Minnesota","TimeZone":"Central","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""}]</msg>
<msg timestamp="20191220 16:16:16.152" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191220 16:16:16.153" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191220 16:16:15.547" endtime="20191220 16:16:16.153"></status>
</kw>
<msg timestamp="20191220 16:16:16.153" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191220 16:16:16.153" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191220 16:16:15.546" endtime="20191220 16:16:16.153"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191220 16:16:16.155" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191220 16:16:16.155" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191220 16:16:16.155" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191220 16:16:16.154" endtime="20191220 16:16:16.155"></status>
</kw>
<doc>Gets all the Sites</doc>
<tags>
<tag>awsxrssiterestwebservicevalidation</tag>
<tag>xrsawsperftest</tag>
</tags>
<status status="PASS" starttime="20191220 16:16:15.545" endtime="20191220 16:16:16.157" critical="yes"></status>
</test>
<test id="s1-s1-s1-t9" name="Validate AWS XRS Delete Sites REST Web Services Returns Code 401">
<kw name="Delete Sites By Site Id" library="Site">
<doc>Delete Site by Site ID.</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_SITE_SID}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191220 16:16:16.163" level="TRACE">Arguments: [ ${site_id}='TestSite' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Site}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_SITE}/${site_id}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20191220 16:16:16.164" level="TRACE">Arguments: [ 'SiteWebService.svc/sites/TestSite' ]</msg>
<msg timestamp="20191220 16:16:16.165" level="TRACE">Return: 'SiteWebService.svc/sites/TestSite'</msg>
<msg timestamp="20191220 16:16:16.165" level="INFO">${uri} = SiteWebService.svc/sites/TestSite</msg>
<status status="PASS" starttime="20191220 16:16:16.164" endtime="20191220 16:16:16.165"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191220 16:16:16.166" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'SiteWebService.svc/sites/TestSite' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20191220 16:16:16.166" level="INFO">DELETE Request using : uri=SiteWebService.svc/sites/TestSite, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20191220 16:16:16.599" level="DEBUG">https://d3ws.xataxrs.com:443 "DELETE /SiteWebService.svc/sites/TestSite HTTP/1.1" 200 199</msg>
<msg timestamp="20191220 16:16:16.600" level="DEBUG">DELETE Response : status=200, reason=OK
{"Caption":"Error","Code":"401","Description":"You are not authorized.  Please contact your system administrator.","Id":"TestSite","ObjectName":"Unauthorized User","SID":0,"Title":"UnauthorizedUser"}</msg>
<msg timestamp="20191220 16:16:16.600" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191220 16:16:16.601" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191220 16:16:16.165" endtime="20191220 16:16:16.601"></status>
</kw>
<msg timestamp="20191220 16:16:16.601" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191220 16:16:16.601" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191220 16:16:16.162" endtime="20191220 16:16:16.601"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>Site ${XRS_WEB_SERVICES_TEST_SITE_SID} doesn't exist.</arg>
</arguments>
<assign>
<var>${expected_error_message}</var>
</assign>
<msg timestamp="20191220 16:16:16.603" level="TRACE">Arguments: [ "Site TestSite doesn't exist." ]</msg>
<msg timestamp="20191220 16:16:16.603" level="TRACE">Return: "Site TestSite doesn't exist."</msg>
<msg timestamp="20191220 16:16:16.603" level="INFO">${expected_error_message} = Site TestSite doesn't exist.</msg>
<status status="PASS" starttime="20191220 16:16:16.603" endtime="20191220 16:16:16.603"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20191220 16:16:16.605" level="TRACE">Arguments: [ b'{"Caption":"Error","Code":"401","Description":"You are not authorized.  Please contact your system administrator.","Id":"TestSite","ObjectName":"Unauthorized User","SID":0,"Title":"UnauthorizedUser"}' ]</msg>
<msg timestamp="20191220 16:16:16.605" level="INFO">To JSON using : content={"Caption":"Error","Code":"401","Description":"You are not authorized.  Please contact your system administrator.","Id":"TestSite","ObjectName":"Unauthorized User","SID":0,"Title":"UnauthorizedUser"} </msg>
<msg timestamp="20191220 16:16:16.605" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20191220 16:16:16.605" level="TRACE">Return: {'Caption': 'Error',
 'Code': '401',
 'Description': 'You are not authorized.  Please contact your system administrator.',
 'Id': 'TestSite',
 'ObjectName': 'Unauthorized User',
 'SID': 0,
 'Title': 'UnauthorizedUser'}</msg>
<msg timestamp="20191220 16:16:16.606" level="INFO">${json_response} = {'Caption': 'Error', 'Code': '401', 'Description': 'You are not authorized.  Please contact your system administrator.', 'Id': 'TestSite', 'ObjectName': 'Unauthorized User', 'SID': 0, 'Title': 'Unauth...</msg>
<status status="PASS" starttime="20191220 16:16:16.604" endtime="20191220 16:16:16.606"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_response}[Code]</arg>
<arg>401</arg>
</arguments>
<msg timestamp="20191220 16:16:16.607" level="TRACE">Arguments: [ '401' | '401' ]</msg>
<msg timestamp="20191220 16:16:16.607" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191220 16:16:16.608" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191220 16:16:16.607" endtime="20191220 16:16:16.608"></status>
</kw>
<doc>Attempts to delete a previously deleted Site.</doc>
<tags>
<tag>awsxrssiterestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20191220 16:16:16.160" endtime="20191220 16:16:16.609" critical="yes"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary" type="teardown">
<doc>Removes all the session objects</doc>
<msg timestamp="20191220 16:16:16.614" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20191220 16:16:16.614" level="INFO">Delete All Sessions</msg>
<msg timestamp="20191220 16:16:16.614" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191220 16:16:16.614" endtime="20191220 16:16:16.615"></status>
</kw>
<doc>Fundamental suite to test XRS AWS Site Entity Management Web Services</doc>
<status status="PASS" starttime="20191220 16:16:09.213" endtime="20191220 16:16:16.615"></status>
</suite>
<status status="PASS" starttime="20191220 16:16:09.211" endtime="20191220 16:16:16.621"></status>
</suite>
<status status="PASS" starttime="20191220 16:16:09.180" endtime="20191220 16:16:16.626"></status>
</suite>
<statistics>
<total>
<stat pass="9" fail="0">Critical Tests</stat>
<stat pass="9" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="9" fail="0">awsxrssiterestwebservicevalidation</stat>
<stat pass="1" fail="0">xrsawsperftest</stat>
</tag>
<suite>
<stat pass="9" fail="0" id="s1" name="Tests">Tests</stat>
<stat pass="9" fail="0" id="s1-s1" name="AWS XRS WebServicesTests">Tests.AWS XRS WebServicesTests</stat>
<stat pass="9" fail="0" id="s1-s1-s1" name="ValidateAWSXRSSiteWebService">Tests.AWS XRS WebServicesTests.ValidateAWSXRSSiteWebService</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>

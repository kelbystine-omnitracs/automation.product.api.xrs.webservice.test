<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on win32)" generated="20191206 16:20:13.184" rpa="false">
<suite id="s1" name="AWS XRS WebServicesTests" source="C:\Users\kstine\git\aws-api-gateway-tests\Tests\AWS_XRS_WebServicesTests">
<suite id="s1-s1" name="ValidateAWSXRSWebServices" source="C:\Users\kstine\git\aws-api-gateway-tests\Tests\AWS_XRS_WebServicesTests\00__ValidateAWSXRSWebServices.robot">
<kw name="Create AWS XRS Web Services Session With No Authorization" library="XRSCommonWebService" type="setup">
<doc>Create a session with aws xrs web services without authorization</doc>
<msg timestamp="20191206 16:20:13.382" level="TRACE">Arguments: [  ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${XRS_AWS_WEBSERVICES_URL}[${XRS_HOST_ENVIRONMENT}]</arg>
<arg>verify=True</arg>
</arguments>
<msg timestamp="20191206 16:20:13.383" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'https://d3ws.xataxrs.com' | verify=True ]</msg>
<msg timestamp="20191206 16:20:13.383" level="INFO">Creating Session using : alias=xrs_web_service_session, url=https://d3ws.xataxrs.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<msg timestamp="20191206 16:20:13.383" level="DEBUG">Creating session: xrs_web_service_session</msg>
<msg timestamp="20191206 16:20:13.383" level="DEBUG">Argument types are:
&lt;class 'bool'&gt;</msg>
<msg timestamp="20191206 16:20:13.383" level="TRACE">Return: &lt;requests.sessions.Session object at 0x0000024290FD4C88&gt;</msg>
<status status="PASS" starttime="20191206 16:20:13.382" endtime="20191206 16:20:13.383"></status>
</kw>
<msg timestamp="20191206 16:20:13.383" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:13.382" endtime="20191206 16:20:13.383"></status>
</kw>
<test id="s1-s1-t1" name="Validate XRS AWS Webservices">
<kw name="Verify 200 OK Response From XRS WebServices">
<doc>Validates a 200 response from each xrs webservice</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI}</arg>
</arguments>
<msg timestamp="20191206 16:20:13.384" level="TRACE">Arguments: [ ${xrs_web_service_dict}={'Device': 'DeviceWebService.svc',
 'Driver': 'DriverWebService.svc',
 'Organization': 'OrganizationWebService.svc',
 'Resource_Group': 'ResourceGroupWebService.svc',
 'Site': 'SiteWebService.svc',
 'Trailer': 'TrailerWebService.svc',
 'User': 'UserWebService.svc',
 'Vehicle': 'VehicleWebService.svc'} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>base_uri</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20191206 16:20:13.384" level="TRACE">Arguments: [ 'base_uri' ]</msg>
<msg timestamp="20191206 16:20:13.385" level="TRACE">Return: 'base_uri'</msg>
<msg timestamp="20191206 16:20:13.385" level="INFO">${base_uri} = base_uri</msg>
<status status="PASS" starttime="20191206 16:20:13.384" endtime="20191206 16:20:13.385"></status>
</kw>
<kw name="${e} IN [ @{xrs_web_service_dict} ]" type="for">
<kw name="${e} = Device" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:13.385" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DeviceWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:13.385" level="INFO">GET Request using : uri=DeviceWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:13.388" level="DEBUG">Starting new HTTPS connection (1): d3ws.xataxrs.com:443</msg>
<msg timestamp="20191206 16:20:14.272" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /DeviceWebService.svc HTTP/1.1" 200 1362</msg>
<msg timestamp="20191206 16:20:14.273" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DeviceWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;DeviceWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;DeviceWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DeviceWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DeviceWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DeviceWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DeviceWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;DeviceWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;DeviceWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;DeviceWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;DeviceWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:14.274" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:14.274" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:13.385" endtime="20191206 16:20:14.274"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:14.275" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:14.275" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:14.275" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:14.274" endtime="20191206 16:20:14.275"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:13.385" endtime="20191206 16:20:14.275"></status>
</kw>
<kw name="${e} = Driver" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:14.276" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DriverWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:14.276" level="INFO">GET Request using : uri=DriverWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:14.564" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /DriverWebService.svc HTTP/1.1" 200 1364</msg>
<msg timestamp="20191206 16:20:14.564" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DriverWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;DriverWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;DriverWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DriverWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DriverWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DriverWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DriverWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;DriverWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;DriverWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;DriverWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;DriverWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:14.565" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:14.565" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:14.275" endtime="20191206 16:20:14.565"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:14.566" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:14.566" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:14.566" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:14.565" endtime="20191206 16:20:14.566"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:14.275" endtime="20191206 16:20:14.566"></status>
</kw>
<kw name="${e} = Organization" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:14.567" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'OrganizationWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:14.567" level="INFO">GET Request using : uri=OrganizationWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:14.842" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /OrganizationWebService.svc HTTP/1.1" 200 1369</msg>
<msg timestamp="20191206 16:20:14.844" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/OrganizationWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;OrganizationWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;OrganizationWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/OrganizationWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/OrganizationWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/OrganizationWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/OrganizationWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;OrganizationWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;OrganizationWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;OrganizationWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;OrganizationWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:14.845" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:14.845" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:14.566" endtime="20191206 16:20:14.845"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:14.846" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:14.847" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:14.847" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:14.846" endtime="20191206 16:20:14.847"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:14.566" endtime="20191206 16:20:14.847"></status>
</kw>
<kw name="${e} = Resource_Group" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:14.849" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'ResourceGroupWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:14.850" level="INFO">GET Request using : uri=ResourceGroupWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:15.161" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /ResourceGroupWebService.svc HTTP/1.1" 200 1370</msg>
<msg timestamp="20191206 16:20:15.162" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/ResourceGroupWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;ResourceGroupWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;ResourceGroupWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/ResourceGroupWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/ResourceGroupWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/ResourceGroupWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/ResourceGroupWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;ResourceGroupWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;ResourceGroupWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;ResourceGroupWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;ResourceGroupWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:15.162" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:15.162" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:14.848" endtime="20191206 16:20:15.162"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:15.163" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:15.163" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:15.164" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:15.163" endtime="20191206 16:20:15.164"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:14.847" endtime="20191206 16:20:15.164"></status>
</kw>
<kw name="${e} = Site" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:15.165" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'SiteWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:15.165" level="INFO">GET Request using : uri=SiteWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:15.495" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /SiteWebService.svc HTTP/1.1" 200 1361</msg>
<msg timestamp="20191206 16:20:15.496" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/SiteWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;SiteWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;SiteWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/SiteWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/SiteWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/SiteWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/SiteWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;SiteWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;SiteWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;SiteWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;SiteWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:15.496" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:15.496" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:15.164" endtime="20191206 16:20:15.496"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:15.497" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:15.497" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:15.497" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:15.496" endtime="20191206 16:20:15.497"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:15.164" endtime="20191206 16:20:15.497"></status>
</kw>
<kw name="${e} = Trailer" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:15.497" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'TrailerWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:15.498" level="INFO">GET Request using : uri=TrailerWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:15.774" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /TrailerWebService.svc HTTP/1.1" 200 1363</msg>
<msg timestamp="20191206 16:20:15.775" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/TrailerWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;TrailerWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;TrailerWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/TrailerWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/TrailerWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/TrailerWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/TrailerWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;TrailerWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;TrailerWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;TrailerWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;TrailerWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:15.776" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:15.776" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:15.497" endtime="20191206 16:20:15.776"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:15.777" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:15.777" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:15.777" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:15.776" endtime="20191206 16:20:15.777"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:15.497" endtime="20191206 16:20:15.778"></status>
</kw>
<kw name="${e} = User" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:15.778" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'UserWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:15.779" level="INFO">GET Request using : uri=UserWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:16.057" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /UserWebService.svc HTTP/1.1" 200 1367</msg>
<msg timestamp="20191206 16:20:16.057" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/UserWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;UserWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;UserWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/UserWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/UserWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/UserWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/UserWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;UserWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;UserWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;UserWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;UserWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:16.057" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:16.058" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:15.778" endtime="20191206 16:20:16.058"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:16.058" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:16.058" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:16.058" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:16.058" endtime="20191206 16:20:16.058"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:15.778" endtime="20191206 16:20:16.058"></status>
</kw>
<kw name="${e} = Vehicle" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:16.059" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'VehicleWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:16.059" level="INFO">GET Request using : uri=VehicleWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:16.325" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /VehicleWebService.svc HTTP/1.1" 200 1365</msg>
<msg timestamp="20191206 16:20:16.325" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/VehicleWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;VehicleWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;VehicleWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/VehicleWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/VehicleWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/VehicleWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/VehicleWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;VehicleWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;VehicleWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;VehicleWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;VehicleWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:16.325" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:16.325" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:16.058" endtime="20191206 16:20:16.325"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:16.326" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:16.326" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:16.326" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:16.326" endtime="20191206 16:20:16.326"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:16.058" endtime="20191206 16:20:16.326"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:13.385" endtime="20191206 16:20:16.326"></status>
</kw>
<msg timestamp="20191206 16:20:16.326" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:13.384" endtime="20191206 16:20:16.326"></status>
</kw>
<kw name="Verify 200 OK Response From XRS WebServices">
<doc>Validates a 200 response from each xrs webservice</doc>
<arguments>
<arg>${XRS_Form_Messaging_Base_URI}</arg>
</arguments>
<msg timestamp="20191206 16:20:16.327" level="TRACE">Arguments: [ ${xrs_web_service_dict}={'Form_Template_Category': 'FormTemplateCategoryWebService.svc',
 'Form_Template_Content': 'FormTemplateContentWebService.svc',
 'Form_Template_Header': 'FormTemplateHeaderWebService.svc',
 'Message': 'MessageWebService.svc'} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>base_uri</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20191206 16:20:16.327" level="TRACE">Arguments: [ 'base_uri' ]</msg>
<msg timestamp="20191206 16:20:16.327" level="TRACE">Return: 'base_uri'</msg>
<msg timestamp="20191206 16:20:16.327" level="INFO">${base_uri} = base_uri</msg>
<status status="PASS" starttime="20191206 16:20:16.327" endtime="20191206 16:20:16.327"></status>
</kw>
<kw name="${e} IN [ @{xrs_web_service_dict} ]" type="for">
<kw name="${e} = Form_Template_Category" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:16.328" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'FormTemplateCategoryWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:16.328" level="INFO">GET Request using : uri=FormTemplateCategoryWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:16.625" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /FormTemplateCategoryWebService.svc HTTP/1.1" 200 1379</msg>
<msg timestamp="20191206 16:20:16.625" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/FormTemplateCategoryWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;FormTemplateCategoryWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;FormTemplateCategoryWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/FormTemplateCategoryWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/FormTemplateCategoryWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/FormTemplateCategoryWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/FormTemplateCategoryWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;FormTemplateCategoryWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;FormTemplateCategoryWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;FormTemplateCategoryWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;FormTemplateCategoryWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:16.625" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:16.626" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:16.328" endtime="20191206 16:20:16.626"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:16.626" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:16.627" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:16.627" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:16.626" endtime="20191206 16:20:16.627"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:16.328" endtime="20191206 16:20:16.627"></status>
</kw>
<kw name="${e} = Form_Template_Content" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:16.627" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'FormTemplateContentWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:16.628" level="INFO">GET Request using : uri=FormTemplateContentWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:16.909" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /FormTemplateContentWebService.svc HTTP/1.1" 200 1375</msg>
<msg timestamp="20191206 16:20:16.910" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/FormTemplateContentWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;FormTemplateContentWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;FormTemplateContentWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/FormTemplateContentWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/FormTemplateContentWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/FormTemplateContentWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/FormTemplateContentWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;FormTemplateContentWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;FormTemplateContentWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;FormTemplateContentWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;FormTemplateContentWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:16.910" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:16.910" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:16.627" endtime="20191206 16:20:16.910"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:16.910" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:16.910" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:16.910" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:16.910" endtime="20191206 16:20:16.910"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:16.627" endtime="20191206 16:20:16.910"></status>
</kw>
<kw name="${e} = Form_Template_Header" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:16.911" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'FormTemplateHeaderWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:16.911" level="INFO">GET Request using : uri=FormTemplateHeaderWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:17.181" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /FormTemplateHeaderWebService.svc HTTP/1.1" 200 1378</msg>
<msg timestamp="20191206 16:20:17.184" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/FormTemplateHeaderWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;FormTemplateHeaderWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;FormTemplateHeaderWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/FormTemplateHeaderWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/FormTemplateHeaderWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/FormTemplateHeaderWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/FormTemplateHeaderWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;FormTemplateHeaderWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;FormTemplateHeaderWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;FormTemplateHeaderWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;FormTemplateHeaderWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:17.184" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:17.185" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:16.911" endtime="20191206 16:20:17.185"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:17.186" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:17.187" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:17.188" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:17.185" endtime="20191206 16:20:17.188"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:16.910" endtime="20191206 16:20:17.188"></status>
</kw>
<kw name="${e} = Message" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:17.191" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'MessageWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:17.192" level="INFO">GET Request using : uri=MessageWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:17.480" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /MessageWebService.svc HTTP/1.1" 200 1364</msg>
<msg timestamp="20191206 16:20:17.481" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/MessageWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;MessageWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;MessageWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/MessageWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/MessageWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/MessageWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/MessageWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;MessageWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;MessageWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;MessageWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;MessageWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:17.481" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:17.481" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:17.190" endtime="20191206 16:20:17.481"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:17.482" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:17.482" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:17.482" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:17.481" endtime="20191206 16:20:17.482"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:17.189" endtime="20191206 16:20:17.482"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:16.328" endtime="20191206 16:20:17.482"></status>
</kw>
<msg timestamp="20191206 16:20:17.482" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:16.327" endtime="20191206 16:20:17.482"></status>
</kw>
<kw name="Verify 200 OK Response From XRS WebServices">
<doc>Validates a 200 response from each xrs webservice</doc>
<arguments>
<arg>${XRS_Performance_Base_URI}</arg>
</arguments>
<msg timestamp="20191206 16:20:17.483" level="TRACE">Arguments: [ ${xrs_web_service_dict}={'Black_Box': 'BlackBoxWebService.svc',
 'Critical_Events': 'CriticalEventWebService.svc',
 'Daily_Detail': 'DailyDetailWebService.svc',
 'Fault_Code': 'FaultCodeWebService.svc',
 'Operation': 'OperationWebService.svc'} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>base_uri</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20191206 16:20:17.483" level="TRACE">Arguments: [ 'base_uri' ]</msg>
<msg timestamp="20191206 16:20:17.483" level="TRACE">Return: 'base_uri'</msg>
<msg timestamp="20191206 16:20:17.483" level="INFO">${base_uri} = base_uri</msg>
<status status="PASS" starttime="20191206 16:20:17.483" endtime="20191206 16:20:17.483"></status>
</kw>
<kw name="${e} IN [ @{xrs_web_service_dict} ]" type="for">
<kw name="${e} = Black_Box" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:17.484" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'BlackBoxWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:17.484" level="INFO">GET Request using : uri=BlackBoxWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:17.758" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /BlackBoxWebService.svc HTTP/1.1" 200 1366</msg>
<msg timestamp="20191206 16:20:17.760" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/BlackBoxWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;BlackBoxWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;BlackBoxWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/BlackBoxWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/BlackBoxWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/BlackBoxWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/BlackBoxWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;BlackBoxWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;BlackBoxWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;BlackBoxWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;BlackBoxWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:17.760" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:17.760" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:17.484" endtime="20191206 16:20:17.761"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:17.762" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:17.762" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:17.763" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:17.761" endtime="20191206 16:20:17.763"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:17.484" endtime="20191206 16:20:17.763"></status>
</kw>
<kw name="${e} = Critical_Events" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:17.765" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'CriticalEventWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:17.766" level="INFO">GET Request using : uri=CriticalEventWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:18.077" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /CriticalEventWebService.svc HTTP/1.1" 200 1372</msg>
<msg timestamp="20191206 16:20:18.079" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/CriticalEventWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;CriticalEventWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;CriticalEventWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/CriticalEventWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/CriticalEventWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/CriticalEventWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/CriticalEventWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;CriticalEventWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;CriticalEventWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;CriticalEventWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;CriticalEventWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:18.080" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:18.080" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:17.764" endtime="20191206 16:20:18.081"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:18.082" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:18.083" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:18.083" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:18.081" endtime="20191206 16:20:18.083"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:17.763" endtime="20191206 16:20:18.083"></status>
</kw>
<kw name="${e} = Daily_Detail" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:18.085" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DailyDetailWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:18.086" level="INFO">GET Request using : uri=DailyDetailWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:18.375" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /DailyDetailWebService.svc HTTP/1.1" 200 1368</msg>
<msg timestamp="20191206 16:20:18.377" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DailyDetailWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;DailyDetailWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;DailyDetailWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DailyDetailWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DailyDetailWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DailyDetailWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DailyDetailWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;DailyDetailWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;DailyDetailWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;DailyDetailWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;DailyDetailWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:18.377" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:18.377" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:18.084" endtime="20191206 16:20:18.377"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:18.378" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:18.379" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:18.379" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:18.378" endtime="20191206 16:20:18.379"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:18.084" endtime="20191206 16:20:18.379"></status>
</kw>
<kw name="${e} = Fault_Code" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:18.380" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'FaultCodeWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:18.381" level="INFO">GET Request using : uri=FaultCodeWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:18.669" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /FaultCodeWebService.svc HTTP/1.1" 200 1366</msg>
<msg timestamp="20191206 16:20:18.671" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/FaultCodeWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;FaultCodeWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;FaultCodeWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/FaultCodeWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/FaultCodeWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/FaultCodeWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/FaultCodeWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;FaultCodeWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;FaultCodeWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;FaultCodeWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;FaultCodeWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:18.672" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:18.672" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:18.380" endtime="20191206 16:20:18.673"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:18.675" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:18.675" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:18.676" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:18.673" endtime="20191206 16:20:18.676"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:18.379" endtime="20191206 16:20:18.676"></status>
</kw>
<kw name="${e} = Operation" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:18.678" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'OperationWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:18.679" level="INFO">GET Request using : uri=OperationWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:18.949" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /OperationWebService.svc HTTP/1.1" 200 1362</msg>
<msg timestamp="20191206 16:20:18.950" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/OperationWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;OperationWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;OperationWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/OperationWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/OperationWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/OperationWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/OperationWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;OperationWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;OperationWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;OperationWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;OperationWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:18.951" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:18.951" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:18.677" endtime="20191206 16:20:18.951"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:18.952" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:18.952" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:18.953" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:18.951" endtime="20191206 16:20:18.953"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:18.677" endtime="20191206 16:20:18.953"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:17.483" endtime="20191206 16:20:18.953"></status>
</kw>
<msg timestamp="20191206 16:20:18.953" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:17.483" endtime="20191206 16:20:18.953"></status>
</kw>
<kw name="Verify 200 OK Response From XRS WebServices">
<doc>Validates a 200 response from each xrs webservice</doc>
<arguments>
<arg>${XRS_Routing_Dispatch_Base_URI}</arg>
</arguments>
<msg timestamp="20191206 16:20:18.956" level="TRACE">Arguments: [ ${xrs_web_service_dict}={'Delay_Detail_Report': 'DelayDetailReportWebService.svc',
 'Delay_Summary_Report': 'DelaySummaryReportWebService.svc',
 'Out_Of_Route': 'OutOfRouteWebService.svc',
 'Plan_Vs_Actual': 'PlanVsActualWebService.svc',
 'Route': 'RouteWebService.svc',
 'Route_Status': 'RouteStatusWebService.svc',
 'Site_Activity': 'SiteActivityWebService.svc',
 'Trip': 'TripWebService.svc'} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>base_uri</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20191206 16:20:18.958" level="TRACE">Arguments: [ 'base_uri' ]</msg>
<msg timestamp="20191206 16:20:18.958" level="TRACE">Return: 'base_uri'</msg>
<msg timestamp="20191206 16:20:18.958" level="INFO">${base_uri} = base_uri</msg>
<status status="PASS" starttime="20191206 16:20:18.957" endtime="20191206 16:20:18.958"></status>
</kw>
<kw name="${e} IN [ @{xrs_web_service_dict} ]" type="for">
<kw name="${e} = Delay_Detail_Report" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:18.961" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DelayDetailReportWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:18.961" level="INFO">GET Request using : uri=DelayDetailReportWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:19.240" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /DelayDetailReportWebService.svc HTTP/1.1" 200 1375</msg>
<msg timestamp="20191206 16:20:19.241" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DelayDetailReportWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;DelayDetailReportWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;DelayDetailReportWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DelayDetailReportWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DelayDetailReportWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DelayDetailReportWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DelayDetailReportWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;DelayDetailWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;DelayDetailWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;DelayDetailWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;DelayDetailWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:19.242" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:19.242" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:18.959" endtime="20191206 16:20:19.242"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:19.243" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:19.244" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:19.244" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:19.243" endtime="20191206 16:20:19.245"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:18.959" endtime="20191206 16:20:19.245"></status>
</kw>
<kw name="${e} = Delay_Summary_Report" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:19.246" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DelaySummaryReportWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:19.247" level="INFO">GET Request using : uri=DelaySummaryReportWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:19.530" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /DelaySummaryReportWebService.svc HTTP/1.1" 200 1377</msg>
<msg timestamp="20191206 16:20:19.532" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DelaySummaryReportWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;DelaySummaryReportWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;DelaySummaryReportWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DelaySummaryReportWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DelaySummaryReportWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DelaySummaryReportWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DelaySummaryReportWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;DelaySummaryWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;DelaySummaryWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;DelaySummaryWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;DelaySummaryWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:19.532" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:19.533" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:19.245" endtime="20191206 16:20:19.533"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:19.535" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:19.535" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:19.535" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:19.534" endtime="20191206 16:20:19.535"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:19.245" endtime="20191206 16:20:19.535"></status>
</kw>
<kw name="${e} = Out_Of_Route" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:19.536" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'OutOfRouteWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:19.537" level="INFO">GET Request using : uri=OutOfRouteWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:19.856" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /OutOfRouteWebService.svc HTTP/1.1" 200 1368</msg>
<msg timestamp="20191206 16:20:19.858" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/OutOfRouteWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;OutOfRouteWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;OutOfRouteWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/OutOfRouteWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/OutOfRouteWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/OutOfRouteWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/OutOfRouteWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;OutOfRouteWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;OutOfRouteWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;OutOfRouteWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;OutOfRouteWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:19.859" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:19.859" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:19.536" endtime="20191206 16:20:19.860"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:19.862" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:19.863" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:19.863" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:19.860" endtime="20191206 16:20:19.863"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:19.536" endtime="20191206 16:20:19.864"></status>
</kw>
<kw name="${e} = Plan_Vs_Actual" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:19.865" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'PlanVsActualWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:19.866" level="INFO">GET Request using : uri=PlanVsActualWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:20.210" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /PlanVsActualWebService.svc HTTP/1.1" 200 1387</msg>
<msg timestamp="20191206 16:20:20.211" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/PlanVsActualWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;PlanVsActualWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;PlanVsActualWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/PlanVsActualWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/PlanVsActualWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/PlanVsActualWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/PlanVsActualWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;PlanVsActualVsLearnedStandardsWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;PlanVsActualVsLearnedStandardsWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;PlanVsActualVsLearnedStandardsWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;PlanVsActualVsLearnedStandardsWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:20.212" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:20.212" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:19.865" endtime="20191206 16:20:20.212"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:20.214" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:20.214" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:20.214" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:20.213" endtime="20191206 16:20:20.215"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:19.864" endtime="20191206 16:20:20.215"></status>
</kw>
<kw name="${e} = Route" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:20.216" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'RouteWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:20.217" level="INFO">GET Request using : uri=RouteWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:20.491" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /RouteWebService.svc HTTP/1.1" 200 1362</msg>
<msg timestamp="20191206 16:20:20.493" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/RouteWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;RouteWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;RouteWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/RouteWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/RouteWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/RouteWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/RouteWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;RouteWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;RouteWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;RouteWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;RouteWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:20.493" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:20.494" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:20.215" endtime="20191206 16:20:20.494"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:20.495" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:20.496" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:20.496" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:20.495" endtime="20191206 16:20:20.497"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:20.215" endtime="20191206 16:20:20.497"></status>
</kw>
<kw name="${e} = Route_Status" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:20.499" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'RouteStatusWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:20.500" level="INFO">GET Request using : uri=RouteStatusWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:20.791" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /RouteStatusWebService.svc HTTP/1.1" 200 1368</msg>
<msg timestamp="20191206 16:20:20.793" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/RouteStatusWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;RouteStatusWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;RouteStatusWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/RouteStatusWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/RouteStatusWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/RouteStatusWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/RouteStatusWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;RouteStatusWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;RouteStatusWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;RouteStatusWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;RouteStatusWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:20.793" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:20.794" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:20.498" endtime="20191206 16:20:20.794"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:20.795" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:20.796" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:20.796" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:20.794" endtime="20191206 16:20:20.796"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:20.497" endtime="20191206 16:20:20.796"></status>
</kw>
<kw name="${e} = Site_Activity" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:20.799" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'SiteActivityWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:20.800" level="INFO">GET Request using : uri=SiteActivityWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:21.086" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /SiteActivityWebService.svc HTTP/1.1" 200 1369</msg>
<msg timestamp="20191206 16:20:21.087" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/SiteActivityWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;SiteActivityWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;SiteActivityWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/SiteActivityWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/SiteActivityWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/SiteActivityWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/SiteActivityWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;SiteActivityWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;SiteActivityWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;SiteActivityWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;SiteActivityWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:21.088" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:21.088" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:20.797" endtime="20191206 16:20:21.088"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:21.089" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:21.089" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:21.090" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:21.089" endtime="20191206 16:20:21.090"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:20.797" endtime="20191206 16:20:21.090"></status>
</kw>
<kw name="${e} = Trip" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:21.091" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'TripWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:21.091" level="INFO">GET Request using : uri=TripWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:21.359" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /TripWebService.svc HTTP/1.1" 200 1360</msg>
<msg timestamp="20191206 16:20:21.360" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/TripWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;TripWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;TripWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/TripWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/TripWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/TripWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/TripWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;TripWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;TripWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;TripWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;TripWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:21.361" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:21.361" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:21.090" endtime="20191206 16:20:21.361"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:21.362" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:21.363" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:21.363" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:21.362" endtime="20191206 16:20:21.363"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:21.090" endtime="20191206 16:20:21.363"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:18.959" endtime="20191206 16:20:21.363"></status>
</kw>
<msg timestamp="20191206 16:20:21.363" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:18.955" endtime="20191206 16:20:21.364"></status>
</kw>
<kw name="Verify 200 OK Response From XRS WebServices">
<doc>Validates a 200 response from each xrs webservice</doc>
<arguments>
<arg>${XRS_Status_Base_URI}</arg>
</arguments>
<msg timestamp="20191206 16:20:21.366" level="TRACE">Arguments: [ ${xrs_web_service_dict}={'Driver_Status': 'DriverStatusWebService.svc',
 'Vehicle_Breadcrumb': 'VehicleBreadcrumbWebService.svc',
 'Vehicle_Status': 'VehicleStatusWebService.svc'} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>base_uri</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20191206 16:20:21.367" level="TRACE">Arguments: [ 'base_uri' ]</msg>
<msg timestamp="20191206 16:20:21.368" level="TRACE">Return: 'base_uri'</msg>
<msg timestamp="20191206 16:20:21.368" level="INFO">${base_uri} = base_uri</msg>
<status status="PASS" starttime="20191206 16:20:21.367" endtime="20191206 16:20:21.368"></status>
</kw>
<kw name="${e} IN [ @{xrs_web_service_dict} ]" type="for">
<kw name="${e} = Driver_Status" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:21.370" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DriverStatusWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:21.370" level="INFO">GET Request using : uri=DriverStatusWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:21.667" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /DriverStatusWebService.svc HTTP/1.1" 200 1370</msg>
<msg timestamp="20191206 16:20:21.667" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DriverStatusWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;DriverStatusWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;DriverStatusWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DriverStatusWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DriverStatusWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DriverStatusWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DriverStatusWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;DriverStatusWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;DriverStatusWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;DriverStatusWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;DriverStatusWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:21.667" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:21.668" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:21.369" endtime="20191206 16:20:21.668"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:21.668" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:21.668" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:21.668" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:21.668" endtime="20191206 16:20:21.668"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:21.368" endtime="20191206 16:20:21.668"></status>
</kw>
<kw name="${e} = Vehicle_Status" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:21.669" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'VehicleStatusWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:21.669" level="INFO">GET Request using : uri=VehicleStatusWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:21.954" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /VehicleStatusWebService.svc HTTP/1.1" 200 1371</msg>
<msg timestamp="20191206 16:20:21.955" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/VehicleStatusWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;VehicleStatusWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;VehicleStatusWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/VehicleStatusWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/VehicleStatusWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/VehicleStatusWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/VehicleStatusWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;VehicleStatusWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;VehicleStatusWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;VehicleStatusWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;VehicleStatusWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:21.956" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:21.956" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:21.668" endtime="20191206 16:20:21.956"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:21.957" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:21.958" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:21.958" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:21.957" endtime="20191206 16:20:21.958"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:21.668" endtime="20191206 16:20:21.958"></status>
</kw>
<kw name="${e} = Vehicle_Breadcrumb" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:21.959" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'VehicleBreadcrumbWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:21.960" level="INFO">GET Request using : uri=VehicleBreadcrumbWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:22.234" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /VehicleBreadcrumbWebService.svc HTTP/1.1" 200 1376</msg>
<msg timestamp="20191206 16:20:22.236" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/VehicleBreadcrumbWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;VehicleBreadcrumbWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;VehicleBreadcrumbWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/VehicleBreadcrumbWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/VehicleBreadcrumbWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/VehicleBreadcrumbWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/VehicleBreadcrumbWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;VehicleBreadcrumbWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;VehicleBreadcrumbWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;VehicleBreadcrumbWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;VehicleBreadcrumbWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:22.236" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:22.237" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:21.959" endtime="20191206 16:20:22.237"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:22.238" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:22.238" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:22.239" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:22.237" endtime="20191206 16:20:22.239"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:21.958" endtime="20191206 16:20:22.239"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:21.368" endtime="20191206 16:20:22.239"></status>
</kw>
<msg timestamp="20191206 16:20:22.239" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:21.365" endtime="20191206 16:20:22.240"></status>
</kw>
<kw name="Verify 200 OK Response From XRS WebServices">
<doc>Validates a 200 response from each xrs webservice</doc>
<arguments>
<arg>${XRS_Compliance_Base_URI}</arg>
</arguments>
<msg timestamp="20191206 16:20:22.243" level="TRACE">Arguments: [ ${xrs_web_service_dict}={'DVIR': 'DVIRWebService.svc',
 'Driver_Log': 'DriverLogWebService.svc',
 'IFTA': 'IFTAWebService.svc',
 'UVA': 'UnassignedVehicleActivityWebService.svc'} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>base_uri</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20191206 16:20:22.244" level="TRACE">Arguments: [ 'base_uri' ]</msg>
<msg timestamp="20191206 16:20:22.244" level="TRACE">Return: 'base_uri'</msg>
<msg timestamp="20191206 16:20:22.245" level="INFO">${base_uri} = base_uri</msg>
<status status="PASS" starttime="20191206 16:20:22.244" endtime="20191206 16:20:22.245"></status>
</kw>
<kw name="${e} IN [ @{xrs_web_service_dict} ]" type="for">
<kw name="${e} = Driver_Log" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:22.247" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DriverLogWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:22.247" level="INFO">GET Request using : uri=DriverLogWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:22.677" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /DriverLogWebService.svc HTTP/1.1" 200 1367</msg>
<msg timestamp="20191206 16:20:22.678" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DriverLogWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;DriverLogWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;DriverLogWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DriverLogWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DriverLogWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DriverLogWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DriverLogWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;DriverLogWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;DriverLogWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;DriverLogWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;DriverLogWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:22.678" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:22.678" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:22.246" endtime="20191206 16:20:22.678"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:22.678" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:22.678" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:22.679" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:22.678" endtime="20191206 16:20:22.679"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:22.245" endtime="20191206 16:20:22.679"></status>
</kw>
<kw name="${e} = DVIR" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:22.679" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DVIRWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:22.679" level="INFO">GET Request using : uri=DVIRWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:22.950" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /DVIRWebService.svc HTTP/1.1" 200 1362</msg>
<msg timestamp="20191206 16:20:22.951" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DVIRWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;DVIRWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;DVIRWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DVIRWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DVIRWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DVIRWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/DVIRWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;DVIRWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;DVIRWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;DVIRWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;DVIRWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:22.952" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:22.952" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:22.679" endtime="20191206 16:20:22.953"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:22.954" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:22.955" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:22.955" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:22.953" endtime="20191206 16:20:22.955"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:22.679" endtime="20191206 16:20:22.956"></status>
</kw>
<kw name="${e} = IFTA" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:22.957" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'IFTAWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:22.958" level="INFO">GET Request using : uri=IFTAWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:23.246" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /IFTAWebService.svc HTTP/1.1" 200 1362</msg>
<msg timestamp="20191206 16:20:23.247" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/IFTAWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;IFTAWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;IFTAWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/IFTAWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/IFTAWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/IFTAWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/IFTAWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;IFTAWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;IFTAWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;IFTAWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;IFTAWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:23.247" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:23.248" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:22.956" endtime="20191206 16:20:23.248"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:23.249" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:23.249" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:23.249" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:23.248" endtime="20191206 16:20:23.249"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:22.956" endtime="20191206 16:20:23.250"></status>
</kw>
<kw name="${e} = UVA" type="foritem">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${xrs_web_service_dict}[${e}]</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:23.251" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'UnassignedVehicleActivityWebService.svc' ]</msg>
<msg timestamp="20191206 16:20:23.251" level="INFO">GET Request using : uri=UnassignedVehicleActivityWebService.svc, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:23.539" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /UnassignedVehicleActivityWebService.svc HTTP/1.1" 200 1384</msg>
<msg timestamp="20191206 16:20:23.540" level="DEBUG">GET Response : status=200, reason=OK
&lt;HTML&gt;&lt;HEAD&gt;&lt;link rel="alternate" type="text/xml" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/UnassignedVehicleActivityWebService.svc?disco"/&gt;&lt;STYLE type="text/css"&gt;#content{ FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px}BODY{MARGIN-TOP: 0px; MARGIN-LEFT: 0px; COLOR: #000000; FONT-FAMILY: Verdana; BACKGROUND-COLOR: white}P{MARGIN-TOP: 0px; MARGIN-BOTTOM: 12px; COLOR: #000000; FONT-FAMILY: Verdana}PRE{BORDER-RIGHT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #f0f0e0 1px solid; MARGIN-TOP: -5px; PADDING-LEFT: 5px; FONT-SIZE: 1.2em; PADDING-BOTTOM: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: #f0f0e0 1px solid; FONT-FAMILY: Courier New; BACKGROUND-COLOR: #e5e5cc}.heading1{MARGIN-TOP: 0px; PADDING-LEFT: 15px; FONT-WEIGHT: normal; FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 3px; MARGIN-LEFT: -30px; WIDTH: 100%; COLOR: #ffffff; PADDING-TOP: 10px; FONT-FAMILY: Tahoma; BACKGROUND-COLOR: #003366}.intro{MARGIN-LEFT: -15px}&lt;/STYLE&gt;&lt;TITLE&gt;UnassignedVehicleActivityWebService Service&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;DIV id="content"&gt;&lt;P class="heading1"&gt;UnassignedVehicleActivityWebService Service&lt;/P&gt;&lt;BR/&gt;&lt;P class="intro"&gt;You have created a service.&lt;P class='intro'&gt;To test this service, you will need to create a client and use it to call the service. You can do this using the svcutil.exe tool from the command line with the following syntax:&lt;/P&gt; &lt;BR/&gt;&lt;PRE&gt;svcutil.exe &lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/UnassignedVehicleActivityWebService.svc?wsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/UnassignedVehicleActivityWebService.svc?wsdl&lt;/A&gt;&lt;/PRE&gt;&lt;P&gt;You can also access the service description as a single file:&lt;BR/&gt;&lt;PRE&gt;&lt;A HREF="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/UnassignedVehicleActivityWebService.svc?singleWsdl"&gt;http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/UnassignedVehicleActivityWebService.svc?singleWsdl&lt;/A&gt;&lt;/PRE&gt;&lt;/P&gt;&lt;/P&gt;&lt;P class="intro"/&gt;This will generate a configuration file and a code file that contains the client class. Add the two files to your client application and use the generated client class to call the Service. For example:&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;C#&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;{
&lt;font color="blue"&gt;    static void &lt;/font&gt;Main()
    {
        &lt;font color="teal"&gt;UnassignedVehicleActivityWebServiceClient&lt;/font&gt; client = &lt;font color="blue"&gt;new &lt;/font&gt;&lt;font color="teal"&gt;UnassignedVehicleActivityWebServiceClient&lt;/font&gt;();

&lt;font color="green"&gt;        // Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        // Always close the client.
&lt;/font&gt;        client.Close();
    }
}
&lt;/PRE&gt;&lt;BR/&gt;&lt;P class='intro'&gt;&lt;B&gt;Visual Basic&lt;/B&gt;&lt;/P&gt;&lt;PRE&gt;&lt;font color="blue"&gt;Class &lt;/font&gt;&lt;font color="teal"&gt;Test
&lt;/font&gt;&lt;font color="blue"&gt;    Shared Sub &lt;/font&gt;Main()
&lt;font color="blue"&gt;        Dim &lt;/font&gt;client As &lt;font color="teal"&gt;UnassignedVehicleActivityWebServiceClient&lt;/font&gt; = &lt;font color="blue"&gt;New &lt;/font&gt;&lt;font color="teal"&gt;UnassignedVehicleActivityWebServiceClient&lt;/font&gt;()
&lt;font color="green"&gt;        ' Use the 'client' variable to call operations on the service.

&lt;/font&gt;&lt;font color="green"&gt;        ' Always close the client.
&lt;/font&gt;        client.Close()
&lt;font color="blue"&gt;    End Sub
&lt;/font&gt;&lt;font color="blue"&gt;End Class&lt;/font&gt;&lt;/PRE&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;</msg>
<msg timestamp="20191206 16:20:23.541" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:23.541" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:23.250" endtime="20191206 16:20:23.541"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:23.542" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:23.543" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:23.543" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:23.542" endtime="20191206 16:20:23.543"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:23.250" endtime="20191206 16:20:23.543"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:22.245" endtime="20191206 16:20:23.543"></status>
</kw>
<msg timestamp="20191206 16:20:23.543" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:22.242" endtime="20191206 16:20:23.544"></status>
</kw>
<doc>Initial test to verify that all XRS Web Services are available</doc>
<tags>
<tag>xrsawswebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20191206 16:20:13.383" endtime="20191206 16:20:23.545" critical="yes"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary" type="teardown">
<doc>Removes all the session objects</doc>
<msg timestamp="20191206 16:20:23.556" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20191206 16:20:23.556" level="INFO">Delete All Sessions</msg>
<msg timestamp="20191206 16:20:23.556" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:23.555" endtime="20191206 16:20:23.556"></status>
</kw>
<doc>Validates the top level XRS Web services</doc>
<status status="PASS" starttime="20191206 16:20:13.210" endtime="20191206 16:20:23.556"></status>
</suite>
<suite id="s1-s2" name="ValidateAWSXRSDeviceWebServices" source="C:\Users\kstine\git\aws-api-gateway-tests\Tests\AWS_XRS_WebServicesTests\01__ValidateAWSXRSDeviceWebServices.robot">
<kw name="Create AWS XRS Web Services Session" library="XRSCommonWebService" type="setup">
<doc>Create a session with aws xrs web services</doc>
<msg timestamp="20191206 16:20:23.643" level="TRACE">Arguments: [  ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${XRS_AWS_WEBSERVICES_URL}[${XRS_HOST_ENVIRONMENT}]</arg>
<arg>verify=True</arg>
<arg>auth=${XRS_WEBSERVICES_AUTHORIZATION}</arg>
</arguments>
<msg timestamp="20191206 16:20:23.643" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'https://d3ws.xataxrs.com' | verify=True | auth=['GnomeShippingD3|admin', 'xrs123'] ]</msg>
<msg timestamp="20191206 16:20:23.643" level="INFO">Creating Session using : alias=xrs_web_service_session, url=https://d3ws.xataxrs.com, headers={},                     cookies={}, auth=&lt;requests.auth.HTTPBasicAuth object at 0x0000024290FD0CC0&gt;, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<msg timestamp="20191206 16:20:23.643" level="DEBUG">Creating session: xrs_web_service_session</msg>
<msg timestamp="20191206 16:20:23.643" level="DEBUG">Argument types are:
&lt;class 'bool'&gt;</msg>
<msg timestamp="20191206 16:20:23.643" level="TRACE">Return: &lt;requests.sessions.Session object at 0x0000024290FD00B8&gt;</msg>
<status status="PASS" starttime="20191206 16:20:23.643" endtime="20191206 16:20:23.643"></status>
</kw>
<msg timestamp="20191206 16:20:23.644" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:23.642" endtime="20191206 16:20:23.644"></status>
</kw>
<test id="s1-s2-t1" name="Validate AWS XRS Get Device REST Web Services Returns 400 Error">
<kw name="Get Device With Phone Number" library="Device">
<doc>This will get device information for a particular device using the phone number</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_DEVICE_1.PhoneNumber}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:23.644" level="TRACE">Arguments: [ ${phone_number}=1201201212 ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Device}${ENTITY_MANAGEMENT_WEBSERVICE_GET_DELETE_DEVICE_WITH_NUMBER}/${phone_number}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20191206 16:20:23.645" level="TRACE">Arguments: [ 'DeviceWebService.svc/device/1201201212' ]</msg>
<msg timestamp="20191206 16:20:23.645" level="TRACE">Return: 'DeviceWebService.svc/device/1201201212'</msg>
<msg timestamp="20191206 16:20:23.645" level="INFO">${uri} = DeviceWebService.svc/device/1201201212</msg>
<status status="PASS" starttime="20191206 16:20:23.645" endtime="20191206 16:20:23.645"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:23.645" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DeviceWebService.svc/device/1201201212' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20191206 16:20:23.645" level="INFO">GET Request using : uri=DeviceWebService.svc/device/1201201212, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:23.647" level="DEBUG">Starting new HTTPS connection (1): d3ws.xataxrs.com:443</msg>
<msg timestamp="20191206 16:20:24.527" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /DeviceWebService.svc/device/1201201212 HTTP/1.1" 400 120</msg>
<msg timestamp="20191206 16:20:24.528" level="DEBUG">GET Response : status=400, reason=Bad Request
{"ErrorMessage":"The request failed to return any devices.","EventCode":3460453578429169664,"Parameters":["1201201212"]}</msg>
<msg timestamp="20191206 16:20:24.528" level="TRACE">Return: &lt;Response [400]&gt;</msg>
<msg timestamp="20191206 16:20:24.528" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:23.645" endtime="20191206 16:20:24.528"></status>
</kw>
<msg timestamp="20191206 16:20:24.529" level="TRACE">Return: &lt;Response [400]&gt;</msg>
<msg timestamp="20191206 16:20:24.530" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:23.644" endtime="20191206 16:20:24.530"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>400</arg>
</arguments>
<msg timestamp="20191206 16:20:24.532" level="TRACE">Arguments: [ 400 | '400' ]</msg>
<msg timestamp="20191206 16:20:24.532" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:24.532" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:24.531" endtime="20191206 16:20:24.533"></status>
</kw>
<doc>Verifies that a device with a specific number does not exist</doc>
<tags>
<tag>awsxrsdevicerestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20191206 16:20:23.644" endtime="20191206 16:20:24.534" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="Validate AWS XRS Post Device REST Web Services Returns Code 201">
<kw name="Post Devices" library="Device">
<doc>This will post device information.
Accepts a list of json objects
Json field definitions:
BelongsToResourceGroups
Indicates the set of ResourceGroupIDs to which the device belongs.
If a resource group is not provided in a Post call,
the new Device is to be placed in the default resource group for the organization to which the new Device is being added.
BluetoothAddress
Read only field indicating the Bluetooth address of the device.
For Windows Mobile devices and devices using Android 5.0 or earlier, this field displays the device's unique Bluetooth address.
For devices using Android 6.0 or later, this field displays a static value of "02:00:00:00:00:00."
CarrierDisplayName
The name of the Carrier.
CompanyName
A read only field that indicates the date and time the device was created.
CreateDate
A read only field that indicates the date and time the device was created.
Description
A description of the device.
DeviceType
Indicates the manufacturer and model of the device.
FixedDisplay
Indicates if this device will always be associated to a particular vehicle.
If set to true this will change the mobile behavior such that it remembers the last vehicle it was associated to.
IsChanged
A read only field indicating if there were any changes to the device since the value in the AsOfDateTime query parameter.
LastCommunication
A read only field indicating the date and time the device last communicated with the host.
LastDriverID
A read only field indicating the ID of the last driver which logged into the device.
LastDriverName
A read only field indicating the name of the last driver which logged into the device.
LastVehicleID
A read only field indicating the ID of the last vehicle to which the device was associated via Bluetooth.
ModifiedBy
A read only field indicating the ID of the last person to modify the driver record.
From AC: CreateDate, ModifiedDate and ModifiedBy data fields will be initialized by system.
ModifiedDate
A read only field indicating the date and time the device was last modified.
OrganizationID
The user-defined ID of the organization.
OrganizationName
A read-only field containing the name of the organization to which the device is assigned.
PhoneNumber
The 10 digit phone number of the device
SendInstallLink
Indicates if an installation link will be sent to the device.
Status
Identifies if a device is active or inactive in Omnitracs XRS. The value of this field must be Active or Inactive.
StoreGNISFileOnMobile
A read only field indicating whether the GNIS file will be stored on the mobile.
UserDefinedField1
User-defined field #1
UserDefinedField2
User-defined field #2
UserDefinedField3
User-defined field #3
UserDefinedField4
User-defined field #4
UserDefinedField5
User-defined field #5</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_POST_TEST_DEVICE_LIST}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:24.540" level="TRACE">Arguments: [ @{list_data}=[{'CarrierDisplayName': 'Sprint',
  'Description': 'Test Device 1',
  'DeviceType': 'Other - Android',
  'FixedDisplay': False,
  'OrganizationID': 46663,
  'PhoneNumber': 1201201212,
  'SendInstallLink': False,
  'Status': 'Active'}] ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Device}${ENTITY_MANAGEMENT_WEBSERVICE_POST_PUT_GET_DEVICES}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20191206 16:20:24.541" level="TRACE">Arguments: [ 'DeviceWebService.svc/devices' ]</msg>
<msg timestamp="20191206 16:20:24.542" level="TRACE">Return: 'DeviceWebService.svc/devices'</msg>
<msg timestamp="20191206 16:20:24.542" level="INFO">${uri} = DeviceWebService.svc/devices</msg>
<status status="PASS" starttime="20191206 16:20:24.541" endtime="20191206 16:20:24.542"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>json=${list_data}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:24.543" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DeviceWebService.svc/devices' | json=[{'CarrierDisplayName': 'Sprint',
  'Description': 'Test Device 1',
  'DeviceType': 'Other - Android',
  'FixedDisplay': False,
  'OrganizationID': 46663,
  'PhoneNumber': 1201201212,
  'SendInstallLink': False,
  'Status': 'Active'}] | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20191206 16:20:24.543" level="INFO">POST Request using : uri=DeviceWebService.svc/devices, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=[{'CarrierDisplayName': 'Sprint', 'Description': 'Test Device 1', 'DeviceType': 'Other - Android', 'FixedDisplay': False, 'OrganizationID': 46663, 'PhoneNumber': 1201201212, 'SendInstallLink': False, 'Status': 'Active'}]</msg>
<msg timestamp="20191206 16:20:25.310" level="DEBUG">https://d3ws.xataxrs.com:443 "POST /DeviceWebService.svc/devices HTTP/1.1" 200 150</msg>
<msg timestamp="20191206 16:20:25.312" level="DEBUG">POST Response : status=200, reason=OK
[{"Caption":"Created","Code":"201","Description":"Device added successfully.","Id":"1201201212","ObjectName":"Device","SID":0,"Title":"DeviceAdded."}]</msg>
<msg timestamp="20191206 16:20:25.313" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:25.313" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:24.542" endtime="20191206 16:20:25.313"></status>
</kw>
<msg timestamp="20191206 16:20:25.314" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:25.314" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:24.540" endtime="20191206 16:20:25.314"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20191206 16:20:25.318" level="TRACE">Arguments: [ b'[{"Caption":"Created","Code":"201","Description":"Device added successfully.","Id":"1201201212","ObjectName":"Device","SID":0,"Title":"DeviceAdded."}]' ]</msg>
<msg timestamp="20191206 16:20:25.318" level="INFO">To JSON using : content=[{"Caption":"Created","Code":"201","Description":"Device added successfully.","Id":"1201201212","ObjectName":"Device","SID":0,"Title":"DeviceAdded."}] </msg>
<msg timestamp="20191206 16:20:25.319" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20191206 16:20:25.319" level="TRACE">Return: [{'Caption': 'Created',
  'Code': '201',
  'Description': 'Device added successfully.',
  'Id': '1201201212',
  'ObjectName': 'Device',
  'SID': 0,
  'Title': 'DeviceAdded.'}]</msg>
<msg timestamp="20191206 16:20:25.320" level="INFO">${json_response} = [{'Caption': 'Created', 'Code': '201', 'Description': 'Device added successfully.', 'Id': '1201201212', 'ObjectName': 'Device', 'SID': 0, 'Title': 'DeviceAdded.'}]</msg>
<status status="PASS" starttime="20191206 16:20:25.317" endtime="20191206 16:20:25.320"></status>
</kw>
<kw name="${r} IN [ @{json_response} ]" type="for">
<kw name="${r} = {'Caption': 'Created', 'Code': '201', 'Description': 'Device added successfully.', 'Id': '1201201212', 'ObjectName': 'Device', 'SID': 0, 'Title': 'DeviceAdded.'}" type="foritem">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${r}[Code]</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20191206 16:20:25.322" level="TRACE">Arguments: [ '201' | '201' ]</msg>
<msg timestamp="20191206 16:20:25.322" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:25.323" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:25.322" endtime="20191206 16:20:25.323"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:25.321" endtime="20191206 16:20:25.323"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:25.321" endtime="20191206 16:20:25.323"></status>
</kw>
<doc>Posts a device and expects a Code value of 201</doc>
<tags>
<tag>awsxrsdevicerestwebservicevalidation</tag>
<tag>postdevice</tag>
</tags>
<status status="PASS" starttime="20191206 16:20:24.537" endtime="20191206 16:20:25.324" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="Validate AWS XRS Get Device REST Web Services Returns 200 OK">
<kw name="Get Device With Phone Number" library="Device">
<doc>This will get device information for a particular device using the phone number</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_DEVICE_1.PhoneNumber}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:25.329" level="TRACE">Arguments: [ ${phone_number}=1201201212 ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Device}${ENTITY_MANAGEMENT_WEBSERVICE_GET_DELETE_DEVICE_WITH_NUMBER}/${phone_number}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20191206 16:20:25.330" level="TRACE">Arguments: [ 'DeviceWebService.svc/device/1201201212' ]</msg>
<msg timestamp="20191206 16:20:25.330" level="TRACE">Return: 'DeviceWebService.svc/device/1201201212'</msg>
<msg timestamp="20191206 16:20:25.330" level="INFO">${uri} = DeviceWebService.svc/device/1201201212</msg>
<status status="PASS" starttime="20191206 16:20:25.330" endtime="20191206 16:20:25.330"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:25.332" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DeviceWebService.svc/device/1201201212' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20191206 16:20:25.332" level="INFO">GET Request using : uri=DeviceWebService.svc/device/1201201212, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:25.956" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /DeviceWebService.svc/device/1201201212 HTTP/1.1" 200 724</msg>
<msg timestamp="20191206 16:20:25.958" level="DEBUG">GET Response : status=200, reason=OK
{"BelongsToDeviceResourceGroups":["Gnome Shipping D3"],"BluetoothAddress":"00:00:00:00:00:00","CarrierDisplayName":"Sprint","CompanyName":"Gnome Shipping D3","CreateDate":"12\/6\/2019 10:20:25 PM","Description":"Test Device 1","DeviceType":"Other - Android","FixedDisplay":"False","IsChanged":"False","LastCommunication":"","LastDriverID":"","LastDriverName":"","LastVehicleID":"","ModifiedBy":"5412","ModifiedDate":"12\/6\/2019 10:20:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PhoneNumber":"1201201212","SendInstallLink":"False","Status":"Active","StoreGNISFileOnMobile":"False","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""}</msg>
<msg timestamp="20191206 16:20:25.958" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:25.958" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:25.331" endtime="20191206 16:20:25.959"></status>
</kw>
<msg timestamp="20191206 16:20:25.961" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:25.962" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:25.329" endtime="20191206 16:20:25.962"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:25.966" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:25.966" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:25.966" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:25.964" endtime="20191206 16:20:25.967"></status>
</kw>
<doc>Verifies that a posted device now exists</doc>
<tags>
<tag>awsxrsdevicerestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20191206 16:20:25.327" endtime="20191206 16:20:25.969" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="Validate AWS XRS Put Device REST Web Services Modifies Description Successfully">
<kw name="Put Devices" library="Device">
<doc>This will post device information.
Accepts a list of json objects
See Json field definitions in the "Post Devices" Keyword</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_POST_TEST_DEVICE_LIST}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:25.977" level="TRACE">Arguments: [ @{list_data}=[{'CarrierDisplayName': 'Sprint',
  'Description': 'Test Device 1',
  'DeviceType': 'Other - Android',
  'FixedDisplay': False,
  'OrganizationID': 46663,
  'PhoneNumber': 1201201212,
  'SendInstallLink': False,
  'Status': 'Active'}] ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Device}${ENTITY_MANAGEMENT_WEBSERVICE_POST_PUT_GET_DEVICES}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20191206 16:20:25.978" level="TRACE">Arguments: [ 'DeviceWebService.svc/devices' ]</msg>
<msg timestamp="20191206 16:20:25.978" level="TRACE">Return: 'DeviceWebService.svc/devices'</msg>
<msg timestamp="20191206 16:20:25.978" level="INFO">${uri} = DeviceWebService.svc/devices</msg>
<status status="PASS" starttime="20191206 16:20:25.977" endtime="20191206 16:20:25.978"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary">
<doc>Send a PUT request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>json=${list_data}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:25.979" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DeviceWebService.svc/devices' | json=[{'CarrierDisplayName': 'Sprint',
  'Description': 'Test Device 1',
  'DeviceType': 'Other - Android',
  'FixedDisplay': False,
  'OrganizationID': 46663,
  'PhoneNumber': 1201201212,
  'SendInstallLink': False,
  'Status': 'Active'}] | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20191206 16:20:25.980" level="INFO">PUT Request using : uri=DeviceWebService.svc/devices, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=[{'CarrierDisplayName': 'Sprint', 'Description': 'Test Device 1', 'DeviceType': 'Other - Android', 'FixedDisplay': False, 'OrganizationID': 46663, 'PhoneNumber': 1201201212, 'SendInstallLink': False, 'Status': 'Active'}]</msg>
<msg timestamp="20191206 16:20:26.822" level="DEBUG">https://d3ws.xataxrs.com:443 "PUT /DeviceWebService.svc/devices HTTP/1.1" 200 193</msg>
<msg timestamp="20191206 16:20:26.823" level="DEBUG">PUT Response : status=200, reason=OK
[{"Caption":"Device edited successfully.","Code":"200","Description":"Device edited successfully.","Id":"1201201212","ObjectName":"Device edited successfully.","SID":0,"Title":"DeviceEdited."}]</msg>
<msg timestamp="20191206 16:20:26.823" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:26.823" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:25.978" endtime="20191206 16:20:26.823"></status>
</kw>
<msg timestamp="20191206 16:20:26.824" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:26.824" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:25.976" endtime="20191206 16:20:26.824"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20191206 16:20:26.826" level="TRACE">Arguments: [ b'[{"Caption":"Device edited successfully.","Code":"200","Description":"Device edited successfully.","Id":"1201201212","ObjectName":"Device edited successfully.","SID":0,"Title":"DeviceEdited."}]' ]</msg>
<msg timestamp="20191206 16:20:26.826" level="INFO">To JSON using : content=[{"Caption":"Device edited successfully.","Code":"200","Description":"Device edited successfully.","Id":"1201201212","ObjectName":"Device edited successfully.","SID":0,"Title":"DeviceEdited."}] </msg>
<msg timestamp="20191206 16:20:26.826" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20191206 16:20:26.826" level="TRACE">Return: [{'Caption': 'Device edited successfully.',
  'Code': '200',
  'Description': 'Device edited successfully.',
  'Id': '1201201212',
  'ObjectName': 'Device edited successfully.',
  'SID': 0,
  'Title': 'DeviceEdited.'}]</msg>
<msg timestamp="20191206 16:20:26.826" level="INFO">${json_response} = [{'Caption': 'Device edited successfully.', 'Code': '200', 'Description': 'Device edited successfully.', 'Id': '1201201212', 'ObjectName': 'Device edited successfully.', 'SID': 0, 'Title': 'DeviceEdit...</msg>
<status status="PASS" starttime="20191206 16:20:26.825" endtime="20191206 16:20:26.826"></status>
</kw>
<kw name="${r} IN [ @{json_response} ]" type="for">
<kw name="${r} = {'Caption': 'Device edited successfully.', 'Code': '200', 'Description': 'Device edited successfully.', 'Id': '1201201212', 'ObjectName': 'Device edited successfully.', 'SID': 0, 'Title': 'DeviceEdite..." type="foritem">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${r}[Description]</arg>
<arg>Device edited successfully.</arg>
</arguments>
<msg timestamp="20191206 16:20:26.828" level="TRACE">Arguments: [ 'Device edited successfully.' | 'Device edited successfully.' ]</msg>
<msg timestamp="20191206 16:20:26.828" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:26.828" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:26.828" endtime="20191206 16:20:26.829"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:26.827" endtime="20191206 16:20:26.829"></status>
</kw>
<status status="PASS" starttime="20191206 16:20:26.827" endtime="20191206 16:20:26.829"></status>
</kw>
<doc>Posts a device and expects a Code value of 201</doc>
<tags>
<tag>awsxrsdevicerestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20191206 16:20:25.974" endtime="20191206 16:20:26.830" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="Validate AWS XRS Get Devices REST Web Services Returns 200 OK">
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20191206 16:20:26.834" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20191206 16:20:26.834" level="TRACE">Return: ['2019', '12', '06']</msg>
<msg timestamp="20191206 16:20:26.834" level="INFO">${yyyy} = 2019</msg>
<msg timestamp="20191206 16:20:26.834" level="INFO">${mm} = 12</msg>
<msg timestamp="20191206 16:20:26.834" level="INFO">${dd} = 06</msg>
<status status="PASS" starttime="20191206 16:20:26.834" endtime="20191206 16:20:26.834"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20191206 16:20:26.836" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20191206 16:20:26.836" level="TRACE">Return: {'AsOfDateTime': '12/06/2019', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20191206 16:20:26.837" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=12/06/2019 }</msg>
<status status="PASS" starttime="20191206 16:20:26.836" endtime="20191206 16:20:26.837"></status>
</kw>
<kw name="Verify Get Devices With Forward Slash Returns 200 OK">
<doc>Verify that using a '/' in the URI returns 200 OK</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<msg timestamp="20191206 16:20:26.838" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '12/06/2019', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Get Devices With URI Ending With Forward Slash" library="Device">
<doc>This Keyword contains a modified URI that ends with a forward slash
This will get devices that match the provided parameters.
Params can be named individually or within a Dictionary
Params:
AsOfDateTime
Tells the service to return only the data that changed since the specified date and time.
IsActive
Filters results to active drivers only.
Valid Values: True False Both
Limit
Used in conjunction with the Offset parameter to implement paging.
Limits the number of results to a specified number.
System Limit: 10,000
Offset
Used in conjunction with the Limit parameter to implement paging.
Represents a page number for the starting point of the return set.
OrganizationID
Limits results to devices in one or more organizations.
PhoneNumber
The following values can be specified:
[No Filter] - Limits results to all device records within the Web Service users' OrganizationID and ResourceGroupID.
10 character phone number - Limits results to the device record within the Web Service users' OrganizationID and ResourceGroupID
Example value: 1234567890
ResourceGroupID
Limits results to devices in one or more resource groups.</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:26.839" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '12/06/2019', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Device}${ENTITY_MANAGEMENT_WEBSERVICE_POST_PUT_GET_DEVICES}/</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20191206 16:20:26.840" level="TRACE">Arguments: [ 'DeviceWebService.svc/devices/' ]</msg>
<msg timestamp="20191206 16:20:26.840" level="TRACE">Return: 'DeviceWebService.svc/devices/'</msg>
<msg timestamp="20191206 16:20:26.840" level="INFO">${uri} = DeviceWebService.svc/devices/</msg>
<status status="PASS" starttime="20191206 16:20:26.840" endtime="20191206 16:20:26.840"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:26.841" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DeviceWebService.svc/devices/' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} | params={'AsOfDateTime': '12/06/2019', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<msg timestamp="20191206 16:20:26.841" level="INFO">GET Request using : uri=DeviceWebService.svc/devices/, params={'OrganizationID': 46663, 'IsActive': 'True', 'AsOfDateTime': '12/06/2019'}, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:27.449" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /DeviceWebService.svc/devices/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=12%2F06%2F2019 HTTP/1.1" 200 726</msg>
<msg timestamp="20191206 16:20:27.450" level="DEBUG">GET Response : status=200, reason=OK
[{"BelongsToDeviceResourceGroups":["Gnome Shipping D3"],"BluetoothAddress":"00:00:00:00:00:00","CarrierDisplayName":"Sprint","CompanyName":"Gnome Shipping D3","CreateDate":"12\/6\/2019 10:20:25 PM","Description":"Test Device 1","DeviceType":"Other - Android","FixedDisplay":"False","IsChanged":"False","LastCommunication":"","LastDriverID":"","LastDriverName":"","LastVehicleID":"","ModifiedBy":"5412","ModifiedDate":"12\/6\/2019 10:20:27 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PhoneNumber":"1201201212","SendInstallLink":"False","Status":"Active","StoreGNISFileOnMobile":"False","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""}]</msg>
<msg timestamp="20191206 16:20:27.450" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:27.450" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:26.841" endtime="20191206 16:20:27.450"></status>
</kw>
<msg timestamp="20191206 16:20:27.450" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:27.450" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:26.839" endtime="20191206 16:20:27.450"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:27.451" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:27.451" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:27.451" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:27.451" endtime="20191206 16:20:27.451"></status>
</kw>
<msg timestamp="20191206 16:20:27.451" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:26.838" endtime="20191206 16:20:27.451"></status>
</kw>
<kw name="Verify Get Devices Without Forward Slash Returns 200 OK">
<doc>Verify that not using a '/' in the URI returns 200 OK</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<msg timestamp="20191206 16:20:27.452" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '12/06/2019', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Get Devices With URI Ending Without Forward Slash" library="Device">
<doc>This Keyword contains a modified URI that ends without a foward slash
This will get devices that match the provided parameters.
Params can be named individually or within a Dictionary
Params:
AsOfDateTime
Tells the service to return only the data that changed since the specified date and time.
IsActive
Filters results to active drivers only.
Valid Values: True False Both
Limit
Used in conjunction with the Offset parameter to implement paging.
Limits the number of results to a specified number.
System Limit: 10,000
Offset
Used in conjunction with the Limit parameter to implement paging.
Represents a page number for the starting point of the return set.
OrganizationID
Limits results to devices in one or more organizations.
PhoneNumber
The following values can be specified:
[No Filter] - Limits results to all device records within the Web Service users' OrganizationID and ResourceGroupID.
10 character phone number - Limits results to the device record within the Web Service users' OrganizationID and ResourceGroupID
Example value: 1234567890
ResourceGroupID
Limits results to devices in one or more resource groups.</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:27.452" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '12/06/2019', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Device}${ENTITY_MANAGEMENT_WEBSERVICE_POST_PUT_GET_DEVICES}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20191206 16:20:27.453" level="TRACE">Arguments: [ 'DeviceWebService.svc/devices' ]</msg>
<msg timestamp="20191206 16:20:27.453" level="TRACE">Return: 'DeviceWebService.svc/devices'</msg>
<msg timestamp="20191206 16:20:27.453" level="INFO">${uri} = DeviceWebService.svc/devices</msg>
<status status="PASS" starttime="20191206 16:20:27.453" endtime="20191206 16:20:27.453"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:27.454" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DeviceWebService.svc/devices' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} | params={'AsOfDateTime': '12/06/2019', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<msg timestamp="20191206 16:20:27.454" level="INFO">GET Request using : uri=DeviceWebService.svc/devices, params={'OrganizationID': 46663, 'IsActive': 'True', 'AsOfDateTime': '12/06/2019'}, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:28.878" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /DeviceWebService.svc/devices?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=12%2F06%2F2019 HTTP/1.1" 200 726</msg>
<msg timestamp="20191206 16:20:28.880" level="DEBUG">GET Response : status=200, reason=OK
[{"BelongsToDeviceResourceGroups":["Gnome Shipping D3"],"BluetoothAddress":"00:00:00:00:00:00","CarrierDisplayName":"Sprint","CompanyName":"Gnome Shipping D3","CreateDate":"12\/6\/2019 10:20:25 PM","Description":"Test Device 1","DeviceType":"Other - Android","FixedDisplay":"False","IsChanged":"False","LastCommunication":"","LastDriverID":"","LastDriverName":"","LastVehicleID":"","ModifiedBy":"5412","ModifiedDate":"12\/6\/2019 10:20:27 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PhoneNumber":"1201201212","SendInstallLink":"False","Status":"Active","StoreGNISFileOnMobile":"False","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""}]</msg>
<msg timestamp="20191206 16:20:28.880" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:28.881" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:27.453" endtime="20191206 16:20:28.881"></status>
</kw>
<msg timestamp="20191206 16:20:28.881" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:28.882" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:27.452" endtime="20191206 16:20:28.882"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:28.883" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:28.884" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:28.884" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:28.882" endtime="20191206 16:20:28.885"></status>
</kw>
<msg timestamp="20191206 16:20:28.885" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:27.452" endtime="20191206 16:20:28.885"></status>
</kw>
<doc>Get devices with basic parameters</doc>
<tags>
<tag>awsxrsdevicerestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20191206 16:20:26.832" endtime="20191206 16:20:28.887" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="Validate AWS XRS Get Devices REST Web Services Returns 200 OK With Raw String URI">
<kw name="Verify Get Devices Raw String URI With Forward Slash Returns 200 OK">
<doc>Verify that using a '/' in the raw URI string returns 200 OK</doc>
<msg timestamp="20191206 16:20:28.900" level="TRACE">Arguments: [  ]</msg>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20191206 16:20:28.900" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20191206 16:20:28.901" level="TRACE">Return: ['2019', '12', '06']</msg>
<msg timestamp="20191206 16:20:28.901" level="INFO">${yyyy} = 2019</msg>
<msg timestamp="20191206 16:20:28.901" level="INFO">${mm} = 12</msg>
<msg timestamp="20191206 16:20:28.901" level="INFO">${dd} = 06</msg>
<status status="PASS" starttime="20191206 16:20:28.900" endtime="20191206 16:20:28.901"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20191206 16:20:28.901" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20191206 16:20:28.902" level="TRACE">Return: {'AsOfDateTime': '12/06/2019', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20191206 16:20:28.902" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=12/06/2019 }</msg>
<status status="PASS" starttime="20191206 16:20:28.901" endtime="20191206 16:20:28.902"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Device}${ENTITY_MANAGEMENT_WEBSERVICE_POST_PUT_GET_DEVICES}/?OrganizationID=${params.OrganizationID}&amp;IsActive=${params.IsActive}&amp;AsOfDateTime=${params.AsOfDateTime}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20191206 16:20:28.903" level="TRACE">Arguments: [ 'DeviceWebService.svc/devices/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=12/06/2019' ]</msg>
<msg timestamp="20191206 16:20:28.903" level="TRACE">Return: 'DeviceWebService.svc/devices/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=12/06/2019'</msg>
<msg timestamp="20191206 16:20:28.904" level="INFO">${uri} = DeviceWebService.svc/devices/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=12/06/2019</msg>
<status status="PASS" starttime="20191206 16:20:28.902" endtime="20191206 16:20:28.904"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:28.904" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DeviceWebService.svc/devices/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=12/06/2019' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20191206 16:20:28.904" level="INFO">GET Request using : uri=DeviceWebService.svc/devices/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=12/06/2019, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:29.522" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /DeviceWebService.svc/devices/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=12/06/2019 HTTP/1.1" 200 726</msg>
<msg timestamp="20191206 16:20:29.523" level="DEBUG">GET Response : status=200, reason=OK
[{"BelongsToDeviceResourceGroups":["Gnome Shipping D3"],"BluetoothAddress":"00:00:00:00:00:00","CarrierDisplayName":"Sprint","CompanyName":"Gnome Shipping D3","CreateDate":"12\/6\/2019 10:20:25 PM","Description":"Test Device 1","DeviceType":"Other - Android","FixedDisplay":"False","IsChanged":"False","LastCommunication":"","LastDriverID":"","LastDriverName":"","LastVehicleID":"","ModifiedBy":"5412","ModifiedDate":"12\/6\/2019 10:20:27 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PhoneNumber":"1201201212","SendInstallLink":"False","Status":"Active","StoreGNISFileOnMobile":"False","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""}]</msg>
<msg timestamp="20191206 16:20:29.523" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:29.523" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:28.904" endtime="20191206 16:20:29.523"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:29.525" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:29.525" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:29.525" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:29.524" endtime="20191206 16:20:29.525"></status>
</kw>
<msg timestamp="20191206 16:20:29.525" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:28.899" endtime="20191206 16:20:29.526"></status>
</kw>
<kw name="Verify Get Devices Raw String URI Without Forward Slash Returns 200 OK">
<doc>Verify that not using a '/' in the raw URI string returns 200 OK</doc>
<msg timestamp="20191206 16:20:29.527" level="TRACE">Arguments: [  ]</msg>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20191206 16:20:29.528" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20191206 16:20:29.528" level="TRACE">Return: ['2019', '12', '06']</msg>
<msg timestamp="20191206 16:20:29.529" level="INFO">${yyyy} = 2019</msg>
<msg timestamp="20191206 16:20:29.529" level="INFO">${mm} = 12</msg>
<msg timestamp="20191206 16:20:29.529" level="INFO">${dd} = 06</msg>
<status status="PASS" starttime="20191206 16:20:29.527" endtime="20191206 16:20:29.529"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20191206 16:20:29.530" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20191206 16:20:29.531" level="TRACE">Return: {'AsOfDateTime': '12/06/2019', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20191206 16:20:29.531" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=12/06/2019 }</msg>
<status status="PASS" starttime="20191206 16:20:29.529" endtime="20191206 16:20:29.531"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Device}${ENTITY_MANAGEMENT_WEBSERVICE_POST_PUT_GET_DEVICES}?OrganizationID=${params.OrganizationID}&amp;IsActive=${params.IsActive}&amp;AsOfDateTime=${params.AsOfDateTime}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20191206 16:20:29.534" level="TRACE">Arguments: [ 'DeviceWebService.svc/devices?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=12/06/2019' ]</msg>
<msg timestamp="20191206 16:20:29.535" level="TRACE">Return: 'DeviceWebService.svc/devices?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=12/06/2019'</msg>
<msg timestamp="20191206 16:20:29.535" level="INFO">${uri} = DeviceWebService.svc/devices?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=12/06/2019</msg>
<status status="PASS" starttime="20191206 16:20:29.532" endtime="20191206 16:20:29.535"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:29.537" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DeviceWebService.svc/devices?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=12/06/2019' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20191206 16:20:29.537" level="INFO">GET Request using : uri=DeviceWebService.svc/devices?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=12/06/2019, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:30.118" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /DeviceWebService.svc/devices?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=12/06/2019 HTTP/1.1" 200 726</msg>
<msg timestamp="20191206 16:20:30.119" level="DEBUG">GET Response : status=200, reason=OK
[{"BelongsToDeviceResourceGroups":["Gnome Shipping D3"],"BluetoothAddress":"00:00:00:00:00:00","CarrierDisplayName":"Sprint","CompanyName":"Gnome Shipping D3","CreateDate":"12\/6\/2019 10:20:25 PM","Description":"Test Device 1","DeviceType":"Other - Android","FixedDisplay":"False","IsChanged":"False","LastCommunication":"","LastDriverID":"","LastDriverName":"","LastVehicleID":"","ModifiedBy":"5412","ModifiedDate":"12\/6\/2019 10:20:27 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PhoneNumber":"1201201212","SendInstallLink":"False","Status":"Active","StoreGNISFileOnMobile":"False","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""}]</msg>
<msg timestamp="20191206 16:20:30.119" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:30.119" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:29.536" endtime="20191206 16:20:30.119"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:30.120" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:30.121" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:30.121" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:30.120" endtime="20191206 16:20:30.121"></status>
</kw>
<msg timestamp="20191206 16:20:30.121" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:29.526" endtime="20191206 16:20:30.121"></status>
</kw>
<doc>Get devices with basic parameters using a raw URI string</doc>
<tags>
<tag>awsxrsdevicerestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20191206 16:20:28.891" endtime="20191206 16:20:30.122" critical="yes"></status>
</test>
<test id="s1-s2-t7" name="Validate AWS XRS Delete Device REST Web Services Returns 200 OK">
<kw name="Delete Device With Phone Number" library="Device">
<doc>This will delete device information for a particular device using the phone number</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_DEVICE_1.PhoneNumber}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:30.127" level="TRACE">Arguments: [ ${phone_number}=1201201212 ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Device}${ENTITY_MANAGEMENT_WEBSERVICE_GET_DELETE_DEVICE_WITH_NUMBER}/${phone_number}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20191206 16:20:30.128" level="TRACE">Arguments: [ 'DeviceWebService.svc/device/1201201212' ]</msg>
<msg timestamp="20191206 16:20:30.128" level="TRACE">Return: 'DeviceWebService.svc/device/1201201212'</msg>
<msg timestamp="20191206 16:20:30.128" level="INFO">${uri} = DeviceWebService.svc/device/1201201212</msg>
<status status="PASS" starttime="20191206 16:20:30.127" endtime="20191206 16:20:30.128"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20191206 16:20:30.129" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DeviceWebService.svc/device/1201201212' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20191206 16:20:30.130" level="INFO">DELETE Request using : uri=DeviceWebService.svc/device/1201201212, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20191206 16:20:30.946" level="DEBUG">https://d3ws.xataxrs.com:443 "DELETE /DeviceWebService.svc/device/1201201212 HTTP/1.1" 200 153</msg>
<msg timestamp="20191206 16:20:30.947" level="DEBUG">DELETE Response : status=200, reason=OK
{"Caption":"Deleted.","Code":"200","Description":"Device deleted successfully.","Id":"1201201212","ObjectName":"Device","SID":0,"Title":"DeviceDeleted."}</msg>
<msg timestamp="20191206 16:20:30.947" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:30.947" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:30.129" endtime="20191206 16:20:30.947"></status>
</kw>
<msg timestamp="20191206 16:20:30.948" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20191206 16:20:30.948" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191206 16:20:30.126" endtime="20191206 16:20:30.948"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20191206 16:20:30.949" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20191206 16:20:30.949" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191206 16:20:30.949" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:30.949" endtime="20191206 16:20:30.949"></status>
</kw>
<doc>Verifies that created device is deleted</doc>
<tags>
<tag>awsxrsdevicerestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20191206 16:20:30.125" endtime="20191206 16:20:30.950" critical="yes"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary" type="teardown">
<doc>Removes all the session objects</doc>
<msg timestamp="20191206 16:20:30.954" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20191206 16:20:30.954" level="INFO">Delete All Sessions</msg>
<msg timestamp="20191206 16:20:30.954" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20191206 16:20:30.954" endtime="20191206 16:20:30.954"></status>
</kw>
<doc>Fundamental suite to test XRS AWS Device Entity Management Web Services</doc>
<status status="PASS" starttime="20191206 16:20:23.561" endtime="20191206 16:20:30.954"></status>
</suite>
<status status="PASS" starttime="20191206 16:20:13.186" endtime="20191206 16:20:30.960"></status>
</suite>
<statistics>
<total>
<stat pass="8" fail="0">Critical Tests</stat>
<stat pass="8" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="7" fail="0">awsxrsdevicerestwebservicevalidation</stat>
<stat pass="1" fail="0">postdevice</stat>
<stat pass="1" fail="0">xrsawswebservicevalidation</stat>
</tag>
<suite>
<stat pass="8" fail="0" id="s1" name="AWS XRS WebServicesTests">AWS XRS WebServicesTests</stat>
<stat pass="1" fail="0" id="s1-s1" name="ValidateAWSXRSWebServices">AWS XRS WebServicesTests.ValidateAWSXRSWebServices</stat>
<stat pass="7" fail="0" id="s1-s2" name="ValidateAWSXRSDeviceWebServices">AWS XRS WebServicesTests.ValidateAWSXRSDeviceWebServices</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>

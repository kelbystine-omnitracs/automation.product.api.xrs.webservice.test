<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.8.0 on win32)" generated="20200107 09:49:01.979" rpa="false">
<suite id="s1" name="Tests" source="C:\Users\kstine\git\aws-api-gateway-tests\Tests">
<suite id="s1-s1" name="AWS XRS WebServicesTests" source="C:\Users\kstine\git\aws-api-gateway-tests\Tests\AWS_XRS_WebServicesTests">
<suite id="s1-s1-s1" name="ValidateAWSXRSDeviceWebServices" source="C:\Users\kstine\git\aws-api-gateway-tests\Tests\AWS_XRS_WebServicesTests\01__ValidateAWSXRSDeviceWebServices.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Create AWS XRS Web Services Session</arg>
<arg>AND</arg>
<arg>Test Data Setup For XRS AWS Device Web Service Test Suite</arg>
</arguments>
<msg timestamp="20200107 09:49:02.208" level="TRACE">Arguments: [ 'Create AWS XRS Web Services Session' | 'AND' | 'Test Data Setup For XRS AWS Device Web Service Test Suite' ]</msg>
<kw name="Create AWS XRS Web Services Session" library="XRSCommonWebService">
<doc>Create a session with aws xrs web services</doc>
<msg timestamp="20200107 09:49:02.209" level="TRACE">Arguments: [  ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${XRS_AWS_WEBSERVICES_URL}[${XRS_HOST_ENVIRONMENT}]</arg>
<arg>verify=True</arg>
<arg>auth=${XRS_WEBSERVICES_AUTHORIZATION}</arg>
</arguments>
<msg timestamp="20200107 09:49:02.209" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'https://d3ws.xataxrs.com' | verify=True | auth=['GnomeShippingD3|admin', 'xrs123'] ]</msg>
<msg timestamp="20200107 09:49:02.210" level="INFO">Creating Session using : alias=xrs_web_service_session, url=https://d3ws.xataxrs.com, headers={},                     cookies={}, auth=&lt;requests.auth.HTTPBasicAuth object at 0x0000018E379A6820&gt;, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<msg timestamp="20200107 09:49:02.210" level="DEBUG">Creating session: xrs_web_service_session</msg>
<msg timestamp="20200107 09:49:02.210" level="DEBUG">Argument types are:
&lt;class 'bool'&gt;</msg>
<msg timestamp="20200107 09:49:02.210" level="TRACE">Return: &lt;requests.sessions.Session object at 0x0000018E379A6CA0&gt;</msg>
<status status="PASS" starttime="20200107 09:49:02.209" endtime="20200107 09:49:02.210"></status>
</kw>
<msg timestamp="20200107 09:49:02.210" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:02.208" endtime="20200107 09:49:02.210"></status>
</kw>
<kw name="Test Data Setup For XRS AWS Device Web Service Test Suite">
<doc>Keyword for setting up suite variables for AWS Device Web Service Tests.</doc>
<msg timestamp="20200107 09:49:02.211" level="TRACE">Arguments: [  ]</msg>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>CarrierDisplayName=${XRS_WEB_SERVICES_TEST_DEVICE_1.CarrierDisplayName}</arg>
<arg>Description=${XRS_WEB_SERVICES_TEST_DEVICE_1.Description}</arg>
<arg>DeviceType=${XRS_WEB_SERVICES_TEST_DEVICE_1.DeviceType}</arg>
<arg>FixedDisplay=${XRS_WEB_SERVICES_TEST_DEVICE_1.FixedDisplay}</arg>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>PhoneNumber=${XRS_WEB_SERVICES_TEST_DEVICE_1.PhoneNumber}</arg>
<arg>SendInstallLink=${XRS_WEB_SERVICES_TEST_DEVICE_1.SendInstallLink}</arg>
<arg>Status=${XRS_WEB_SERVICES_TEST_DEVICE_1.Status}</arg>
</arguments>
<assign>
<var>&amp;{XRS_AWS_WEBSERVICE_POST_TEST_DEVICE_1_DICT}</var>
</assign>
<msg timestamp="20200107 09:49:02.211" level="TRACE">Arguments: [ 'CarrierDisplayName=${XRS_WEB_SERVICES_TEST_DEVICE_1.CarrierDisplayName}' | 'Description=${XRS_WEB_SERVICES_TEST_DEVICE_1.Description}' | 'DeviceType=${XRS_WEB_SERVICES_TEST_DEVICE_1.DeviceType}' | 'FixedDisplay=${XRS_WEB_SERVICES_TEST_DEVICE_1.FixedDisplay}' | 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'PhoneNumber=${XRS_WEB_SERVICES_TEST_DEVICE_1.PhoneNumber}' | 'SendInstallLink=${XRS_WEB_SERVICES_TEST_DEVICE_1.SendInstallLink}' | 'Status=${XRS_WEB_SERVICES_TEST_DEVICE_1.Status}' ]</msg>
<msg timestamp="20200107 09:49:02.214" level="TRACE">Return: {'CarrierDisplayName': 'Sprint',
 'Description': 'Test Device 1',
 'DeviceType': 'Other - Android',
 'FixedDisplay': False,
 'OrganizationID': 46663,
 'PhoneNumber': 1201201212,
 'SendInstallLink': False,
 'Status': 'Active'}</msg>
<msg timestamp="20200107 09:49:02.214" level="INFO">&amp;{XRS_AWS_WEBSERVICE_POST_TEST_DEVICE_1_DICT} = { CarrierDisplayName=Sprint | Description=Test Device 1 | DeviceType=Other - Android | FixedDisplay=False | OrganizationID=46663 | PhoneNumber=1201201212 | SendInstallLink=False | Status=Active }</msg>
<status status="PASS" starttime="20200107 09:49:02.211" endtime="20200107 09:49:02.214"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${XRS_AWS_WEBSERVICE_POST_TEST_DEVICE_1_DICT}</arg>
</arguments>
<assign>
<var>@{XRS_AWS_WEBSERVICE_POST_TEST_DEVICE_LIST}</var>
</assign>
<msg timestamp="20200107 09:49:02.215" level="TRACE">Arguments: [ {'CarrierDisplayName': 'Sprint',
 'Description': 'Test Device 1',
 'DeviceType': 'Other - Android',
 'FixedDisplay': False,
 'OrganizationID': 46663,
 'PhoneNumber': 1201201212,
 'SendInstallLink': False,
 'Status': 'Active'} ]</msg>
<msg timestamp="20200107 09:49:02.215" level="TRACE">Return: [{'CarrierDisplayName': 'Sprint',
  'Description': 'Test Device 1',
  'DeviceType': 'Other - Android',
  'FixedDisplay': False,
  'OrganizationID': 46663,
  'PhoneNumber': 1201201212,
  'SendInstallLink': False,
  'Status': 'Active'}]</msg>
<msg timestamp="20200107 09:49:02.215" level="INFO">@{XRS_AWS_WEBSERVICE_POST_TEST_DEVICE_LIST} = [ {'CarrierDisplayName': 'Sprint', 'Description': 'Test Device 1', 'DeviceType': 'Other - Android', 'FixedDisplay': False, 'OrganizationID': 46663, 'PhoneNumber': 1201201212, 'SendInstallLink': False,...</msg>
<status status="PASS" starttime="20200107 09:49:02.214" endtime="20200107 09:49:02.215"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_POST_TEST_DEVICE_LIST}</arg>
</arguments>
<msg timestamp="20200107 09:49:02.216" level="TRACE">Arguments: [ '@{XRS_AWS_WEBSERVICE_POST_TEST_DEVICE_LIST}' ]</msg>
<msg timestamp="20200107 09:49:02.216" level="INFO">@{XRS_AWS_WEBSERVICE_POST_TEST_DEVICE_LIST} = [ {'CarrierDisplayName': 'Sprint', 'Description': 'Test Device 1', 'DeviceType': 'Other - Android', 'FixedDisplay': False, 'OrganizationID': 46663, 'PhoneNumber': 1201201212, 'SendInstallLink': False,...</msg>
<msg timestamp="20200107 09:49:02.216" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:02.216" endtime="20200107 09:49:02.216"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>CarrierDisplayName=${XRS_WEB_SERVICES_TEST_DEVICE_1.CarrierDisplayName}</arg>
<arg>Description=This has changed.</arg>
<arg>DeviceType=${XRS_WEB_SERVICES_TEST_DEVICE_1.DeviceType}</arg>
<arg>FixedDisplay=${XRS_WEB_SERVICES_TEST_DEVICE_1.FixedDisplay}</arg>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>PhoneNumber=${XRS_WEB_SERVICES_TEST_DEVICE_1.PhoneNumber}</arg>
<arg>SendInstallLink=${XRS_WEB_SERVICES_TEST_DEVICE_1.SendInstallLink}</arg>
<arg>Status=${XRS_WEB_SERVICES_TEST_DEVICE_1.Status}</arg>
</arguments>
<assign>
<var>&amp;{XRS_AWS_WEBSERVICE_PUT_TEST_DEVICE_1_DICT}</var>
</assign>
<msg timestamp="20200107 09:49:02.217" level="TRACE">Arguments: [ 'CarrierDisplayName=${XRS_WEB_SERVICES_TEST_DEVICE_1.CarrierDisplayName}' | 'Description=This has changed.' | 'DeviceType=${XRS_WEB_SERVICES_TEST_DEVICE_1.DeviceType}' | 'FixedDisplay=${XRS_WEB_SERVICES_TEST_DEVICE_1.FixedDisplay}' | 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'PhoneNumber=${XRS_WEB_SERVICES_TEST_DEVICE_1.PhoneNumber}' | 'SendInstallLink=${XRS_WEB_SERVICES_TEST_DEVICE_1.SendInstallLink}' | 'Status=${XRS_WEB_SERVICES_TEST_DEVICE_1.Status}' ]</msg>
<msg timestamp="20200107 09:49:02.219" level="TRACE">Return: {'CarrierDisplayName': 'Sprint',
 'Description': 'This has changed.',
 'DeviceType': 'Other - Android',
 'FixedDisplay': False,
 'OrganizationID': 46663,
 'PhoneNumber': 1201201212,
 'SendInstallLink': False,
 'Status': 'Active'}</msg>
<msg timestamp="20200107 09:49:02.219" level="INFO">&amp;{XRS_AWS_WEBSERVICE_PUT_TEST_DEVICE_1_DICT} = { CarrierDisplayName=Sprint | Description=This has changed. | DeviceType=Other - Android | FixedDisplay=False | OrganizationID=46663 | PhoneNumber=1201201212 | SendInstallLink=False | Status=Active }</msg>
<status status="PASS" starttime="20200107 09:49:02.217" endtime="20200107 09:49:02.219"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${XRS_AWS_WEBSERVICE_PUT_TEST_DEVICE_1_DICT}</arg>
</arguments>
<assign>
<var>@{XRS_AWS_WEBSERVICE_PUT_TEST_DEVICE_LIST}</var>
</assign>
<msg timestamp="20200107 09:49:02.220" level="TRACE">Arguments: [ {'CarrierDisplayName': 'Sprint',
 'Description': 'This has changed.',
 'DeviceType': 'Other - Android',
 'FixedDisplay': False,
 'OrganizationID': 46663,
 'PhoneNumber': 1201201212,
 'SendInstallLink': False,
 'Status': 'Active'} ]</msg>
<msg timestamp="20200107 09:49:02.220" level="TRACE">Return: [{'CarrierDisplayName': 'Sprint',
  'Description': 'This has changed.',
  'DeviceType': 'Other - Android',
  'FixedDisplay': False,
  'OrganizationID': 46663,
  'PhoneNumber': 1201201212,
  'SendInstallLink': False,
  'Status': 'Active'}]</msg>
<msg timestamp="20200107 09:49:02.220" level="INFO">@{XRS_AWS_WEBSERVICE_PUT_TEST_DEVICE_LIST} = [ {'CarrierDisplayName': 'Sprint', 'Description': 'This has changed.', 'DeviceType': 'Other - Android', 'FixedDisplay': False, 'OrganizationID': 46663, 'PhoneNumber': 1201201212, 'SendInstallLink': Fa...</msg>
<status status="PASS" starttime="20200107 09:49:02.219" endtime="20200107 09:49:02.221"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_PUT_TEST_DEVICE_LIST}</arg>
</arguments>
<msg timestamp="20200107 09:49:02.221" level="TRACE">Arguments: [ '@{XRS_AWS_WEBSERVICE_PUT_TEST_DEVICE_LIST}' ]</msg>
<msg timestamp="20200107 09:49:02.221" level="INFO">@{XRS_AWS_WEBSERVICE_PUT_TEST_DEVICE_LIST} = [ {'CarrierDisplayName': 'Sprint', 'Description': 'This has changed.', 'DeviceType': 'Other - Android', 'FixedDisplay': False, 'OrganizationID': 46663, 'PhoneNumber': 1201201212, 'SendInstallLink': Fa...</msg>
<msg timestamp="20200107 09:49:02.221" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:02.221" endtime="20200107 09:49:02.221"></status>
</kw>
<msg timestamp="20200107 09:49:02.222" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:02.211" endtime="20200107 09:49:02.222"></status>
</kw>
<msg timestamp="20200107 09:49:02.222" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:02.208" endtime="20200107 09:49:02.222"></status>
</kw>
<test id="s1-s1-s1-t1" name="Validate AWS XRS Get Device REST Web Services Returns 400 Error">
<kw name="Get Device By Phone Number" library="Device">
<doc>Get device information for a particular device using the phone number</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_DEVICE_1.PhoneNumber}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:02.224" level="TRACE">Arguments: [ ${phone_number}=1201201212 ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Device}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_GET_DELETE_DEVICE_BY_NUMBER}/${phone_number}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:02.224" level="TRACE">Arguments: [ 'DeviceWebService.svc/device/1201201212' ]</msg>
<msg timestamp="20200107 09:49:02.224" level="TRACE">Return: 'DeviceWebService.svc/device/1201201212'</msg>
<msg timestamp="20200107 09:49:02.224" level="INFO">${uri} = DeviceWebService.svc/device/1201201212</msg>
<status status="PASS" starttime="20200107 09:49:02.224" endtime="20200107 09:49:02.224"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:02.224" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DeviceWebService.svc/device/1201201212' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:02.225" level="INFO">GET Request using : uri=DeviceWebService.svc/device/1201201212, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:02.226" level="DEBUG">Starting new HTTPS connection (1): d3ws.xataxrs.com:443</msg>
<msg timestamp="20200107 09:49:03.331" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /DeviceWebService.svc/device/1201201212 HTTP/1.1" 400 120</msg>
<msg timestamp="20200107 09:49:03.332" level="DEBUG">GET Response : status=400, reason=Bad Request
{"ErrorMessage":"The request failed to return any devices.","EventCode":3460453578429169664,"Parameters":["1201201212"]}</msg>
<msg timestamp="20200107 09:49:03.332" level="TRACE">Return: &lt;Response [400]&gt;</msg>
<msg timestamp="20200107 09:49:03.332" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:02.224" endtime="20200107 09:49:03.332"></status>
</kw>
<msg timestamp="20200107 09:49:03.332" level="TRACE">Return: &lt;Response [400]&gt;</msg>
<msg timestamp="20200107 09:49:03.332" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:02.223" endtime="20200107 09:49:03.332"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>400</arg>
</arguments>
<msg timestamp="20200107 09:49:03.333" level="TRACE">Arguments: [ 400 | '400' ]</msg>
<msg timestamp="20200107 09:49:03.333" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:03.333" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:03.333" endtime="20200107 09:49:03.333"></status>
</kw>
<doc>Verifies that a device with a specific number does not exist</doc>
<tags>
<tag>awsxrsdevicerestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:02.222" endtime="20200107 09:49:03.334" critical="yes"></status>
</test>
<test id="s1-s1-s1-t2" name="Validate AWS XRS Post Device REST Web Services Returns Code 201">
<kw name="Post Devices" library="Device">
<doc>Calls the Post Method on Devices.
Accepts a list of json objects
Json field definitions:
BelongsToResourceGroups
Indicates the set of ResourceGroupIDs to which the device belongs.
If a resource group is not provided in a Post call,
the new Device is to be placed in the default resource group for the organization to which the new Device is being added.
BluetoothAddress
Read only field indicating the Bluetooth address of the device.
For Windows Mobile devices and devices using Android 5.0 or earlier, this field displays the device's unique Bluetooth address.
For devices using Android 6.0 or later, this field displays a static value of "02:00:00:00:00:00."
CarrierDisplayName
The name of the Carrier.
CompanyName
A read only field that indicates the date and time the device was created.
CreateDate
A read only field that indicates the date and time the device was created.
Description
A description of the device.
DeviceType
Indicates the manufacturer and model of the device.
FixedDisplay
Indicates if this device will always be associated to a particular vehicle.
If set to true this will change the mobile behavior such that it remembers the last vehicle it was associated to.
IsChanged
A read only field indicating if there were any changes to the device since the value in the AsOfDateTime query parameter.
LastCommunication
A read only field indicating the date and time the device last communicated with the host.
LastDriverID
A read only field indicating the ID of the last driver which logged into the device.
LastDriverName
A read only field indicating the name of the last driver which logged into the device.
LastVehicleID
A read only field indicating the ID of the last vehicle to which the device was associated via Bluetooth.
ModifiedBy
A read only field indicating the ID of the last person to modify the driver record.
From AC: CreateDate, ModifiedDate and ModifiedBy data fields will be initialized by system.
ModifiedDate
A read only field indicating the date and time the device was last modified.
OrganizationID
The user-defined ID of the organization.
OrganizationName
A read-only field containing the name of the organization to which the device is assigned.
PhoneNumber
The 10 digit phone number of the device
SendInstallLink
Indicates if an installation link will be sent to the device.
Status
Identifies if a device is active or inactive in Omnitracs XRS. The value of this field must be Active or Inactive.
StoreGNISFileOnMobile
A read only field indicating whether the GNIS file will be stored on the mobile.
UserDefinedField1
User-defined field #1
UserDefinedField2
User-defined field #2
UserDefinedField3
User-defined field #3
UserDefinedField4
User-defined field #4
UserDefinedField5
User-defined field #5</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_POST_TEST_DEVICE_LIST}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:03.337" level="TRACE">Arguments: [ @{list_data}=[{'CarrierDisplayName': 'Sprint',
  'Description': 'Test Device 1',
  'DeviceType': 'Other - Android',
  'FixedDisplay': False,
  'OrganizationID': 46663,
  'PhoneNumber': 1201201212,
  'SendInstallLink': False,
  'Status': 'Active'}] ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Device}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DEVICES}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:03.338" level="TRACE">Arguments: [ 'DeviceWebService.svc/devices' ]</msg>
<msg timestamp="20200107 09:49:03.338" level="TRACE">Return: 'DeviceWebService.svc/devices'</msg>
<msg timestamp="20200107 09:49:03.338" level="INFO">${uri} = DeviceWebService.svc/devices</msg>
<status status="PASS" starttime="20200107 09:49:03.337" endtime="20200107 09:49:03.338"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>json=${list_data}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:03.338" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DeviceWebService.svc/devices' | json=[{'CarrierDisplayName': 'Sprint',
  'Description': 'Test Device 1',
  'DeviceType': 'Other - Android',
  'FixedDisplay': False,
  'OrganizationID': 46663,
  'PhoneNumber': 1201201212,
  'SendInstallLink': False,
  'Status': 'Active'}] | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:03.339" level="INFO">POST Request using : uri=DeviceWebService.svc/devices, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=[{'CarrierDisplayName': 'Sprint', 'Description': 'Test Device 1', 'DeviceType': 'Other - Android', 'FixedDisplay': False, 'OrganizationID': 46663, 'PhoneNumber': 1201201212, 'SendInstallLink': False, 'Status': 'Active'}]</msg>
<msg timestamp="20200107 09:49:04.541" level="DEBUG">https://d3ws.xataxrs.com:443 "POST /DeviceWebService.svc/devices HTTP/1.1" 200 150</msg>
<msg timestamp="20200107 09:49:04.543" level="DEBUG">POST Response : status=200, reason=OK
[{"Caption":"Created","Code":"201","Description":"Device added successfully.","Id":"1201201212","ObjectName":"Device","SID":0,"Title":"DeviceAdded."}]</msg>
<msg timestamp="20200107 09:49:04.543" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:04.544" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:03.338" endtime="20200107 09:49:04.544"></status>
</kw>
<msg timestamp="20200107 09:49:04.545" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:04.545" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:03.337" endtime="20200107 09:49:04.545"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20200107 09:49:04.549" level="TRACE">Arguments: [ b'[{"Caption":"Created","Code":"201","Description":"Device added successfully.","Id":"1201201212","ObjectName":"Device","SID":0,"Title":"DeviceAdded."}]' ]</msg>
<msg timestamp="20200107 09:49:04.549" level="INFO">To JSON using : content=[{"Caption":"Created","Code":"201","Description":"Device added successfully.","Id":"1201201212","ObjectName":"Device","SID":0,"Title":"DeviceAdded."}] </msg>
<msg timestamp="20200107 09:49:04.549" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20200107 09:49:04.549" level="TRACE">Return: [{'Caption': 'Created',
  'Code': '201',
  'Description': 'Device added successfully.',
  'Id': '1201201212',
  'ObjectName': 'Device',
  'SID': 0,
  'Title': 'DeviceAdded.'}]</msg>
<msg timestamp="20200107 09:49:04.550" level="INFO">${json_response} = [{'Caption': 'Created', 'Code': '201', 'Description': 'Device added successfully.', 'Id': '1201201212', 'ObjectName': 'Device', 'SID': 0, 'Title': 'DeviceAdded.'}]</msg>
<status status="PASS" starttime="20200107 09:49:04.548" endtime="20200107 09:49:04.550"></status>
</kw>
<kw name="${r} IN [ @{json_response} ]" type="for">
<kw name="${r} = {'Caption': 'Created', 'Code': '201', 'Description': 'Device added successfully.', 'Id': '1201201212', 'ObjectName': 'Device', 'SID': 0, 'Title': 'DeviceAdded.'}" type="foritem">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${r}[Code]</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20200107 09:49:04.553" level="TRACE">Arguments: [ '201' | '201' ]</msg>
<msg timestamp="20200107 09:49:04.553" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:04.554" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:04.553" endtime="20200107 09:49:04.554"></status>
</kw>
<status status="PASS" starttime="20200107 09:49:04.552" endtime="20200107 09:49:04.554"></status>
</kw>
<status status="PASS" starttime="20200107 09:49:04.552" endtime="20200107 09:49:04.554"></status>
</kw>
<doc>Posts a device and expects a Code value of 201</doc>
<tags>
<tag>awsxrsdevicerestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:03.335" endtime="20200107 09:49:04.555" critical="yes"></status>
</test>
<test id="s1-s1-s1-t3" name="Validate AWS XRS Get Device REST Web Services Returns 200 OK">
<kw name="Get Device By Phone Number" library="Device">
<doc>Get device information for a particular device using the phone number</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_DEVICE_1.PhoneNumber}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:04.561" level="TRACE">Arguments: [ ${phone_number}=1201201212 ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Device}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_GET_DELETE_DEVICE_BY_NUMBER}/${phone_number}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:04.562" level="TRACE">Arguments: [ 'DeviceWebService.svc/device/1201201212' ]</msg>
<msg timestamp="20200107 09:49:04.562" level="TRACE">Return: 'DeviceWebService.svc/device/1201201212'</msg>
<msg timestamp="20200107 09:49:04.563" level="INFO">${uri} = DeviceWebService.svc/device/1201201212</msg>
<status status="PASS" starttime="20200107 09:49:04.561" endtime="20200107 09:49:04.563"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:04.563" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DeviceWebService.svc/device/1201201212' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:04.564" level="INFO">GET Request using : uri=DeviceWebService.svc/device/1201201212, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:05.224" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /DeviceWebService.svc/device/1201201212 HTTP/1.1" 200 720</msg>
<msg timestamp="20200107 09:49:05.226" level="DEBUG">GET Response : status=200, reason=OK
{"BelongsToDeviceResourceGroups":["Gnome Shipping D3"],"BluetoothAddress":"00:00:00:00:00:00","CarrierDisplayName":"Sprint","CompanyName":"Gnome Shipping D3","CreateDate":"1\/7\/2020 3:48:36 PM","Description":"Test Device 1","DeviceType":"Other - Android","FixedDisplay":"False","IsChanged":"False","LastCommunication":"","LastDriverID":"","LastDriverName":"","LastVehicleID":"","ModifiedBy":"5412","ModifiedDate":"1\/7\/2020 3:48:36 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PhoneNumber":"1201201212","SendInstallLink":"False","Status":"Active","StoreGNISFileOnMobile":"False","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""}</msg>
<msg timestamp="20200107 09:49:05.227" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:05.227" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:04.563" endtime="20200107 09:49:05.227"></status>
</kw>
<msg timestamp="20200107 09:49:05.228" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:05.229" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:04.560" endtime="20200107 09:49:05.229"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:05.233" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:05.234" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:05.234" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:05.232" endtime="20200107 09:49:05.234"></status>
</kw>
<doc>Verifies that a posted device now exists</doc>
<tags>
<tag>awsxrsdevicerestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:04.558" endtime="20200107 09:49:05.235" critical="yes"></status>
</test>
<test id="s1-s1-s1-t4" name="Validate AWS XRS Put Device REST Web Services Modifies Description Successfully">
<kw name="Put Devices" library="Device">
<doc>Calls the Put Method on Devices.
Accepts a list of json objects
See Json field definitions in the "Post Devices" Keyword</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_PUT_TEST_DEVICE_LIST}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:05.242" level="TRACE">Arguments: [ @{list_data}=[{'CarrierDisplayName': 'Sprint',
  'Description': 'This has changed.',
  'DeviceType': 'Other - Android',
  'FixedDisplay': False,
  'OrganizationID': 46663,
  'PhoneNumber': 1201201212,
  'SendInstallLink': False,
  'Status': 'Active'}] ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Device}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DEVICES}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:05.243" level="TRACE">Arguments: [ 'DeviceWebService.svc/devices' ]</msg>
<msg timestamp="20200107 09:49:05.243" level="TRACE">Return: 'DeviceWebService.svc/devices'</msg>
<msg timestamp="20200107 09:49:05.244" level="INFO">${uri} = DeviceWebService.svc/devices</msg>
<status status="PASS" starttime="20200107 09:49:05.242" endtime="20200107 09:49:05.244"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary">
<doc>Send a PUT request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>json=${list_data}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:05.244" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DeviceWebService.svc/devices' | json=[{'CarrierDisplayName': 'Sprint',
  'Description': 'This has changed.',
  'DeviceType': 'Other - Android',
  'FixedDisplay': False,
  'OrganizationID': 46663,
  'PhoneNumber': 1201201212,
  'SendInstallLink': False,
  'Status': 'Active'}] | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:05.245" level="INFO">PUT Request using : uri=DeviceWebService.svc/devices, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=[{'CarrierDisplayName': 'Sprint', 'Description': 'This has changed.', 'DeviceType': 'Other - Android', 'FixedDisplay': False, 'OrganizationID': 46663, 'PhoneNumber': 1201201212, 'SendInstallLink': False, 'Status': 'Active'}]</msg>
<msg timestamp="20200107 09:49:07.703" level="DEBUG">https://d3ws.xataxrs.com:443 "PUT /DeviceWebService.svc/devices HTTP/1.1" 200 193</msg>
<msg timestamp="20200107 09:49:07.704" level="DEBUG">PUT Response : status=200, reason=OK
[{"Caption":"Device edited successfully.","Code":"200","Description":"Device edited successfully.","Id":"1201201212","ObjectName":"Device edited successfully.","SID":0,"Title":"DeviceEdited."}]</msg>
<msg timestamp="20200107 09:49:07.704" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:07.704" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:05.244" endtime="20200107 09:49:07.704"></status>
</kw>
<msg timestamp="20200107 09:49:07.704" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:07.705" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:05.241" endtime="20200107 09:49:07.705"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20200107 09:49:07.707" level="TRACE">Arguments: [ b'[{"Caption":"Device edited successfully.","Code":"200","Description":"Device edited successfully.","Id":"1201201212","ObjectName":"Device edited successfully.","SID":0,"Title":"DeviceEdited."}]' ]</msg>
<msg timestamp="20200107 09:49:07.707" level="INFO">To JSON using : content=[{"Caption":"Device edited successfully.","Code":"200","Description":"Device edited successfully.","Id":"1201201212","ObjectName":"Device edited successfully.","SID":0,"Title":"DeviceEdited."}] </msg>
<msg timestamp="20200107 09:49:07.707" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20200107 09:49:07.707" level="TRACE">Return: [{'Caption': 'Device edited successfully.',
  'Code': '200',
  'Description': 'Device edited successfully.',
  'Id': '1201201212',
  'ObjectName': 'Device edited successfully.',
  'SID': 0,
  'Title': 'DeviceEdited.'}]</msg>
<msg timestamp="20200107 09:49:07.708" level="INFO">${json_response} = [{'Caption': 'Device edited successfully.', 'Code': '200', 'Description': 'Device edited successfully.', 'Id': '1201201212', 'ObjectName': 'Device edited successfully.', 'SID': 0, 'Title': 'DeviceEdit...</msg>
<status status="PASS" starttime="20200107 09:49:07.706" endtime="20200107 09:49:07.708"></status>
</kw>
<kw name="${r} IN [ @{json_response} ]" type="for">
<kw name="${r} = {'Caption': 'Device edited successfully.', 'Code': '200', 'Description': 'Device edited successfully.', 'Id': '1201201212', 'ObjectName': 'Device edited successfully.', 'SID': 0, 'Title': 'DeviceEdite..." type="foritem">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${r}[Description]</arg>
<arg>Device edited successfully.</arg>
</arguments>
<msg timestamp="20200107 09:49:07.711" level="TRACE">Arguments: [ 'Device edited successfully.' | 'Device edited successfully.' ]</msg>
<msg timestamp="20200107 09:49:07.711" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:07.711" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:07.710" endtime="20200107 09:49:07.712"></status>
</kw>
<status status="PASS" starttime="20200107 09:49:07.710" endtime="20200107 09:49:07.712"></status>
</kw>
<status status="PASS" starttime="20200107 09:49:07.709" endtime="20200107 09:49:07.712"></status>
</kw>
<doc>Posts a device and expects a Code value of 201</doc>
<tags>
<tag>awsxrsdevicerestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:05.239" endtime="20200107 09:49:07.713" critical="yes"></status>
</test>
<test id="s1-s1-s1-t5" name="Validate AWS XRS Get Devices REST Web Services Returns 200 OK">
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:49:07.719" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:49:07.720" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:49:07.720" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:49:07.720" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:49:07.720" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:49:07.719" endtime="20200107 09:49:07.720"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:49:07.722" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:49:07.723" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20200107 09:49:07.724" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:49:07.722" endtime="20200107 09:49:07.724"></status>
</kw>
<kw name="Verify Get Devices With Forward Slash Returns 200 OK">
<doc>Verify that using a '/' in the URI returns 200 OK</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<msg timestamp="20200107 09:49:07.725" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/</arg>
</arguments>
<assign>
<var>${ending_character}</var>
</assign>
<msg timestamp="20200107 09:49:07.726" level="TRACE">Arguments: [ '/' ]</msg>
<msg timestamp="20200107 09:49:07.726" level="TRACE">Return: '/'</msg>
<msg timestamp="20200107 09:49:07.726" level="INFO">${ending_character} = /</msg>
<status status="PASS" starttime="20200107 09:49:07.726" endtime="20200107 09:49:07.726"></status>
</kw>
<kw name="Get Devices With URI Ending With ${ending_character} And Parameters &amp;{params}" library="Device">
<doc>This Keyword modifies character between the base uri and the parameters
This will get devices that match the provided parameters.
Params can be named individually or within a Dictionary
See the Get Devices Keyword for param definitions.</doc>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:07.728" level="TRACE">Arguments: [ ${ending_character}='/' | ${params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Device}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DEVICES}${ending_character}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:07.729" level="TRACE">Arguments: [ 'DeviceWebService.svc/devices/' ]</msg>
<msg timestamp="20200107 09:49:07.729" level="TRACE">Return: 'DeviceWebService.svc/devices/'</msg>
<msg timestamp="20200107 09:49:07.730" level="INFO">${uri} = DeviceWebService.svc/devices/</msg>
<status status="PASS" starttime="20200107 09:49:07.728" endtime="20200107 09:49:07.730"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:07.730" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DeviceWebService.svc/devices/' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} | params={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<msg timestamp="20200107 09:49:07.731" level="INFO">GET Request using : uri=DeviceWebService.svc/devices/, params={'OrganizationID': 46663, 'IsActive': 'True', 'AsOfDateTime': '01/07/2020'}, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:08.367" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /DeviceWebService.svc/devices/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01%2F07%2F2020 HTTP/1.1" 200 726</msg>
<msg timestamp="20200107 09:49:08.369" level="DEBUG">GET Response : status=200, reason=OK
[{"BelongsToDeviceResourceGroups":["Gnome Shipping D3"],"BluetoothAddress":"00:00:00:00:00:00","CarrierDisplayName":"Sprint","CompanyName":"Gnome Shipping D3","CreateDate":"1\/7\/2020 3:48:36 PM","Description":"This has changed.","DeviceType":"Other - Android","FixedDisplay":"False","IsChanged":"False","LastCommunication":"","LastDriverID":"","LastDriverName":"","LastVehicleID":"","ModifiedBy":"5412","ModifiedDate":"1\/7\/2020 3:48:37 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PhoneNumber":"1201201212","SendInstallLink":"False","Status":"Active","StoreGNISFileOnMobile":"False","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""}]</msg>
<msg timestamp="20200107 09:49:08.369" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:08.370" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:07.730" endtime="20200107 09:49:08.370"></status>
</kw>
<msg timestamp="20200107 09:49:08.371" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:08.371" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:07.727" endtime="20200107 09:49:08.371"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:08.373" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:08.374" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:08.374" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:08.372" endtime="20200107 09:49:08.375"></status>
</kw>
<msg timestamp="20200107 09:49:08.375" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:07.725" endtime="20200107 09:49:08.375"></status>
</kw>
<kw name="Verify Get Devices Without Forward Slash Returns 200 OK">
<doc>Verify that not using a '/' in the URI returns 200 OK</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<msg timestamp="20200107 09:49:08.379" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Get Devices" library="Device">
<doc>Call the Get Method on Devices.
This will get devices that match the provided parameters.
Params can be named individually or within a Dictionary
Param Definitions:
AsOfDateTime
Tells the service to return only the data that changed since the specified date and time.
IsActive
Filters results to active drivers only.
Valid Values: True False Both
Limit
Used in conjunction with the Offset parameter to implement paging.
Limits the number of results to a specified number.
System Limit: 10,000
Offset
Used in conjunction with the Limit parameter to implement paging.
Represents a page number for the starting point of the return set.
OrganizationID
Limits results to devices in one or more organizations.
PhoneNumber
The following values can be specified:
[No Filter] - Limits results to all device records within the Web Service users' OrganizationID and ResourceGroupID.
10 character phone number - Limits results to the device record within the Web Service users' OrganizationID and ResourceGroupID
Example value: 1234567890
ResourceGroupID
Limits results to devices in one or more resource groups.</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:08.381" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Device}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DEVICES}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:08.382" level="TRACE">Arguments: [ 'DeviceWebService.svc/devices' ]</msg>
<msg timestamp="20200107 09:49:08.382" level="TRACE">Return: 'DeviceWebService.svc/devices'</msg>
<msg timestamp="20200107 09:49:08.383" level="INFO">${uri} = DeviceWebService.svc/devices</msg>
<status status="PASS" starttime="20200107 09:49:08.381" endtime="20200107 09:49:08.383"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:08.384" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DeviceWebService.svc/devices' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} | params={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<msg timestamp="20200107 09:49:08.384" level="INFO">GET Request using : uri=DeviceWebService.svc/devices, params={'OrganizationID': 46663, 'IsActive': 'True', 'AsOfDateTime': '01/07/2020'}, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:08.901" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /DeviceWebService.svc/devices?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01%2F07%2F2020 HTTP/1.1" 200 726</msg>
<msg timestamp="20200107 09:49:08.903" level="DEBUG">GET Response : status=200, reason=OK
[{"BelongsToDeviceResourceGroups":["Gnome Shipping D3"],"BluetoothAddress":"00:00:00:00:00:00","CarrierDisplayName":"Sprint","CompanyName":"Gnome Shipping D3","CreateDate":"1\/7\/2020 3:48:36 PM","Description":"This has changed.","DeviceType":"Other - Android","FixedDisplay":"False","IsChanged":"False","LastCommunication":"","LastDriverID":"","LastDriverName":"","LastVehicleID":"","ModifiedBy":"5412","ModifiedDate":"1\/7\/2020 3:48:37 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PhoneNumber":"1201201212","SendInstallLink":"False","Status":"Active","StoreGNISFileOnMobile":"False","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""}]</msg>
<msg timestamp="20200107 09:49:08.904" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:08.904" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:08.383" endtime="20200107 09:49:08.905"></status>
</kw>
<msg timestamp="20200107 09:49:08.905" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:08.906" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:08.380" endtime="20200107 09:49:08.906"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:08.908" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:08.908" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:08.909" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:08.907" endtime="20200107 09:49:08.909"></status>
</kw>
<msg timestamp="20200107 09:49:08.909" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:08.378" endtime="20200107 09:49:08.909"></status>
</kw>
<doc>Get devices with basic parameters</doc>
<tags>
<tag>awsxrsdevicerestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:07.717" endtime="20200107 09:49:08.911" critical="yes"></status>
</test>
<test id="s1-s1-s1-t6" name="Validate AWS XRS Get Devices REST Web Services Returns 200 OK With Raw String URI">
<kw name="Verify Get Devices Raw String URI With /? Returns 200 OK">
<doc>Verify that using the given character string in the raw URI string returns 200 OK</doc>
<msg timestamp="20200107 09:49:08.916" level="TRACE">Arguments: [ ${character_string}='/?' ]</msg>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:49:08.917" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:49:08.918" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:49:08.918" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:49:08.918" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:49:08.919" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:49:08.917" endtime="20200107 09:49:08.919"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:49:08.919" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:49:08.920" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20200107 09:49:08.920" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:49:08.919" endtime="20200107 09:49:08.920"></status>
</kw>
<kw name="Create URI String With" library="URIStringBuilderTool">
<doc>Helper Keyword to construct the request uri with different character strings
base_uri = webservice uri
request_type = request extension for the webservice
character_string = final character of the uri. i.e. /, /?, etc ...</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Device}</arg>
<arg>${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DEVICES}</arg>
<arg>${character_string}</arg>
</arguments>
<assign>
<var>${uri_string}</var>
</assign>
<msg timestamp="20200107 09:49:08.921" level="TRACE">Arguments: [ ${base_uri}='DeviceWebService.svc' | ${request_type}='/devices' | ${character_string}='/?' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${base_uri}${request_type}${character_string}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:08.922" level="TRACE">Arguments: [ 'DeviceWebService.svc/devices/?' ]</msg>
<msg timestamp="20200107 09:49:08.922" level="TRACE">Return: 'DeviceWebService.svc/devices/?'</msg>
<msg timestamp="20200107 09:49:08.922" level="INFO">${uri} = DeviceWebService.svc/devices/?</msg>
<status status="PASS" starttime="20200107 09:49:08.921" endtime="20200107 09:49:08.922"></status>
</kw>
<msg timestamp="20200107 09:49:08.922" level="TRACE">Return: 'DeviceWebService.svc/devices/?'</msg>
<msg timestamp="20200107 09:49:08.922" level="INFO">${uri_string} = DeviceWebService.svc/devices/?</msg>
<status status="PASS" starttime="20200107 09:49:08.921" endtime="20200107 09:49:08.922"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${uri_string}OrganizationID=${params.OrganizationID}&amp;IsActive=${params.IsActive}&amp;AsOfDateTime=${params.AsOfDateTime}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:08.923" level="TRACE">Arguments: [ 'DeviceWebService.svc/devices/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' ]</msg>
<msg timestamp="20200107 09:49:08.923" level="TRACE">Return: 'DeviceWebService.svc/devices/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020'</msg>
<msg timestamp="20200107 09:49:08.923" level="INFO">${uri} = DeviceWebService.svc/devices/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020</msg>
<status status="PASS" starttime="20200107 09:49:08.923" endtime="20200107 09:49:08.924"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:08.924" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DeviceWebService.svc/devices/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:08.924" level="INFO">GET Request using : uri=DeviceWebService.svc/devices/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:09.516" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /DeviceWebService.svc/devices/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020 HTTP/1.1" 200 726</msg>
<msg timestamp="20200107 09:49:09.518" level="DEBUG">GET Response : status=200, reason=OK
[{"BelongsToDeviceResourceGroups":["Gnome Shipping D3"],"BluetoothAddress":"00:00:00:00:00:00","CarrierDisplayName":"Sprint","CompanyName":"Gnome Shipping D3","CreateDate":"1\/7\/2020 3:48:36 PM","Description":"This has changed.","DeviceType":"Other - Android","FixedDisplay":"False","IsChanged":"False","LastCommunication":"","LastDriverID":"","LastDriverName":"","LastVehicleID":"","ModifiedBy":"5412","ModifiedDate":"1\/7\/2020 3:48:37 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PhoneNumber":"1201201212","SendInstallLink":"False","Status":"Active","StoreGNISFileOnMobile":"False","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""}]</msg>
<msg timestamp="20200107 09:49:09.518" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:09.519" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:08.924" endtime="20200107 09:49:09.519"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:09.521" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:09.522" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:09.522" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:09.520" endtime="20200107 09:49:09.522"></status>
</kw>
<msg timestamp="20200107 09:49:09.523" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:08.916" endtime="20200107 09:49:09.523"></status>
</kw>
<kw name="Verify Get Devices Raw String URI With ? Returns 200 OK">
<doc>Verify that using the given character string in the raw URI string returns 200 OK</doc>
<msg timestamp="20200107 09:49:09.525" level="TRACE">Arguments: [ ${character_string}='?' ]</msg>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:49:09.526" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:49:09.527" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:49:09.527" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:49:09.527" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:49:09.527" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:49:09.526" endtime="20200107 09:49:09.527"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:49:09.528" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:49:09.529" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20200107 09:49:09.529" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:49:09.528" endtime="20200107 09:49:09.529"></status>
</kw>
<kw name="Create URI String With" library="URIStringBuilderTool">
<doc>Helper Keyword to construct the request uri with different character strings
base_uri = webservice uri
request_type = request extension for the webservice
character_string = final character of the uri. i.e. /, /?, etc ...</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Device}</arg>
<arg>${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DEVICES}</arg>
<arg>${character_string}</arg>
</arguments>
<assign>
<var>${uri_string}</var>
</assign>
<msg timestamp="20200107 09:49:09.531" level="TRACE">Arguments: [ ${base_uri}='DeviceWebService.svc' | ${request_type}='/devices' | ${character_string}='?' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${base_uri}${request_type}${character_string}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:09.531" level="TRACE">Arguments: [ 'DeviceWebService.svc/devices?' ]</msg>
<msg timestamp="20200107 09:49:09.532" level="TRACE">Return: 'DeviceWebService.svc/devices?'</msg>
<msg timestamp="20200107 09:49:09.532" level="INFO">${uri} = DeviceWebService.svc/devices?</msg>
<status status="PASS" starttime="20200107 09:49:09.531" endtime="20200107 09:49:09.532"></status>
</kw>
<msg timestamp="20200107 09:49:09.532" level="TRACE">Return: 'DeviceWebService.svc/devices?'</msg>
<msg timestamp="20200107 09:49:09.532" level="INFO">${uri_string} = DeviceWebService.svc/devices?</msg>
<status status="PASS" starttime="20200107 09:49:09.530" endtime="20200107 09:49:09.532"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${uri_string}OrganizationID=${params.OrganizationID}&amp;IsActive=${params.IsActive}&amp;AsOfDateTime=${params.AsOfDateTime}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:09.533" level="TRACE">Arguments: [ 'DeviceWebService.svc/devices?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' ]</msg>
<msg timestamp="20200107 09:49:09.533" level="TRACE">Return: 'DeviceWebService.svc/devices?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020'</msg>
<msg timestamp="20200107 09:49:09.534" level="INFO">${uri} = DeviceWebService.svc/devices?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020</msg>
<status status="PASS" starttime="20200107 09:49:09.532" endtime="20200107 09:49:09.534"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:09.534" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DeviceWebService.svc/devices?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:09.535" level="INFO">GET Request using : uri=DeviceWebService.svc/devices?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:10.077" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /DeviceWebService.svc/devices?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020 HTTP/1.1" 200 726</msg>
<msg timestamp="20200107 09:49:10.079" level="DEBUG">GET Response : status=200, reason=OK
[{"BelongsToDeviceResourceGroups":["Gnome Shipping D3"],"BluetoothAddress":"00:00:00:00:00:00","CarrierDisplayName":"Sprint","CompanyName":"Gnome Shipping D3","CreateDate":"1\/7\/2020 3:48:36 PM","Description":"This has changed.","DeviceType":"Other - Android","FixedDisplay":"False","IsChanged":"False","LastCommunication":"","LastDriverID":"","LastDriverName":"","LastVehicleID":"","ModifiedBy":"5412","ModifiedDate":"1\/7\/2020 3:48:37 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PhoneNumber":"1201201212","SendInstallLink":"False","Status":"Active","StoreGNISFileOnMobile":"False","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""}]</msg>
<msg timestamp="20200107 09:49:10.080" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:10.080" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:09.534" endtime="20200107 09:49:10.080"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:10.083" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:10.084" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:10.084" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:10.081" endtime="20200107 09:49:10.084"></status>
</kw>
<msg timestamp="20200107 09:49:10.085" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:09.525" endtime="20200107 09:49:10.085"></status>
</kw>
<doc>Get devices with basic parameters using a raw URI string</doc>
<tags>
<tag>awsxrsdevicerestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:08.915" endtime="20200107 09:49:10.087" critical="yes"></status>
</test>
<test id="s1-s1-s1-t7" name="Validate AWS XRS Get Devices REST Web Services For All Devices Returns 200 OK">
<kw name="Get All Devices" library="Device">
<doc>Get attributes for all Devices.</doc>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:10.097" level="TRACE">Arguments: [  ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Device}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DEVICES}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:10.098" level="TRACE">Arguments: [ 'DeviceWebService.svc/devices' ]</msg>
<msg timestamp="20200107 09:49:10.098" level="TRACE">Return: 'DeviceWebService.svc/devices'</msg>
<msg timestamp="20200107 09:49:10.098" level="INFO">${uri} = DeviceWebService.svc/devices</msg>
<status status="PASS" starttime="20200107 09:49:10.097" endtime="20200107 09:49:10.099"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:10.099" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DeviceWebService.svc/devices' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:10.100" level="INFO">GET Request using : uri=DeviceWebService.svc/devices, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:10.810" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /DeviceWebService.svc/devices HTTP/1.1" 200 2965</msg>
<msg timestamp="20200107 09:49:10.812" level="DEBUG">GET Response : status=200, reason=OK
[{"BelongsToDeviceResourceGroups":["Gnome Shipping D3"],"BluetoothAddress":"00:00:00:00:00:00","CarrierDisplayName":"Sprint","CompanyName":"Gnome Shipping D3","CreateDate":"1\/7\/2020 3:48:36 PM","Description":"This has changed.","DeviceType":"Other - Android","FixedDisplay":"False","IsChanged":"False","LastCommunication":"","LastDriverID":"","LastDriverName":"","LastVehicleID":"","ModifiedBy":"5412","ModifiedDate":"1\/7\/2020 3:48:37 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PhoneNumber":"1201201212","SendInstallLink":"False","Status":"Active","StoreGNISFileOnMobile":"False","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""},{"BelongsToDeviceResourceGroups":["Gnome Shipping D3"],"BluetoothAddress":"00:00:00:00:00:00","CarrierDisplayName":"Other","CompanyName":"Gnome Shipping D3","CreateDate":"4\/19\/2019 10:19:30 PM","Description":"Gnomelet","DeviceType":"Samsung Galaxy Tab","FixedDisplay":"False","IsChanged":"False","LastCommunication":"11\/25\/2019 10:54:59 PM","LastDriverID":"","LastDriverName":"","LastVehicleID":"","ModifiedBy":"5685","ModifiedDate":"11\/26\/2019 5:29:39 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PhoneNumber":"9522227832","SendInstallLink":"False","Status":"Active","StoreGNISFileOnMobile":"True","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""},{"BelongsToDeviceResourceGroups":null,"BluetoothAddress":"00:00:00:00:00:00","CarrierDisplayName":"Sprint","CompanyName":"Gnome Shipping D3","CreateDate":"4\/17\/2019 3:58:01 PM","Description":"Kelby Oreo Cell","DeviceType":"Samsung J7 Perx","FixedDisplay":"False","IsChanged":"False","LastCommunication":"8\/9\/2019 5:12:44 PM","LastDriverID":"tomte1","LastDriverName":"Gnome1 Stine","LastVehicleID":"GnomeHauler1","ModifiedBy":"0","ModifiedDate":"8\/9\/2019 5:08:41 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PhoneNumber":"9523569618","SendInstallLink":"False","Status":"Active","StoreGNISFileOnMobile":"True","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""},{"BelongsToDeviceResourceGroups":null,"BluetoothAddress":"78:F7:BE:72:8E:A2","CarrierDisplayName":"AT&amp;T","CompanyName":"Gnome Shipping D3","CreateDate":"9\/27\/2018 2:09:12 PM","Description":"KelbyNote","DeviceType":"Samsung Galaxy Note","FixedDisplay":"False","IsChanged":"False","LastCommunication":"2\/26\/2019 7:47:03 PM","LastDriverID":"tomte1","LastDriverName":"Gnome1 Stine","LastVehicleID":"","ModifiedBy":"0","ModifiedDate":"2\/26\/2019 7:25:59 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PhoneNumber":"9522583922","SendInstallLink":"False","Status":"Active","StoreGNISFileOnMobile":"True","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""}]</msg>
<msg timestamp="20200107 09:49:10.812" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:10.813" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:10.099" endtime="20200107 09:49:10.813"></status>
</kw>
<msg timestamp="20200107 09:49:10.814" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:10.814" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:10.096" endtime="20200107 09:49:10.815"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:10.818" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:10.819" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:10.819" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:10.817" endtime="20200107 09:49:10.820"></status>
</kw>
<doc>Gets all the Devices</doc>
<tags>
<tag>awsxrsdevicerestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>xrsawsperftest</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:10.094" endtime="20200107 09:49:10.822" critical="yes"></status>
</test>
<test id="s1-s1-s1-t8" name="Validate AWS XRS Delete Device REST Web Services Returns 200 OK">
<kw name="Delete Device By Phone Number" library="Device">
<doc>Delete device information for a particular device using the phone number</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_DEVICE_1.PhoneNumber}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:10.835" level="TRACE">Arguments: [ ${phone_number}=1201201212 ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Device}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_GET_DELETE_DEVICE_BY_NUMBER}/${phone_number}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:10.837" level="TRACE">Arguments: [ 'DeviceWebService.svc/device/1201201212' ]</msg>
<msg timestamp="20200107 09:49:10.837" level="TRACE">Return: 'DeviceWebService.svc/device/1201201212'</msg>
<msg timestamp="20200107 09:49:10.837" level="INFO">${uri} = DeviceWebService.svc/device/1201201212</msg>
<status status="PASS" starttime="20200107 09:49:10.836" endtime="20200107 09:49:10.837"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:10.839" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DeviceWebService.svc/device/1201201212' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:10.839" level="INFO">DELETE Request using : uri=DeviceWebService.svc/device/1201201212, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:12.562" level="DEBUG">https://d3ws.xataxrs.com:443 "DELETE /DeviceWebService.svc/device/1201201212 HTTP/1.1" 200 153</msg>
<msg timestamp="20200107 09:49:12.564" level="DEBUG">DELETE Response : status=200, reason=OK
{"Caption":"Deleted.","Code":"200","Description":"Device deleted successfully.","Id":"1201201212","ObjectName":"Device","SID":0,"Title":"DeviceDeleted."}</msg>
<msg timestamp="20200107 09:49:12.564" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:12.565" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:10.838" endtime="20200107 09:49:12.565"></status>
</kw>
<msg timestamp="20200107 09:49:12.565" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:12.566" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:10.833" endtime="20200107 09:49:12.566"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:12.569" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:12.570" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:12.570" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:12.568" endtime="20200107 09:49:12.571"></status>
</kw>
<doc>Verifies that created device is deleted</doc>
<tags>
<tag>awsxrsdevicerestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:10.830" endtime="20200107 09:49:12.573" critical="yes"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary" type="teardown">
<doc>Removes all the session objects</doc>
<msg timestamp="20200107 09:49:12.580" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200107 09:49:12.580" level="INFO">Delete All Sessions</msg>
<msg timestamp="20200107 09:49:12.580" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:12.580" endtime="20200107 09:49:12.581"></status>
</kw>
<doc>Fundamental suite to test XRS AWS Device Entity Management Web Services</doc>
<status status="PASS" starttime="20200107 09:49:02.008" endtime="20200107 09:49:12.581"></status>
</suite>
<suite id="s1-s1-s2" name="Validate AWSXRSDriverWebServices" source="C:\Users\kstine\git\aws-api-gateway-tests\Tests\AWS_XRS_WebServicesTests\02__Validate AWSXRSDriverWebServices.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Create AWS XRS Web Services Session</arg>
<arg>AND</arg>
<arg>Test Data Setup For XRS AWS Driver Web Service Test Suite</arg>
</arguments>
<msg timestamp="20200107 09:49:12.672" level="TRACE">Arguments: [ 'Create AWS XRS Web Services Session' | 'AND' | 'Test Data Setup For XRS AWS Driver Web Service Test Suite' ]</msg>
<kw name="Create AWS XRS Web Services Session" library="XRSCommonWebService">
<doc>Create a session with aws xrs web services</doc>
<msg timestamp="20200107 09:49:12.672" level="TRACE">Arguments: [  ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${XRS_AWS_WEBSERVICES_URL}[${XRS_HOST_ENVIRONMENT}]</arg>
<arg>verify=True</arg>
<arg>auth=${XRS_WEBSERVICES_AUTHORIZATION}</arg>
</arguments>
<msg timestamp="20200107 09:49:12.672" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'https://d3ws.xataxrs.com' | verify=True | auth=['GnomeShippingD3|admin', 'xrs123'] ]</msg>
<msg timestamp="20200107 09:49:12.673" level="INFO">Creating Session using : alias=xrs_web_service_session, url=https://d3ws.xataxrs.com, headers={},                     cookies={}, auth=&lt;requests.auth.HTTPBasicAuth object at 0x0000018E38245880&gt;, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<msg timestamp="20200107 09:49:12.673" level="DEBUG">Creating session: xrs_web_service_session</msg>
<msg timestamp="20200107 09:49:12.673" level="DEBUG">Argument types are:
&lt;class 'bool'&gt;</msg>
<msg timestamp="20200107 09:49:12.673" level="TRACE">Return: &lt;requests.sessions.Session object at 0x0000018E3825BD60&gt;</msg>
<status status="PASS" starttime="20200107 09:49:12.672" endtime="20200107 09:49:12.673"></status>
</kw>
<msg timestamp="20200107 09:49:12.673" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:12.672" endtime="20200107 09:49:12.673"></status>
</kw>
<kw name="Test Data Setup For XRS AWS Driver Web Service Test Suite">
<doc>Keyword for setting up suite variables for AWS Driver Web Service Tests.</doc>
<msg timestamp="20200107 09:49:12.673" level="TRACE">Arguments: [  ]</msg>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>CDLNumber=${XRS_WEB_SERVICES_TEST_DRIVER_1.CDLNumber}</arg>
<arg>DriverID=${XRS_WEB_SERVICES_TEST_DRIVER_1.DriverID}</arg>
<arg>DefaultHOSRule=${XRS_WEB_SERVICES_TEST_DRIVER_1.DefaultHOSRule}</arg>
<arg>ELDExempt=${XRS_WEB_SERVICES_TEST_DRIVER_1.ELDExempt}</arg>
<arg>EnableBigDay=${XRS_WEB_SERVICES_TEST_DRIVER_1.EnableBigDay}</arg>
<arg>EnableDriverPortal=${XRS_WEB_SERVICES_TEST_DRIVER_1.EnableDriverPortal}</arg>
<arg>EnableHOSRule=${XRS_WEB_SERVICES_TEST_DRIVER_1.EnableHOSRule}</arg>
<arg>EnablePersonalConveyance=${XRS_WEB_SERVICES_TEST_DRIVER_1.EnablePersonalConveyance}</arg>
<arg>EnableTimeClock=${XRS_WEB_SERVICES_TEST_DRIVER_1.EnableTimeClock}</arg>
<arg>EnableYardMove=${XRS_WEB_SERVICES_TEST_DRIVER_1.EnableYardMove}</arg>
<arg>FirstName=${XRS_WEB_SERVICES_TEST_DRIVER_1.FirstName}</arg>
<arg>Language=${XRS_WEB_SERVICES_TEST_DRIVER_1.Language}</arg>
<arg>LastName=${XRS_WEB_SERVICES_TEST_DRIVER_1.LastName}</arg>
<arg>LicenseIssuingCountry=${XRS_WEB_SERVICES_TEST_DRIVER_1.LicenseIssuingCountry}</arg>
<arg>LicenseIssuingStateProvince=${XRS_WEB_SERVICES_TEST_DRIVER_1.LicenseIssuingStateProvince}</arg>
<arg>MiddleName=${XRS_WEB_SERVICES_TEST_DRIVER_1.MiddleName}</arg>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>OrganizationSID=${XRS_WEB_SERVICES_TEST_DRIVER_1.OrganizationSID}</arg>
<arg>Password=${XRS_WEB_SERVICES_TEST_DRIVER_1.Password}</arg>
<arg>SendInboundMessageTo=${XRS_WEB_SERVICES_TEST_DRIVER_1.SendInboundMessageTo}</arg>
<arg>SID=${XRS_WEB_SERVICES_TEST_DRIVER_1.SID}</arg>
<arg>Status=${XRS_WEB_SERVICES_TEST_DRIVER_1.Status}</arg>
<arg>UseHOSOrganizationSettings=${XRS_WEB_SERVICES_TEST_DRIVER_1.UseHOSOrganizationSettings}</arg>
<arg>UserName=${XRS_WEB_SERVICES_TEST_DRIVER_1.UserName}</arg>
</arguments>
<assign>
<var>&amp;{XRS_AWS_WEBSERVICE_POST_TEST_DRIVER_1_DICT}</var>
</assign>
<msg timestamp="20200107 09:49:12.674" level="TRACE">Arguments: [ 'CDLNumber=${XRS_WEB_SERVICES_TEST_DRIVER_1.CDLNumber}' | 'DriverID=${XRS_WEB_SERVICES_TEST_DRIVER_1.DriverID}' | 'DefaultHOSRule=${XRS_WEB_SERVICES_TEST_DRIVER_1.DefaultHOSRule}' | 'ELDExempt=${XRS_WEB_SERVICES_TEST_DRIVER_1.ELDExempt}' | 'EnableBigDay=${XRS_WEB_SERVICES_TEST_DRIVER_1.EnableBigDay}' | 'EnableDriverPortal=${XRS_WEB_SERVICES_TEST_DRIVER_1.EnableDriverPortal}' | 'EnableHOSRule=${XRS_WEB_SERVICES_TEST_DRIVER_1.EnableHOSRule}' | 'EnablePersonalConveyance=${XRS_WEB_SERVICES_TEST_DRIVER_1.EnablePersonalConveyance}' | 'EnableTimeClock=${XRS_WEB_SERVICES_TEST_DRIVER_1.EnableTimeClock}' | 'EnableYardMove=${XRS_WEB_SERVICES_TEST_DRIVER_1.EnableYardMove}' | 'FirstName=${XRS_WEB_SERVICES_TEST_DRIVER_1.FirstName}' | 'Language=${XRS_WEB_SERVICES_TEST_DRIVER_1.Language}' | 'LastName=${XRS_WEB_SERVICES_TEST_DRIVER_1.LastName}' | 'LicenseIssuingCountry=${XRS_WEB_SERVICES_TEST_DRIVER_1.LicenseIssuingCountry}' | 'LicenseIssuingStateProvince=${XRS_WEB_SERVICES_TEST_DRIVER_1.LicenseIssuingStateProvince}' | 'MiddleName=${XRS_WEB_SERVICES_TEST_DRIVER_1.MiddleName}' | 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'OrganizationSID=${XRS_WEB_SERVICES_TEST_DRIVER_1.OrganizationSID}' | 'Password=${XRS_WEB_SERVICES_TEST_DRIVER_1.Password}' | 'SendInboundMessageTo=${XRS_WEB_SERVICES_TEST_DRIVER_1.SendInboundMessageTo}' | 'SID=${XRS_WEB_SERVICES_TEST_DRIVER_1.SID}' | 'Status=${XRS_WEB_SERVICES_TEST_DRIVER_1.Status}' | 'UseHOSOrganizationSettings=${XRS_WEB_SERVICES_TEST_DRIVER_1.UseHOSOrganizationSettings}' | 'UserName=${XRS_WEB_SERVICES_TEST_DRIVER_1.UserName}' ]</msg>
<msg timestamp="20200107 09:49:12.676" level="TRACE">Return: {'CDLNumber': 'awsxrstestdriver1234',
 'DefaultHOSRule': None,
 'DriverID': 'awsxrstestdriver1',
 'ELDExempt': False,
 'EnableBigDay': True,
 'EnableDriverPortal': True,
 'EnableHOSRule': '',
 'EnablePersonalConveyance': False,
 'EnableTimeClock': False,
 'EnableYardMove': False,
 'FirstName': 'AWSXRS',
 'Language': 'English',
 'LastName': 'Testdriver1',
 'LicenseIssuingCountry': 'USA',
 'LicenseIssuingStateProvince': 'Minnesota',
 'MiddleName': 'AWSXRSTest',
 'OrganizationID': 46663,
 'OrganizationSID': 0,
 'Password': 123456,
 'SID': 0,
 'SendInboundMessageTo': 0,
 'Status': 'Active',
 'UseHOSOrganizationSettings': True,
 'UserName': 'awsxrstestdriver1'}</msg>
<msg timestamp="20200107 09:49:12.677" level="INFO">&amp;{XRS_AWS_WEBSERVICE_POST_TEST_DRIVER_1_DICT} = { CDLNumber=awsxrstestdriver1234 | DriverID=awsxrstestdriver1 | DefaultHOSRule=None | ELDExempt=False | EnableBigDay=True | EnableDriverPortal=True | EnableHOSRule= | EnablePersonalConveyance=False | ...</msg>
<status status="PASS" starttime="20200107 09:49:12.673" endtime="20200107 09:49:12.677"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${XRS_AWS_WEBSERVICE_POST_TEST_DRIVER_1_DICT}</arg>
</arguments>
<assign>
<var>@{XRS_AWS_WEBSERVICE_POST_TEST_DRIVER_LIST}</var>
</assign>
<msg timestamp="20200107 09:49:12.677" level="TRACE">Arguments: [ {'CDLNumber': 'awsxrstestdriver1234',
 'DefaultHOSRule': None,
 'DriverID': 'awsxrstestdriver1',
 'ELDExempt': False,
 'EnableBigDay': True,
 'EnableDriverPortal': True,
 'EnableHOSRule': '',
 'EnablePersonalConveyance': False,
 'EnableTimeClock': False,
 'EnableYardMove': False,
 'FirstName': 'AWSXRS',
 'Language': 'English',
 'LastName': 'Testdriver1',
 'LicenseIssuingCountry': 'USA',
 'LicenseIssuingStateProvince': 'Minnesota',
 'MiddleName': 'AWSXRSTest',
 'OrganizationID': 46663,
 'OrganizationSID': 0,
 'Password': 123456,
 'SID': 0,
 'SendInboundMessageTo': 0,
 'Status': 'Active',
 'UseHOSOrganizationSettings': True,
 'UserName': 'awsxrstestdriver1'} ]</msg>
<msg timestamp="20200107 09:49:12.677" level="TRACE">Return: [{'CDLNumber': 'awsxrstestdriver1234',
  'DefaultHOSRule': None,
  'DriverID': 'awsxrstestdriver1',
  'ELDExempt': False,
  'EnableBigDay': True,
  'EnableDriverPortal': True,
  'EnableHOSRule': '',
  'EnablePersonalConveyance': False,
  'EnableTimeClock': False,
  'EnableYardMove': False,
  'FirstName': 'AWSXRS',
  'Language': 'English',
  'LastName': 'Testdriver1',
  'LicenseIssuingCountry': 'USA',
  'LicenseIssuingStateProvince': 'Minnesota',
  'MiddleName': 'AWSXRSTest',
  'OrganizationID': 46663,
  'OrganizationSID': 0,
  'Password': 123456,
  'SID': 0,
  'SendInboundMessageTo': 0,
  'Status': 'Active',
  'UseHOSOrganizationSettings': True,
  'UserName': 'awsxrstestdriver1'}]</msg>
<msg timestamp="20200107 09:49:12.678" level="INFO">@{XRS_AWS_WEBSERVICE_POST_TEST_DRIVER_LIST} = [ {'CDLNumber': 'awsxrstestdriver1234', 'DriverID': 'awsxrstestdriver1', 'DefaultHOSRule': None, 'ELDExempt': False, 'EnableBigDay': True, 'EnableDriverPortal': True, 'EnableHOSRule': '', 'EnablePerso...</msg>
<status status="PASS" starttime="20200107 09:49:12.677" endtime="20200107 09:49:12.678"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_POST_TEST_DRIVER_LIST}</arg>
</arguments>
<msg timestamp="20200107 09:49:12.678" level="TRACE">Arguments: [ '@{XRS_AWS_WEBSERVICE_POST_TEST_DRIVER_LIST}' ]</msg>
<msg timestamp="20200107 09:49:12.678" level="INFO">@{XRS_AWS_WEBSERVICE_POST_TEST_DRIVER_LIST} = [ {'CDLNumber': 'awsxrstestdriver1234', 'DriverID': 'awsxrstestdriver1', 'DefaultHOSRule': None, 'ELDExempt': False, 'EnableBigDay': True, 'EnableDriverPortal': True, 'EnableHOSRule': '', 'EnablePerso...</msg>
<msg timestamp="20200107 09:49:12.678" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:12.678" endtime="20200107 09:49:12.678"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>DriverID=${XRS_WEB_SERVICES_TEST_DRIVER_1.DriverID}</arg>
<arg>DefaultHOSRule=${XRS_WEB_SERVICES_TEST_DRIVER_1.DefaultHOSRule}</arg>
<arg>ELDExempt=${XRS_WEB_SERVICES_TEST_DRIVER_1.ELDExempt}</arg>
<arg>EnableBigDay=${XRS_WEB_SERVICES_TEST_DRIVER_1.EnableBigDay}</arg>
<arg>EnableDriverPortal=${XRS_WEB_SERVICES_TEST_DRIVER_1.EnableDriverPortal}</arg>
<arg>EnableHOSRule=${XRS_WEB_SERVICES_TEST_DRIVER_1.EnableHOSRule}</arg>
<arg>EnablePersonalConveyance=${XRS_WEB_SERVICES_TEST_DRIVER_1.EnablePersonalConveyance}</arg>
<arg>EnableTimeClock=${XRS_WEB_SERVICES_TEST_DRIVER_1.EnableTimeClock}</arg>
<arg>EnableYardMove=${XRS_WEB_SERVICES_TEST_DRIVER_1.EnableYardMove}</arg>
<arg>FirstName=${XRS_WEB_SERVICES_TEST_DRIVER_1.FirstName}</arg>
<arg>Language=${XRS_WEB_SERVICES_TEST_DRIVER_1.Language}</arg>
<arg>LastName=${XRS_WEB_SERVICES_TEST_DRIVER_1.LastName}</arg>
<arg>LicenseIssuingCountry=${XRS_WEB_SERVICES_TEST_DRIVER_1.LicenseIssuingCountry}</arg>
<arg>LicenseIssuingStateProvince=${XRS_WEB_SERVICES_TEST_DRIVER_1.LicenseIssuingStateProvince}</arg>
<arg>MiddleName=This has been changed.</arg>
<arg>OrganizationSID=${XRS_WEB_SERVICES_TEST_DRIVER_1.OrganizationSID}</arg>
<arg>SendInboundMessageTo=${XRS_WEB_SERVICES_TEST_DRIVER_1.SendInboundMessageTo}</arg>
<arg>SID=${XRS_WEB_SERVICES_TEST_DRIVER_1.SID}</arg>
<arg>Status=${XRS_WEB_SERVICES_TEST_DRIVER_1.Status}</arg>
<arg>UseHOSOrganizationSettings=${XRS_WEB_SERVICES_TEST_DRIVER_1.UseHOSOrganizationSettings}</arg>
<arg>UserName=${XRS_WEB_SERVICES_TEST_DRIVER_1.UserName}</arg>
</arguments>
<assign>
<var>&amp;{XRS_AWS_WEBSERVICE_PUT_TEST_DRIVER_1_DICT}</var>
</assign>
<msg timestamp="20200107 09:49:12.678" level="TRACE">Arguments: [ 'DriverID=${XRS_WEB_SERVICES_TEST_DRIVER_1.DriverID}' | 'DefaultHOSRule=${XRS_WEB_SERVICES_TEST_DRIVER_1.DefaultHOSRule}' | 'ELDExempt=${XRS_WEB_SERVICES_TEST_DRIVER_1.ELDExempt}' | 'EnableBigDay=${XRS_WEB_SERVICES_TEST_DRIVER_1.EnableBigDay}' | 'EnableDriverPortal=${XRS_WEB_SERVICES_TEST_DRIVER_1.EnableDriverPortal}' | 'EnableHOSRule=${XRS_WEB_SERVICES_TEST_DRIVER_1.EnableHOSRule}' | 'EnablePersonalConveyance=${XRS_WEB_SERVICES_TEST_DRIVER_1.EnablePersonalConveyance}' | 'EnableTimeClock=${XRS_WEB_SERVICES_TEST_DRIVER_1.EnableTimeClock}' | 'EnableYardMove=${XRS_WEB_SERVICES_TEST_DRIVER_1.EnableYardMove}' | 'FirstName=${XRS_WEB_SERVICES_TEST_DRIVER_1.FirstName}' | 'Language=${XRS_WEB_SERVICES_TEST_DRIVER_1.Language}' | 'LastName=${XRS_WEB_SERVICES_TEST_DRIVER_1.LastName}' | 'LicenseIssuingCountry=${XRS_WEB_SERVICES_TEST_DRIVER_1.LicenseIssuingCountry}' | 'LicenseIssuingStateProvince=${XRS_WEB_SERVICES_TEST_DRIVER_1.LicenseIssuingStateProvince}' | 'MiddleName=This has been changed.' | 'OrganizationSID=${XRS_WEB_SERVICES_TEST_DRIVER_1.OrganizationSID}' | 'SendInboundMessageTo=${XRS_WEB_SERVICES_TEST_DRIVER_1.SendInboundMessageTo}' | 'SID=${XRS_WEB_SERVICES_TEST_DRIVER_1.SID}' | 'Status=${XRS_WEB_SERVICES_TEST_DRIVER_1.Status}' | 'UseHOSOrganizationSettings=${XRS_WEB_SERVICES_TEST_DRIVER_1.UseHOSOrganizationSettings}' | 'UserName=${XRS_WEB_SERVICES_TEST_DRIVER_1.UserName}' ]</msg>
<msg timestamp="20200107 09:49:12.681" level="TRACE">Return: {'DefaultHOSRule': None,
 'DriverID': 'awsxrstestdriver1',
 'ELDExempt': False,
 'EnableBigDay': True,
 'EnableDriverPortal': True,
 'EnableHOSRule': '',
 'EnablePersonalConveyance': False,
 'EnableTimeClock': False,
 'EnableYardMove': False,
 'FirstName': 'AWSXRS',
 'Language': 'English',
 'LastName': 'Testdriver1',
 'LicenseIssuingCountry': 'USA',
 'LicenseIssuingStateProvince': 'Minnesota',
 'MiddleName': 'This has been changed.',
 'OrganizationSID': 0,
 'SID': 0,
 'SendInboundMessageTo': 0,
 'Status': 'Active',
 'UseHOSOrganizationSettings': True,
 'UserName': 'awsxrstestdriver1'}</msg>
<msg timestamp="20200107 09:49:12.681" level="INFO">&amp;{XRS_AWS_WEBSERVICE_PUT_TEST_DRIVER_1_DICT} = { DriverID=awsxrstestdriver1 | DefaultHOSRule=None | ELDExempt=False | EnableBigDay=True | EnableDriverPortal=True | EnableHOSRule= | EnablePersonalConveyance=False | EnableTimeClock=False | EnableYar...</msg>
<status status="PASS" starttime="20200107 09:49:12.678" endtime="20200107 09:49:12.681"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${XRS_AWS_WEBSERVICE_PUT_TEST_DRIVER_1_DICT}</arg>
</arguments>
<assign>
<var>@{XRS_AWS_WEBSERVICE_PUT_TEST_DRIVER_LIST}</var>
</assign>
<msg timestamp="20200107 09:49:12.681" level="TRACE">Arguments: [ {'DefaultHOSRule': None,
 'DriverID': 'awsxrstestdriver1',
 'ELDExempt': False,
 'EnableBigDay': True,
 'EnableDriverPortal': True,
 'EnableHOSRule': '',
 'EnablePersonalConveyance': False,
 'EnableTimeClock': False,
 'EnableYardMove': False,
 'FirstName': 'AWSXRS',
 'Language': 'English',
 'LastName': 'Testdriver1',
 'LicenseIssuingCountry': 'USA',
 'LicenseIssuingStateProvince': 'Minnesota',
 'MiddleName': 'This has been changed.',
 'OrganizationSID': 0,
 'SID': 0,
 'SendInboundMessageTo': 0,
 'Status': 'Active',
 'UseHOSOrganizationSettings': True,
 'UserName': 'awsxrstestdriver1'} ]</msg>
<msg timestamp="20200107 09:49:12.682" level="TRACE">Return: [{'DefaultHOSRule': None,
  'DriverID': 'awsxrstestdriver1',
  'ELDExempt': False,
  'EnableBigDay': True,
  'EnableDriverPortal': True,
  'EnableHOSRule': '',
  'EnablePersonalConveyance': False,
  'EnableTimeClock': False,
  'EnableYardMove': False,
  'FirstName': 'AWSXRS',
  'Language': 'English',
  'LastName': 'Testdriver1',
  'LicenseIssuingCountry': 'USA',
  'LicenseIssuingStateProvince': 'Minnesota',
  'MiddleName': 'This has been changed.',
  'OrganizationSID': 0,
  'SID': 0,
  'SendInboundMessageTo': 0,
  'Status': 'Active',
  'UseHOSOrganizationSettings': True,
  'UserName': 'awsxrstestdriver1'}]</msg>
<msg timestamp="20200107 09:49:12.682" level="INFO">@{XRS_AWS_WEBSERVICE_PUT_TEST_DRIVER_LIST} = [ {'DriverID': 'awsxrstestdriver1', 'DefaultHOSRule': None, 'ELDExempt': False, 'EnableBigDay': True, 'EnableDriverPortal': True, 'EnableHOSRule': '', 'EnablePersonalConveyance': False, 'EnableTimeClo...</msg>
<status status="PASS" starttime="20200107 09:49:12.681" endtime="20200107 09:49:12.682"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_PUT_TEST_DRIVER_LIST}</arg>
</arguments>
<msg timestamp="20200107 09:49:12.683" level="TRACE">Arguments: [ '@{XRS_AWS_WEBSERVICE_PUT_TEST_DRIVER_LIST}' ]</msg>
<msg timestamp="20200107 09:49:12.683" level="INFO">@{XRS_AWS_WEBSERVICE_PUT_TEST_DRIVER_LIST} = [ {'DriverID': 'awsxrstestdriver1', 'DefaultHOSRule': None, 'ELDExempt': False, 'EnableBigDay': True, 'EnableDriverPortal': True, 'EnableHOSRule': '', 'EnablePersonalConveyance': False, 'EnableTimeClo...</msg>
<msg timestamp="20200107 09:49:12.683" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:12.682" endtime="20200107 09:49:12.683"></status>
</kw>
<msg timestamp="20200107 09:49:12.683" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:12.673" endtime="20200107 09:49:12.683"></status>
</kw>
<msg timestamp="20200107 09:49:12.683" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:12.671" endtime="20200107 09:49:12.683"></status>
</kw>
<test id="s1-s1-s2-t1" name="Validate AWS XRS Get Driver REST Web Services Returns 400 Error">
<kw name="Get Driver By ID" library="Driver">
<doc>Get attributes for a specific driver by specifying a DriverSID value.</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_DRIVER_1.DriverID}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:12.684" level="TRACE">Arguments: [ ${driver_id}='awsxrstestdriver1' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Driver}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_GET_DELETE_DRIVER_BY_DRIVERID}/${driver_id}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:12.685" level="TRACE">Arguments: [ 'DriverWebService.svc/driver/awsxrstestdriver1' ]</msg>
<msg timestamp="20200107 09:49:12.685" level="TRACE">Return: 'DriverWebService.svc/driver/awsxrstestdriver1'</msg>
<msg timestamp="20200107 09:49:12.685" level="INFO">${uri} = DriverWebService.svc/driver/awsxrstestdriver1</msg>
<status status="PASS" starttime="20200107 09:49:12.684" endtime="20200107 09:49:12.685"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:12.685" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DriverWebService.svc/driver/awsxrstestdriver1' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:12.685" level="INFO">GET Request using : uri=DriverWebService.svc/driver/awsxrstestdriver1, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:12.687" level="DEBUG">Starting new HTTPS connection (1): d3ws.xataxrs.com:443</msg>
<msg timestamp="20200107 09:49:13.388" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /DriverWebService.svc/driver/awsxrstestdriver1 HTTP/1.1" 400 117</msg>
<msg timestamp="20200107 09:49:13.389" level="DEBUG">GET Response : status=400, reason=Bad Request
{"ErrorMessage":"Driver identity does not exist.","EventCode":3459609110549364736,"Parameters":["awsxrstestdriver1"]}</msg>
<msg timestamp="20200107 09:49:13.389" level="TRACE">Return: &lt;Response [400]&gt;</msg>
<msg timestamp="20200107 09:49:13.389" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:12.685" endtime="20200107 09:49:13.389"></status>
</kw>
<msg timestamp="20200107 09:49:13.389" level="TRACE">Return: &lt;Response [400]&gt;</msg>
<msg timestamp="20200107 09:49:13.389" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:12.684" endtime="20200107 09:49:13.389"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>400</arg>
</arguments>
<msg timestamp="20200107 09:49:13.390" level="TRACE">Arguments: [ 400 | '400' ]</msg>
<msg timestamp="20200107 09:49:13.390" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:13.391" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:13.390" endtime="20200107 09:49:13.391"></status>
</kw>
<doc>Verifies that a driver with a specific number does not exist</doc>
<tags>
<tag>awsxrsdriverrestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:12.683" endtime="20200107 09:49:13.391" critical="yes"></status>
</test>
<test id="s1-s1-s2-t2" name="Validate AWS XRS Post Driver REST Web Services Returns Code 201">
<kw name="Post Drivers" library="Driver">
<doc>Calls the Post Method for Drivers.
Accepts a list of json objects
Json field definitions:
CDLExpiration
The date at which the current CDL expires.
CDLNumber
The Commercial Driver's License held by the driver.
This field supports a maximum of 20 characters.
CellPhone
The Mobile phone number of the driver.
NOTE: This phone number is not required to be the same as the phone number of the device being used for Omnitracs XRS.
CompanyName
The name of the Company.
CompanySID
The Omnitracs XRS unique System ID of the company.
This value is generated automatically by Omnitracs XRS and can be retrieved using the GET method.
CreateDate
The date and time the account was created.
The value of this field is Read Only and cannot be modified using PUT or POST commands.
DefaultHOSRule
The DefaultHOSRule value of the appropriate HOS rule set.
DriverID
The user-defined driver ID.
ELDExempt
This field indicates if the driver is exempt from the ELD mandate.
This field is required for POST and PUT calls.
ELDExemptExplanation
If the ELDExempt field is set to True, this field is required and must contain an explanation as to why this driver is exempt from the ELD mandate.
This field is required if &lt;ELDExempt&gt; is True.
EnableBigDay
Indicates if the driver is allowed to declare a 16-Hour Big Day exemption
EnableDriverPortal
Indicates if the driver is allowed to login to the driver portal
EnableHOSRule</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_POST_TEST_DRIVER_LIST}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:13.394" level="TRACE">Arguments: [ @{list_data}=[{'CDLNumber': 'awsxrstestdriver1234',
  'DefaultHOSRule': None,
  'DriverID': 'awsxrstestdriver1',
  'ELDExempt': False,
  'EnableBigDay': True,
  'EnableDriverPortal': True,
  'EnableHOSRule': '',
  'EnablePersonalConveyance': False,
  'EnableTimeClock': False,
  'EnableYardMove': False,
  'FirstName': 'AWSXRS',
  'Language': 'English',
  'LastName': 'Testdriver1',
  'LicenseIssuingCountry': 'USA',
  'LicenseIssuingStateProvince': 'Minnesota',
  'MiddleName': 'AWSXRSTest',
  'OrganizationID': 46663,
  'OrganizationSID': 0,
  'Password': 123456,
  'SID': 0,
  'SendInboundMessageTo': 0,
  'Status': 'Active',
  'UseHOSOrganizationSettings': True,
  'UserName': 'awsxrstestdriver1'}] ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Driver}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_DRIVERS}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:13.395" level="TRACE">Arguments: [ 'DriverWebService.svc/drivers' ]</msg>
<msg timestamp="20200107 09:49:13.395" level="TRACE">Return: 'DriverWebService.svc/drivers'</msg>
<msg timestamp="20200107 09:49:13.395" level="INFO">${uri} = DriverWebService.svc/drivers</msg>
<status status="PASS" starttime="20200107 09:49:13.395" endtime="20200107 09:49:13.395"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>json=${list_data}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:13.396" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DriverWebService.svc/drivers' | json=[{'CDLNumber': 'awsxrstestdriver1234',
  'DefaultHOSRule': None,
  'DriverID': 'awsxrstestdriver1',
  'ELDExempt': False,
  'EnableBigDay': True,
  'EnableDriverPortal': True,
  'EnableHOSRule': '',
  'EnablePersonalConveyance': False,
  'EnableTimeClock': False,
  'EnableYardMove': False,
  'FirstName': 'AWSXRS',
  'Language': 'English',
  'LastName': 'Testdriver1',
  'LicenseIssuingCountry': 'USA',
  'LicenseIssuingStateProvince': 'Minnesota',
  'MiddleName': 'AWSXRSTest',
  'OrganizationID': 46663,
  'OrganizationSID': 0,
  'Password': 123456,
  'SID': 0,
  'SendInboundMessageTo': 0,
  'Status': 'Active',
  'UseHOSOrganizationSettings': True,
  'UserName': 'awsxrstestdriver1'}] | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:13.396" level="INFO">POST Request using : uri=DriverWebService.svc/drivers, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=[{'CDLNumber': 'awsxrstestdriver1234', 'DriverID': 'awsxrstestdriver1', 'DefaultHOSRule': None, 'ELDExempt': False, 'EnableBigDay': True, 'EnableDriverPortal': True, 'EnableHOSRule': '', 'EnablePersonalConveyance': False, 'EnableTimeClock': False, 'EnableYardMove': False, 'FirstName': 'AWSXRS', 'Language': 'English', 'LastName': 'Testdriver1', 'LicenseIssuingCountry': 'USA', 'LicenseIssuingStateProvince': 'Minnesota', 'MiddleName': 'AWSXRSTest', 'OrganizationID': 46663, 'OrganizationSID': 0, 'Password': 123456, 'SendInboundMessageTo': 0, 'SID': 0, 'Status': 'Active', 'UseHOSOrganizationSettings': True, 'UserName': 'awsxrstestdriver1'}]</msg>
<msg timestamp="20200107 09:49:15.442" level="DEBUG">https://d3ws.xataxrs.com:443 "POST /DriverWebService.svc/drivers HTTP/1.1" 200 160</msg>
<msg timestamp="20200107 09:49:15.444" level="DEBUG">POST Response : status=200, reason=OK
[{"Caption":"Created","Code":"201","Description":"Driver added successfully.","Id":"awsxrstestdriver1","ObjectName":"Driver","SID":5741,"Title":"DriverAdded."}]</msg>
<msg timestamp="20200107 09:49:15.445" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:15.445" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:13.396" endtime="20200107 09:49:15.446"></status>
</kw>
<msg timestamp="20200107 09:49:15.446" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:15.447" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:13.394" endtime="20200107 09:49:15.447"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20200107 09:49:15.451" level="TRACE">Arguments: [ b'[{"Caption":"Created","Code":"201","Description":"Driver added successfully.","Id":"awsxrstestdriver1","ObjectName":"Driver","SID":5741,"Title":"DriverAdded."}]' ]</msg>
<msg timestamp="20200107 09:49:15.451" level="INFO">To JSON using : content=[{"Caption":"Created","Code":"201","Description":"Driver added successfully.","Id":"awsxrstestdriver1","ObjectName":"Driver","SID":5741,"Title":"DriverAdded."}] </msg>
<msg timestamp="20200107 09:49:15.452" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20200107 09:49:15.452" level="TRACE">Return: [{'Caption': 'Created',
  'Code': '201',
  'Description': 'Driver added successfully.',
  'Id': 'awsxrstestdriver1',
  'ObjectName': 'Driver',
  'SID': 5741,
  'Title': 'DriverAdded.'}]</msg>
<msg timestamp="20200107 09:49:15.453" level="INFO">${json_response} = [{'Caption': 'Created', 'Code': '201', 'Description': 'Driver added successfully.', 'Id': 'awsxrstestdriver1', 'ObjectName': 'Driver', 'SID': 5741, 'Title': 'DriverAdded.'}]</msg>
<status status="PASS" starttime="20200107 09:49:15.449" endtime="20200107 09:49:15.453"></status>
</kw>
<kw name="${r} IN [ @{json_response} ]" type="for">
<kw name="${r} = {'Caption': 'Created', 'Code': '201', 'Description': 'Driver added successfully.', 'Id': 'awsxrstestdriver1', 'ObjectName': 'Driver', 'SID': 5741, 'Title': 'DriverAdded.'}" type="foritem">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${r}[Code]</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20200107 09:49:15.456" level="TRACE">Arguments: [ '201' | '201' ]</msg>
<msg timestamp="20200107 09:49:15.456" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:15.456" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:15.455" endtime="20200107 09:49:15.456"></status>
</kw>
<status status="PASS" starttime="20200107 09:49:15.455" endtime="20200107 09:49:15.457"></status>
</kw>
<status status="PASS" starttime="20200107 09:49:15.454" endtime="20200107 09:49:15.457"></status>
</kw>
<doc>Posts a driver and expects a Code value of 201</doc>
<tags>
<tag>awsxrsdriverrestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:13.393" endtime="20200107 09:49:15.459" critical="yes"></status>
</test>
<test id="s1-s1-s2-t3" name="Validate AWS XRS Get Driver REST Web Services Returns 200 OK">
<kw name="Get Driver By ID" library="Driver">
<doc>Get attributes for a specific driver by specifying a DriverSID value.</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_DRIVER_1.DriverID}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:15.465" level="TRACE">Arguments: [ ${driver_id}='awsxrstestdriver1' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Driver}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_GET_DELETE_DRIVER_BY_DRIVERID}/${driver_id}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:15.466" level="TRACE">Arguments: [ 'DriverWebService.svc/driver/awsxrstestdriver1' ]</msg>
<msg timestamp="20200107 09:49:15.467" level="TRACE">Return: 'DriverWebService.svc/driver/awsxrstestdriver1'</msg>
<msg timestamp="20200107 09:49:15.467" level="INFO">${uri} = DriverWebService.svc/driver/awsxrstestdriver1</msg>
<status status="PASS" starttime="20200107 09:49:15.465" endtime="20200107 09:49:15.467"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:15.467" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DriverWebService.svc/driver/awsxrstestdriver1' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:15.468" level="INFO">GET Request using : uri=DriverWebService.svc/driver/awsxrstestdriver1, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:15.952" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /DriverWebService.svc/driver/awsxrstestdriver1 HTTP/1.1" 200 1375</msg>
<msg timestamp="20200107 09:49:15.954" level="DEBUG">GET Response : status=200, reason=OK
{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"awsxrstestdriver1234","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1578440926517-0800)\/","DefaultHOSRule":null,"DriverID":"awsxrstestdriver1","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"AWSXRS","HomeTelephone":"","Language":"English","LastLogin":"\/Date(-62135568000000-0800)\/","LastName":"Testdriver1","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"AWSXRSTest","ModifiedBy":5412,"ModifiedDate":"\/Date(1578440926153-0800)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":["Gnome Shipping D3"],"SID":5741,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"awsxrstestdriver1"}</msg>
<msg timestamp="20200107 09:49:15.955" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:15.955" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:15.467" endtime="20200107 09:49:15.955"></status>
</kw>
<msg timestamp="20200107 09:49:15.956" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:15.957" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:15.464" endtime="20200107 09:49:15.957"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:15.961" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:15.961" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:15.962" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:15.959" endtime="20200107 09:49:15.962"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20200107 09:49:15.965" level="TRACE">Arguments: [ b'{"CDLExpiration":"\\/Date(-62135568000000-0800)\\/","CDLNumber":"awsxrstestdriver1234","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\\/Date(1578440926517-0800)\\/","DefaultHOSRule":null,"DriverID":"awsxrstestdriver1","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"AWSXRS","HomeTelephone":"","Language":"English","LastLogin":"\\/Date(-62135568000000-0800)\\/","LastName":"Testdriver1","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\\/Date(-62135568000000-0800)\\/","MiddleName":"AWSXRSTest","ModifiedBy":5412,"ModifiedDate":"\\/Date(1578440926153-0800)\\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":["Gnome Shipping D3"],"SID":5741,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"awsxrstestdriver1"}' ]</msg>
<msg timestamp="20200107 09:49:15.965" level="INFO">To JSON using : content={"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"awsxrstestdriver1234","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1578440926517-0800)\/","DefaultHOSRule":null,"DriverID":"awsxrstestdriver1","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"AWSXRS","HomeTelephone":"","Language":"English","LastLogin":"\/Date(-62135568000000-0800)\/","LastName":"Testdriver1","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"AWSXRSTest","ModifiedBy":5412,"ModifiedDate":"\/Date(1578440926153-0800)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":["Gnome Shipping D3"],"SID":5741,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"awsxrstestdriver1"} </msg>
<msg timestamp="20200107 09:49:15.965" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20200107 09:49:15.965" level="TRACE">Return: {'CDLExpiration': '/Date(-62135568000000-0800)/',
 'CDLNumber': 'awsxrstestdriver1234',
 'CellPhone': '',
 'CompanyName': 'Gnome Shipping D3',
 'CompanySID': 2340,
 'CreateDate': '/Date(1578440926517-0800)/',
 'DefaultHOSRule': None,
 'DriverID': 'awsxrstestdriver1',
 'ELDExempt': False,
 'ELDExemptExplanation': None,
 'ELDExemptVehicleInspection': 'UseOrganizationSetting',
 'EnableBigDay': False,
 'EnableDriverPortal': True,
 'EnableHOSRule': '',
 'EnablePersonalConveyance': False,
 'EnableTimeClock': False,
 'EnableYardMove': False,
 'Endorsements': '',
 'FirstName': 'AWSXRS',
 'HomeTelephone': '',
 'Language': 'English',
 'LastLogin': '/Date(-62135568000000-0800)/',
 'LastName': 'Testdriver1',
 'LicenseIssuingCountry': 'USA',
 'LicenseIssuingStateProvince': 'Minnesota',
 'MaxConveyanceDistance': 0,
 'MedicalExp': '/Date(-62135568000000-0800)/',
 'MiddleName': 'AWSXRSTest',
 'ModifiedBy': 5412,
 'ModifiedDate': '/Date(1578440926153-0800)/',
 'OrganizationID': '46663',
 'OrganizationName': 'Gnome Shipping D3',
 'OrganizationSID': 414,
 'Password': 'E1ADC3949BA59ABBE56E057F2F883E',
 'PayrollOrganizationSID': 0,
 'PayrollSID': 0,
 'ResourceGroupIDList': ['Gnome Shipping D3'],
 'SID': 5741,
 'SendInboundMessageTo': 357,
 'SendInboundMessageToID': 'Gnome Shipping D3',
 'Status': 'Active',
 'UseHOSOrganizationSettings': True,
 'UserDefinedField1': '',
 'UserDefinedField2': '',
 'UserDefinedField3': '',
 'UserDefinedField4': '',
 'UserDefinedField5': '',
 'UserName': 'awsxrstestdriver1'}</msg>
<msg timestamp="20200107 09:49:15.968" level="INFO">${json_response} = {'CDLExpiration': '/Date(-62135568000000-0800)/', 'CDLNumber': 'awsxrstestdriver1234', 'CellPhone': '', 'CompanyName': 'Gnome Shipping D3', 'CompanySID': 2340, 'CreateDate': '/Date(1578440926517-0800)...</msg>
<status status="PASS" starttime="20200107 09:49:15.964" endtime="20200107 09:49:15.968"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${json_response}[SID]</arg>
</arguments>
<assign>
<var>${XRS_WEB_SERVICES_TEST_DRIVER_1_SID}</var>
</assign>
<msg timestamp="20200107 09:49:15.969" level="TRACE">Arguments: [ 5741 ]</msg>
<msg timestamp="20200107 09:49:15.969" level="TRACE">Return: 5741</msg>
<msg timestamp="20200107 09:49:15.969" level="INFO">${XRS_WEB_SERVICES_TEST_DRIVER_1_SID} = 5741</msg>
<status status="PASS" starttime="20200107 09:49:15.969" endtime="20200107 09:49:15.971"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_DRIVER_1_SID}</arg>
</arguments>
<msg timestamp="20200107 09:49:15.972" level="TRACE">Arguments: [ '${XRS_WEB_SERVICES_TEST_DRIVER_1_SID}' ]</msg>
<msg timestamp="20200107 09:49:15.972" level="INFO">${XRS_WEB_SERVICES_TEST_DRIVER_1_SID} = 5741</msg>
<msg timestamp="20200107 09:49:15.972" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:15.971" endtime="20200107 09:49:15.972"></status>
</kw>
<doc>Verifies that a posted driver now exists</doc>
<tags>
<tag>awsxrsdriverrestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:15.462" endtime="20200107 09:49:15.973" critical="yes"></status>
</test>
<test id="s1-s1-s2-t4" name="Validate AWS XRS Put Driver REST Web Services Modifies Driver Successfully">
<kw name="Put Drivers" library="Driver">
<doc>Calls the Put Method for Drivers.
Accepts a list of json objects
Json field definitions:
CDLExpiration
The date at which the current CDL expires.
CDLNumber
The Commercial Driver's License held by the driver.
This field supports a maximum of 20 characters.
Omnitracs XRS 4.60 will prevent the creation of more than one driver record with the same driver’s license number &lt;CDLNumber&gt;.
To support this change, the Driver Web Service will return an error message if a PUT or
POST call is made that attempts to assign a driver’s license number &lt;CDLNumber&gt; to a driver
when that same number is already assigned to a different driver.
CellPhone
The Mobile phone number of the driver.
NOTE: This phone number is not required to be the same as the phone number of the device being used for Omnitracs XRS.
CompanyName
The name of the Company.
CompanySID
The Omnitracs XRS unique System ID of the company.
This value is generated automatically by Omnitracs XRS and can be retrieved using the GET method.
CreateDate
The date and time the account was created.
The value of this field is Read Only and cannot be modified using PUT or POST commands.
DriverID
The user-defined driver ID.
ELDExempt
This field indicates if the driver is exempt from the ELD mandate.
This field is required for POST and PUT calls.
ELDExemptExplanation
If the ELDExempt field is set to True, this field is required and must contain an explanation as to why this driver is exempt from the ELD mandate.
This field is required if &lt;ELDExempt&gt; is True.
EnableBigDay
Indicates if the driver is allowed to declare a 16-Hour Big Day exemption
EnableDriverPortal
Indicates if the driver is allowed to login to the driver portal
EnableHOSRule</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_PUT_TEST_DRIVER_LIST}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:15.979" level="TRACE">Arguments: [ @{list_data}=[{'DefaultHOSRule': None,
  'DriverID': 'awsxrstestdriver1',
  'ELDExempt': False,
  'EnableBigDay': True,
  'EnableDriverPortal': True,
  'EnableHOSRule': '',
  'EnablePersonalConveyance': False,
  'EnableTimeClock': False,
  'EnableYardMove': False,
  'FirstName': 'AWSXRS',
  'Language': 'English',
  'LastName': 'Testdriver1',
  'LicenseIssuingCountry': 'USA',
  'LicenseIssuingStateProvince': 'Minnesota',
  'MiddleName': 'This has been changed.',
  'OrganizationSID': 0,
  'SID': 0,
  'SendInboundMessageTo': 0,
  'Status': 'Active',
  'UseHOSOrganizationSettings': True,
  'UserName': 'awsxrstestdriver1'}] ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Driver}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_DRIVERS}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:15.980" level="TRACE">Arguments: [ 'DriverWebService.svc/drivers' ]</msg>
<msg timestamp="20200107 09:49:15.980" level="TRACE">Return: 'DriverWebService.svc/drivers'</msg>
<msg timestamp="20200107 09:49:15.981" level="INFO">${uri} = DriverWebService.svc/drivers</msg>
<status status="PASS" starttime="20200107 09:49:15.980" endtime="20200107 09:49:15.981"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary">
<doc>Send a PUT request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>json=${list_data}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:15.981" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DriverWebService.svc/drivers' | json=[{'DefaultHOSRule': None,
  'DriverID': 'awsxrstestdriver1',
  'ELDExempt': False,
  'EnableBigDay': True,
  'EnableDriverPortal': True,
  'EnableHOSRule': '',
  'EnablePersonalConveyance': False,
  'EnableTimeClock': False,
  'EnableYardMove': False,
  'FirstName': 'AWSXRS',
  'Language': 'English',
  'LastName': 'Testdriver1',
  'LicenseIssuingCountry': 'USA',
  'LicenseIssuingStateProvince': 'Minnesota',
  'MiddleName': 'This has been changed.',
  'OrganizationSID': 0,
  'SID': 0,
  'SendInboundMessageTo': 0,
  'Status': 'Active',
  'UseHOSOrganizationSettings': True,
  'UserName': 'awsxrstestdriver1'}] | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:15.982" level="INFO">PUT Request using : uri=DriverWebService.svc/drivers, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=[{'DriverID': 'awsxrstestdriver1', 'DefaultHOSRule': None, 'ELDExempt': False, 'EnableBigDay': True, 'EnableDriverPortal': True, 'EnableHOSRule': '', 'EnablePersonalConveyance': False, 'EnableTimeClock': False, 'EnableYardMove': False, 'FirstName': 'AWSXRS', 'Language': 'English', 'LastName': 'Testdriver1', 'LicenseIssuingCountry': 'USA', 'LicenseIssuingStateProvince': 'Minnesota', 'MiddleName': 'This has been changed.', 'OrganizationSID': 0, 'SendInboundMessageTo': 0, 'SID': 0, 'Status': 'Active', 'UseHOSOrganizationSettings': True, 'UserName': 'awsxrstestdriver1'}]</msg>
<msg timestamp="20200107 09:49:17.188" level="DEBUG">https://d3ws.xataxrs.com:443 "PUT /DriverWebService.svc/drivers HTTP/1.1" 200 162</msg>
<msg timestamp="20200107 09:49:17.190" level="DEBUG">PUT Response : status=200, reason=OK
[{"Caption":"Edited.","Code":"200","Description":"Driver edited successfully.","Id":"awsxrstestdriver1","ObjectName":"Driver","SID":5741,"Title":"DriverEdited."}]</msg>
<msg timestamp="20200107 09:49:17.191" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:17.192" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:15.981" endtime="20200107 09:49:17.192"></status>
</kw>
<msg timestamp="20200107 09:49:17.193" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:17.193" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:15.979" endtime="20200107 09:49:17.194"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20200107 09:49:17.198" level="TRACE">Arguments: [ b'[{"Caption":"Edited.","Code":"200","Description":"Driver edited successfully.","Id":"awsxrstestdriver1","ObjectName":"Driver","SID":5741,"Title":"DriverEdited."}]' ]</msg>
<msg timestamp="20200107 09:49:17.199" level="INFO">To JSON using : content=[{"Caption":"Edited.","Code":"200","Description":"Driver edited successfully.","Id":"awsxrstestdriver1","ObjectName":"Driver","SID":5741,"Title":"DriverEdited."}] </msg>
<msg timestamp="20200107 09:49:17.199" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20200107 09:49:17.199" level="TRACE">Return: [{'Caption': 'Edited.',
  'Code': '200',
  'Description': 'Driver edited successfully.',
  'Id': 'awsxrstestdriver1',
  'ObjectName': 'Driver',
  'SID': 5741,
  'Title': 'DriverEdited.'}]</msg>
<msg timestamp="20200107 09:49:17.200" level="INFO">${json_response} = [{'Caption': 'Edited.', 'Code': '200', 'Description': 'Driver edited successfully.', 'Id': 'awsxrstestdriver1', 'ObjectName': 'Driver', 'SID': 5741, 'Title': 'DriverEdited.'}]</msg>
<status status="PASS" starttime="20200107 09:49:17.197" endtime="20200107 09:49:17.200"></status>
</kw>
<kw name="${r} IN [ @{json_response} ]" type="for">
<kw name="${r} = {'Caption': 'Edited.', 'Code': '200', 'Description': 'Driver edited successfully.', 'Id': 'awsxrstestdriver1', 'ObjectName': 'Driver', 'SID': 5741, 'Title': 'DriverEdited.'}" type="foritem">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${r}[Description]</arg>
<arg>Driver edited successfully.</arg>
</arguments>
<msg timestamp="20200107 09:49:17.203" level="TRACE">Arguments: [ 'Driver edited successfully.' | 'Driver edited successfully.' ]</msg>
<msg timestamp="20200107 09:49:17.203" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:17.203" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:17.202" endtime="20200107 09:49:17.204"></status>
</kw>
<status status="PASS" starttime="20200107 09:49:17.202" endtime="20200107 09:49:17.204"></status>
</kw>
<status status="PASS" starttime="20200107 09:49:17.201" endtime="20200107 09:49:17.204"></status>
</kw>
<doc>Posts a driver and expects a Code value of 201</doc>
<tags>
<tag>awsxrsdriverrestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:15.976" endtime="20200107 09:49:17.205" critical="yes"></status>
</test>
<test id="s1-s1-s2-t5" name="Validate AWS XRS Get Drivers REST Web Services Returns 200 OK">
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:49:17.210" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:49:17.211" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:49:17.211" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:49:17.211" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:49:17.211" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:49:17.210" endtime="20200107 09:49:17.211"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:49:17.213" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:49:17.213" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20200107 09:49:17.214" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:49:17.212" endtime="20200107 09:49:17.214"></status>
</kw>
<kw name="Verify Get Drivers With Forward Slash Returns 200 OK">
<doc>Verify that using a '/' in the URI returns 200 OK</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<msg timestamp="20200107 09:49:17.215" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/</arg>
</arguments>
<assign>
<var>${ending_character}</var>
</assign>
<msg timestamp="20200107 09:49:17.216" level="TRACE">Arguments: [ '/' ]</msg>
<msg timestamp="20200107 09:49:17.216" level="TRACE">Return: '/'</msg>
<msg timestamp="20200107 09:49:17.216" level="INFO">${ending_character} = /</msg>
<status status="PASS" starttime="20200107 09:49:17.215" endtime="20200107 09:49:17.216"></status>
</kw>
<kw name="Get Drivers With URI Ending With ${ending_character} And Parameters &amp;{params}" library="Driver">
<doc>This Keyword modifies character between the base uri and the parameters
This will get devices that match the provided parameters.
Params can be named individually or within a Dictionary
See the Get Devices Keyword for param definitions.</doc>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:17.216" level="TRACE">Arguments: [ ${ending_character}='/' | ${params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Driver}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_DRIVERS}${ending_character}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:17.217" level="TRACE">Arguments: [ 'DriverWebService.svc/drivers/' ]</msg>
<msg timestamp="20200107 09:49:17.217" level="TRACE">Return: 'DriverWebService.svc/drivers/'</msg>
<msg timestamp="20200107 09:49:17.218" level="INFO">${uri} = DriverWebService.svc/drivers/</msg>
<status status="PASS" starttime="20200107 09:49:17.217" endtime="20200107 09:49:17.218"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:17.218" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DriverWebService.svc/drivers/' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} | params={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<msg timestamp="20200107 09:49:17.218" level="INFO">GET Request using : uri=DriverWebService.svc/drivers/, params={'OrganizationID': 46663, 'IsActive': 'True', 'AsOfDateTime': '01/07/2020'}, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:18.320" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /DriverWebService.svc/drivers/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01%2F07%2F2020 HTTP/1.1" 200 1389</msg>
<msg timestamp="20200107 09:49:18.321" level="DEBUG">GET Response : status=200, reason=OK
[{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"awsxrstestdriver1234","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1578440926517-0800)\/","DefaultHOSRule":null,"DriverID":"awsxrstestdriver1","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"AWSXRS","HomeTelephone":"","Language":"English","LastLogin":"\/Date(-62135568000000-0800)\/","LastName":"Testdriver1","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"This has been changed.","ModifiedBy":5412,"ModifiedDate":"\/Date(1578440928551-0800)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":["Gnome Shipping D3"],"SID":5741,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"awsxrstestdriver1"}]</msg>
<msg timestamp="20200107 09:49:18.321" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:18.321" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:17.218" endtime="20200107 09:49:18.321"></status>
</kw>
<msg timestamp="20200107 09:49:18.321" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:18.321" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:17.216" endtime="20200107 09:49:18.321"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:18.322" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:18.322" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:18.322" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:18.321" endtime="20200107 09:49:18.322"></status>
</kw>
<msg timestamp="20200107 09:49:18.322" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:17.215" endtime="20200107 09:49:18.322"></status>
</kw>
<kw name="Verify Get Drivers Without Forward Slash Returns 200 OK">
<doc>Verify that not using a '/' in the URI returns 200 OK</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<msg timestamp="20200107 09:49:18.323" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Get Drivers" library="Driver">
<doc>Call the Get Method on Drivers.
This will get devices that match the provided parameters.
Params can be named individually or within a Dictionary
Param Definitions:
AsOfDateTime
Tells the service to return only the data that changed since the specified date and time.
IsActive
Filters results to active drivers only.
Valid Values: True False Both
Limit
Used in conjunction with the Offset parameter to implement paging.
Limits the number of results to a specified number.
System Limit: 10,000
Offset
Used in conjunction with the Limit parameter to implement paging.
Represents a page number for the starting point of the return set.
OrganizationID
Limits results to devices in one or more organizations.
ResourceGroupID
Limits results to devices in one or more resource groups.
ResourceGroupSID
Limits results to devices in one or more resource groups.
ResourceGroupSID
Limits results to drivers in one or more resource groups.</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:18.324" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Driver}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_DRIVERS}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:18.324" level="TRACE">Arguments: [ 'DriverWebService.svc/drivers' ]</msg>
<msg timestamp="20200107 09:49:18.324" level="TRACE">Return: 'DriverWebService.svc/drivers'</msg>
<msg timestamp="20200107 09:49:18.324" level="INFO">${uri} = DriverWebService.svc/drivers</msg>
<status status="PASS" starttime="20200107 09:49:18.324" endtime="20200107 09:49:18.324"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:18.325" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DriverWebService.svc/drivers' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} | params={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<msg timestamp="20200107 09:49:18.325" level="INFO">GET Request using : uri=DriverWebService.svc/drivers, params={'OrganizationID': 46663, 'IsActive': 'True', 'AsOfDateTime': '01/07/2020'}, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:18.899" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /DriverWebService.svc/drivers?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01%2F07%2F2020 HTTP/1.1" 200 1389</msg>
<msg timestamp="20200107 09:49:18.901" level="DEBUG">GET Response : status=200, reason=OK
[{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"awsxrstestdriver1234","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1578440926517-0800)\/","DefaultHOSRule":null,"DriverID":"awsxrstestdriver1","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"AWSXRS","HomeTelephone":"","Language":"English","LastLogin":"\/Date(-62135568000000-0800)\/","LastName":"Testdriver1","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"This has been changed.","ModifiedBy":5412,"ModifiedDate":"\/Date(1578440928551-0800)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":["Gnome Shipping D3"],"SID":5741,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"awsxrstestdriver1"}]</msg>
<msg timestamp="20200107 09:49:18.901" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:18.902" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:18.324" endtime="20200107 09:49:18.902"></status>
</kw>
<msg timestamp="20200107 09:49:18.903" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:18.903" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:18.323" endtime="20200107 09:49:18.903"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:18.905" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:18.905" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:18.905" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:18.904" endtime="20200107 09:49:18.906"></status>
</kw>
<msg timestamp="20200107 09:49:18.906" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:18.323" endtime="20200107 09:49:18.906"></status>
</kw>
<doc>Get drivers with basic parameters</doc>
<tags>
<tag>awsxrsdriverrestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:17.208" endtime="20200107 09:49:18.908" critical="yes"></status>
</test>
<test id="s1-s1-s2-t6" name="Validate AWS XRS Get Drivers REST Web Services Returns 200 OK With Raw String URI">
<kw name="Verify Get Drivers Raw String URI With /? Returns 200 OK">
<doc>Verify that using the given character string in the raw URI string returns 200 OK</doc>
<msg timestamp="20200107 09:49:18.917" level="TRACE">Arguments: [ ${character_string}='/?' ]</msg>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:49:18.918" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:49:18.918" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:49:18.919" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:49:18.919" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:49:18.919" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:49:18.917" endtime="20200107 09:49:18.919"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:49:18.920" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:49:18.921" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20200107 09:49:18.921" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:49:18.919" endtime="20200107 09:49:18.921"></status>
</kw>
<kw name="Create URI String With" library="URIStringBuilderTool">
<doc>Helper Keyword to construct the request uri with different character strings
base_uri = webservice uri
request_type = request extension for the webservice
character_string = final character of the uri. i.e. /, /?, etc ...</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Driver}</arg>
<arg>${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_DRIVERS}</arg>
<arg>${character_string}</arg>
</arguments>
<assign>
<var>${uri_string}</var>
</assign>
<msg timestamp="20200107 09:49:18.922" level="TRACE">Arguments: [ ${base_uri}='DriverWebService.svc' | ${request_type}='/drivers' | ${character_string}='/?' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${base_uri}${request_type}${character_string}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:18.923" level="TRACE">Arguments: [ 'DriverWebService.svc/drivers/?' ]</msg>
<msg timestamp="20200107 09:49:18.924" level="TRACE">Return: 'DriverWebService.svc/drivers/?'</msg>
<msg timestamp="20200107 09:49:18.924" level="INFO">${uri} = DriverWebService.svc/drivers/?</msg>
<status status="PASS" starttime="20200107 09:49:18.923" endtime="20200107 09:49:18.924"></status>
</kw>
<msg timestamp="20200107 09:49:18.924" level="TRACE">Return: 'DriverWebService.svc/drivers/?'</msg>
<msg timestamp="20200107 09:49:18.925" level="INFO">${uri_string} = DriverWebService.svc/drivers/?</msg>
<status status="PASS" starttime="20200107 09:49:18.921" endtime="20200107 09:49:18.925"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${uri_string}OrganizationID=${params.OrganizationID}&amp;IsActive=${params.IsActive}&amp;AsOfDateTime=${params.AsOfDateTime}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:18.926" level="TRACE">Arguments: [ 'DriverWebService.svc/drivers/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' ]</msg>
<msg timestamp="20200107 09:49:18.926" level="TRACE">Return: 'DriverWebService.svc/drivers/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020'</msg>
<msg timestamp="20200107 09:49:18.926" level="INFO">${uri} = DriverWebService.svc/drivers/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020</msg>
<status status="PASS" starttime="20200107 09:49:18.925" endtime="20200107 09:49:18.927"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:18.927" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DriverWebService.svc/drivers/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:18.928" level="INFO">GET Request using : uri=DriverWebService.svc/drivers/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:19.452" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /DriverWebService.svc/drivers/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020 HTTP/1.1" 200 1389</msg>
<msg timestamp="20200107 09:49:19.453" level="DEBUG">GET Response : status=200, reason=OK
[{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"awsxrstestdriver1234","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1578440926517-0800)\/","DefaultHOSRule":null,"DriverID":"awsxrstestdriver1","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"AWSXRS","HomeTelephone":"","Language":"English","LastLogin":"\/Date(-62135568000000-0800)\/","LastName":"Testdriver1","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"This has been changed.","ModifiedBy":5412,"ModifiedDate":"\/Date(1578440928551-0800)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":["Gnome Shipping D3"],"SID":5741,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"awsxrstestdriver1"}]</msg>
<msg timestamp="20200107 09:49:19.453" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:19.453" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:18.927" endtime="20200107 09:49:19.453"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:19.454" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:19.454" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:19.454" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:19.454" endtime="20200107 09:49:19.454"></status>
</kw>
<msg timestamp="20200107 09:49:19.454" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:18.916" endtime="20200107 09:49:19.454"></status>
</kw>
<kw name="Verify Get Drivers Raw String URI With ? Returns 200 OK">
<doc>Verify that using the given character string in the raw URI string returns 200 OK</doc>
<msg timestamp="20200107 09:49:19.456" level="TRACE">Arguments: [ ${character_string}='?' ]</msg>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:49:19.456" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:49:19.456" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:49:19.456" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:49:19.456" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:49:19.456" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:49:19.456" endtime="20200107 09:49:19.456"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:49:19.457" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:49:19.457" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20200107 09:49:19.457" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:49:19.456" endtime="20200107 09:49:19.457"></status>
</kw>
<kw name="Create URI String With" library="URIStringBuilderTool">
<doc>Helper Keyword to construct the request uri with different character strings
base_uri = webservice uri
request_type = request extension for the webservice
character_string = final character of the uri. i.e. /, /?, etc ...</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Driver}</arg>
<arg>${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_DRIVERS}</arg>
<arg>${character_string}</arg>
</arguments>
<assign>
<var>${uri_string}</var>
</assign>
<msg timestamp="20200107 09:49:19.458" level="TRACE">Arguments: [ ${base_uri}='DriverWebService.svc' | ${request_type}='/drivers' | ${character_string}='?' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${base_uri}${request_type}${character_string}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:19.459" level="TRACE">Arguments: [ 'DriverWebService.svc/drivers?' ]</msg>
<msg timestamp="20200107 09:49:19.459" level="TRACE">Return: 'DriverWebService.svc/drivers?'</msg>
<msg timestamp="20200107 09:49:19.459" level="INFO">${uri} = DriverWebService.svc/drivers?</msg>
<status status="PASS" starttime="20200107 09:49:19.458" endtime="20200107 09:49:19.459"></status>
</kw>
<msg timestamp="20200107 09:49:19.459" level="TRACE">Return: 'DriverWebService.svc/drivers?'</msg>
<msg timestamp="20200107 09:49:19.459" level="INFO">${uri_string} = DriverWebService.svc/drivers?</msg>
<status status="PASS" starttime="20200107 09:49:19.458" endtime="20200107 09:49:19.460"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${uri_string}OrganizationID=${params.OrganizationID}&amp;IsActive=${params.IsActive}&amp;AsOfDateTime=${params.AsOfDateTime}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:19.460" level="TRACE">Arguments: [ 'DriverWebService.svc/drivers?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' ]</msg>
<msg timestamp="20200107 09:49:19.460" level="TRACE">Return: 'DriverWebService.svc/drivers?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020'</msg>
<msg timestamp="20200107 09:49:19.461" level="INFO">${uri} = DriverWebService.svc/drivers?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020</msg>
<status status="PASS" starttime="20200107 09:49:19.460" endtime="20200107 09:49:19.461"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:19.461" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DriverWebService.svc/drivers?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:19.461" level="INFO">GET Request using : uri=DriverWebService.svc/drivers?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:19.987" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /DriverWebService.svc/drivers?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020 HTTP/1.1" 200 1389</msg>
<msg timestamp="20200107 09:49:19.987" level="DEBUG">GET Response : status=200, reason=OK
[{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"awsxrstestdriver1234","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1578440926517-0800)\/","DefaultHOSRule":null,"DriverID":"awsxrstestdriver1","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"AWSXRS","HomeTelephone":"","Language":"English","LastLogin":"\/Date(-62135568000000-0800)\/","LastName":"Testdriver1","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"This has been changed.","ModifiedBy":5412,"ModifiedDate":"\/Date(1578440928551-0800)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":["Gnome Shipping D3"],"SID":5741,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"awsxrstestdriver1"}]</msg>
<msg timestamp="20200107 09:49:19.987" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:19.988" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:19.461" endtime="20200107 09:49:19.988"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:19.988" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:19.988" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:19.989" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:19.988" endtime="20200107 09:49:19.989"></status>
</kw>
<msg timestamp="20200107 09:49:19.989" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:19.455" endtime="20200107 09:49:19.989"></status>
</kw>
<doc>Get drivers with basic parameters using a raw URI string</doc>
<tags>
<tag>awsxrsdriverrestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:18.914" endtime="20200107 09:49:19.990" critical="yes"></status>
</test>
<test id="s1-s1-s2-t7" name="Validate AWS XRS Delete Driver REST Web Services Returns 200 OK">
<kw name="Delete Driver By ID" library="Driver">
<doc>Delete a single driver record in Omnitracs XRS by specifying the DriverSID.</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_DRIVER_1.DriverID}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:19.994" level="TRACE">Arguments: [ ${driver_id}='awsxrstestdriver1' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Driver}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_GET_DELETE_DRIVER_BY_DRIVERID}/${driver_id}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:19.994" level="TRACE">Arguments: [ 'DriverWebService.svc/driver/awsxrstestdriver1' ]</msg>
<msg timestamp="20200107 09:49:19.994" level="TRACE">Return: 'DriverWebService.svc/driver/awsxrstestdriver1'</msg>
<msg timestamp="20200107 09:49:19.995" level="INFO">${uri} = DriverWebService.svc/driver/awsxrstestdriver1</msg>
<status status="PASS" starttime="20200107 09:49:19.994" endtime="20200107 09:49:19.995"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:19.995" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DriverWebService.svc/driver/awsxrstestdriver1' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:19.995" level="INFO">DELETE Request using : uri=DriverWebService.svc/driver/awsxrstestdriver1, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:20.633" level="DEBUG">https://d3ws.xataxrs.com:443 "DELETE /DriverWebService.svc/driver/awsxrstestdriver1 HTTP/1.1" 200 175</msg>
<msg timestamp="20200107 09:49:20.634" level="DEBUG">DELETE Response : status=200, reason=OK
{"Caption":"Deleted.","Code":"200","Description":"Driver successfully marked for deletion.","Id":"awsxrstestdriver1","ObjectName":"Driver","SID":5741,"Title":"DriverDeleted."}</msg>
<msg timestamp="20200107 09:49:20.634" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:20.634" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:19.995" endtime="20200107 09:49:20.635"></status>
</kw>
<msg timestamp="20200107 09:49:20.635" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:20.635" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:19.993" endtime="20200107 09:49:20.635"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:20.637" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:20.637" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:20.637" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:20.636" endtime="20200107 09:49:20.637"></status>
</kw>
<doc>Verifies that created driver is deleted</doc>
<tags>
<tag>awsxrsdriverrestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:19.992" endtime="20200107 09:49:20.638" critical="yes"></status>
</test>
<test id="s1-s1-s2-t8" name="Validate AWS XRS Get Drivers REST Web Services For All Drivers Returns 200 OK">
<kw name="Get All Drivers" library="Driver">
<doc>Get attributes for all drivers.</doc>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:20.643" level="TRACE">Arguments: [  ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Driver}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_DRIVERS}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:20.644" level="TRACE">Arguments: [ 'DriverWebService.svc/drivers' ]</msg>
<msg timestamp="20200107 09:49:20.644" level="TRACE">Return: 'DriverWebService.svc/drivers'</msg>
<msg timestamp="20200107 09:49:20.644" level="INFO">${uri} = DriverWebService.svc/drivers</msg>
<status status="PASS" starttime="20200107 09:49:20.643" endtime="20200107 09:49:20.644"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:20.644" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DriverWebService.svc/drivers' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:20.645" level="INFO">GET Request using : uri=DriverWebService.svc/drivers, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:21.445" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /DriverWebService.svc/drivers HTTP/1.1" 200 38102</msg>
<msg timestamp="20200107 09:49:21.496" level="DEBUG">GET Response : status=200, reason=OK
[{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"Tomte223456","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1537837221000-0700)\/","DefaultHOSRule":null,"DriverID":"tomte2","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"Gnome2","HomeTelephone":"","Language":"English","LastLogin":"\/Date(1574751300579-0800)\/","LastName":"Stine","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"","ModifiedBy":5416,"ModifiedDate":"\/Date(1574751300579-0800)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5414,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"tomte2"},{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"Tomte323456","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1538008987000-0700)\/","DefaultHOSRule":null,"DriverID":"tomte3","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"Gnome3","HomeTelephone":"","Language":"English","LastLogin":"\/Date(1568780186436-0700)\/","LastName":"Stine","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"","ModifiedBy":5412,"ModifiedDate":"\/Date(1568780186436-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5420,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"tomte3"},{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"Tomte123456","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1537829346000-0700)\/","DefaultHOSRule":null,"DriverID":"tomte1","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"Gnome1","HomeTelephone":"","Language":"English","LastLogin":"\/Date(1568779260240-0700)\/","LastName":"Stine","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"","ModifiedBy":5412,"ModifiedDate":"\/Date(1568779260240-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5413,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"tomte1"},{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"Q608776246717","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1562192164928-0700)\/","DefaultHOSRule":null,"DriverID":"kstine10150703","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"Default","HomeTelephone":"","Language":"English","LastLogin":"\/Date(-62135568000000-0800)\/","LastName":"Driver","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"Automation","ModifiedBy":5412,"ModifiedDate":"\/Date(1562192164554-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5636,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"kstine1015"},{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"Q697830936680","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1562189481023-0700)\/","DefaultHOSRule":null,"DriverID":"kstine09310703","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"Default","HomeTelephone":"","Language":"English","LastLogin":"\/Date(-62135568000000-0800)\/","LastName":"Driver","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"Automation","ModifiedBy":5412,"ModifiedDate":"\/Date(1562189480736-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5635,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"kstine0931"},{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"Q676045628908","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1562188774768-0700)\/","DefaultHOSRule":null,"DriverID":"kstine09190703","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"Default","HomeTelephone":"","Language":"English","LastLogin":"\/Date(-62135568000000-0800)\/","LastName":"Driver","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"Automation","ModifiedBy":5412,"ModifiedDate":"\/Date(1562188774489-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5634,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"kstine0919"},{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"260965236004","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1562129123634-0700)\/","DefaultHOSRule":null,"DriverID":"kstine16450702","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"Shelby","HomeTelephone":"","Language":"English","LastLogin":"\/Date(-62135568000000-0800)\/","LastName":"Williams","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"","ModifiedBy":5412,"ModifiedDate":"\/Date(1562129123313-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5633,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"kstine1645"},{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"420553385949","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1562128990123-0700)\/","DefaultHOSRule":null,"DriverID":"kstine16430702","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"Daniel","HomeTelephone":"","Language":"English","LastLogin":"\/Date(-62135568000000-0800)\/","LastName":"Barton","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"","ModifiedBy":5412,"ModifiedDate":"\/Date(1562128989706-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5632,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"kstine1643"},{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1562127801318-0700)\/","DefaultHOSRule":null,"DriverID":"kstine160702","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"Jaime","HomeTelephone":"","Language":"English","LastLogin":"\/Date(-62135568000000-0800)\/","LastName":"Perkins","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"","ModifiedBy":5412,"ModifiedDate":"\/Date(1562127800923-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5631,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"kstine16"},{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1562127741005-0700)\/","DefaultHOSRule":null,"DriverID":"kstine16220702","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"Daniel","HomeTelephone":"","Language":"English","LastLogin":"\/Date(-62135568000000-0800)\/","LastName":"Jones","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"","ModifiedBy":5412,"ModifiedDate":"\/Date(1562127740644-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5630,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"kstine1622"},{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1562127649942-0700)\/","DefaultHOSRule":null,"DriverID":"kstine16200702","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"Peter","HomeTelephone":"","Language":"English","LastLogin":"\/Date(-62135568000000-0800)\/","LastName":"Williams","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"","ModifiedBy":5412,"ModifiedDate":"\/Date(1562127649559-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5629,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"kstine1620"},{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1562127588167-0700)\/","DefaultHOSRule":null,"DriverID":"kstine16190702","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"Jason","HomeTelephone":"","Language":"English","LastLogin":"\/Date(-62135568000000-0800)\/","LastName":"Little","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"","ModifiedBy":5412,"ModifiedDate":"\/Date(1562127587762-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5628,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"kstine1619"},{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"Tomte623456","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1538021062000-0700)\/","DefaultHOSRule":null,"DriverID":"tomte6","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"Gnome6","HomeTelephone":"","Language":"English","LastLogin":"\/Date(1559103222719-0700)\/","LastName":"Stine","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"","ModifiedBy":5412,"ModifiedDate":"\/Date(1561682690013-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5423,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Inactive","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"tomte6"},{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"Bobby123","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1556323216523-0700)\/","DefaultHOSRule":null,"DriverID":"bob01","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"Robert1","HomeTelephone":"","Language":"English","LastLogin":"\/Date(1556323971950-0700)\/","LastName":"Builder","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"","ModifiedBy":5416,"ModifiedDate":"\/Date(1556323971950-0700)\/","OrganizationID":"Bob","OrganizationName":"Bob","OrganizationSID":482,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5583,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"bob01"},{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"bigday123","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1538110250000-0700)\/","DefaultHOSRule":null,"DriverID":"bigday1","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"bigday1","HomeTelephone":"","Language":"English","LastLogin":"\/Date(1555553096057-0700)\/","LastName":"Stine","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"","ModifiedBy":5412,"ModifiedDate":"\/Date(1555553096057-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5430,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"bigday1"},{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"Tomte523456","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1538019628000-0700)\/","DefaultHOSRule":null,"DriverID":"tomte5","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"Gnome5","HomeTelephone":"","Language":"English","LastLogin":"\/Date(1550113626126-0800)\/","LastName":"Stine","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"","ModifiedBy":5412,"ModifiedDate":"\/Date(1550113626126-0800)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5422,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Inactive","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"tomte5"},{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"Tomte423456","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1538017506000-0700)\/","DefaultHOSRule":null,"DriverID":"tomte4","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"Gnome4","HomeTelephone":"","Language":"English","LastLogin":"\/Date(1550029037616-0800)\/","LastName":"Stine","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"","ModifiedBy":5416,"ModifiedDate":"\/Date(1550029037616-0800)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5421,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Inactive","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"tomte4"},{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"afterbigday123","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1538185530051-0700)\/","DefaultHOSRule":null,"DriverID":"afterbigday1","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"afterbigday1","HomeTelephone":"","Language":"English","LastLogin":"\/Date(1538187181989-0700)\/","LastName":"Stine","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"","ModifiedBy":5416,"ModifiedDate":"\/Date(1538187181989-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5437,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"afterbigday1"},{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"bigday567","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1538178407326-0700)\/","DefaultHOSRule":null,"DriverID":"bigday5","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"bigday5","HomeTelephone":"","Language":"English","LastLogin":"\/Date(1538179779123-0700)\/","LastName":"Stine","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"","ModifiedBy":5416,"ModifiedDate":"\/Date(1538179779123-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5436,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"bigday5"},{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"bigday456","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1538171921315-0700)\/","DefaultHOSRule":null,"DriverID":"bigday4","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"bigday4","HomeTelephone":"","Language":"English","LastLogin":"\/Date(1538175385977-0700)\/","LastName":"Stine","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"","ModifiedBy":5416,"ModifiedDate":"\/Date(1538175385977-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5435,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"bigday4"},{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"bigday345","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1538170761822-0700)\/","DefaultHOSRule":null,"DriverID":"bigday3","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"bigday3","HomeTelephone":"","Language":"English","LastLogin":"\/Date(1538171879044-0700)\/","LastName":"Stine","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"","ModifiedBy":5416,"ModifiedDate":"\/Date(1538171879044-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5434,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"bigday3"},{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"yard456","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1538167605066-0700)\/","DefaultHOSRule":null,"DriverID":"yard4","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"yard4","HomeTelephone":"","Language":"English","LastLogin":"\/Date(1538169371981-0700)\/","LastName":"Stine","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"","ModifiedBy":5416,"ModifiedDate":"\/Date(1538169371981-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5432,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"yard4"},{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"bigday234","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1538111946331-0700)\/","DefaultHOSRule":null,"DriverID":"bigday2","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"bigday2","HomeTelephone":"","Language":"English","LastLogin":"\/Date(1538113165030-0700)\/","LastName":"Stine","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"","ModifiedBy":5416,"ModifiedDate":"\/Date(1538113165030-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5431,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"bigday2"},{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"yard345","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1538109456283-0700)\/","DefaultHOSRule":null,"DriverID":"yard3","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"yard3","HomeTelephone":"","Language":"English","LastLogin":"\/Date(1538168332704-0700)\/","LastName":"Stine","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"","ModifiedBy":5416,"ModifiedDate":"\/Date(1538168332704-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5429,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"yard3"},{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"Yard234","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1538108343758-0700)\/","DefaultHOSRule":null,"DriverID":"yard2","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"Yard2","HomeTelephone":"","Language":"English","LastLogin":"\/Date(1538109141707-0700)\/","LastName":"Stine","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"","ModifiedBy":5416,"ModifiedDate":"\/Date(1538109141707-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5428,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"yard2"},{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"yard123","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1538107546000-0700)\/","DefaultHOSRule":null,"DriverID":"yard1","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"Yard1","HomeTelephone":"","Language":"English","LastLogin":"\/Date(1538108235892-0700)\/","LastName":"Stine","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"","ModifiedBy":5416,"ModifiedDate":"\/Date(1538108288802-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"E1ADC3949BA59ABBE56E057F2F883E","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5427,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"yard1"},{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"Tomte923456","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1538102712537-0700)\/","DefaultHOSRule":null,"DriverID":"tomte9","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"Steve","HomeTelephone":"","Language":"English","LastLogin":"\/Date(1538107429840-0700)\/","LastName":"Stine","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"","ModifiedBy":5416,"ModifiedDate":"\/Date(1538107429840-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"112E2C5D4297F7F2618A06F647FEE60","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5426,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"tomte9"},{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"tomte890890","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1538098295471-0700)\/","DefaultHOSRule":null,"DriverID":"tomte8","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"Bob","HomeTelephone":"","Language":"English","LastLogin":"\/Date(1538099634064-0700)\/","LastName":"Stine","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"","ModifiedBy":5416,"ModifiedDate":"\/Date(1538099634064-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"112E2C5D4297F7F2618A06F647FEE60","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5425,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"tomte8"},{"CDLExpiration":"\/Date(-62135568000000-0800)\/","CDLNumber":"Tomte723456","CellPhone":"","CompanyName":"Gnome Shipping D3","CompanySID":2340,"CreateDate":"\/Date(1538097463984-0700)\/","DefaultHOSRule":null,"DriverID":"tomte7","ELDExempt":false,"ELDExemptExplanation":null,"ELDExemptVehicleInspection":"UseOrganizationSetting","EnableBigDay":false,"EnableDriverPortal":true,"EnableHOSRule":"","EnablePersonalConveyance":false,"EnableTimeClock":false,"EnableYardMove":false,"Endorsements":"","FirstName":"Ian","HomeTelephone":"","Language":"English","LastLogin":"\/Date(1538098259682-0700)\/","LastName":"Stine","LicenseIssuingCountry":"USA","LicenseIssuingStateProvince":"Minnesota","MaxConveyanceDistance":0,"MedicalExp":"\/Date(-62135568000000-0800)\/","MiddleName":"","ModifiedBy":5416,"ModifiedDate":"\/Date(1538098259682-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"Password":"112E2C5D4297F7F2618A06F647FEE60","PayrollOrganizationSID":0,"PayrollSID":0,"ResourceGroupIDList":null,"SID":5424,"SendInboundMessageTo":357,"SendInboundMessageToID":"Gnome Shipping D3","Status":"Active","UseHOSOrganizationSettings":true,"UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"tomte7"}]</msg>
<msg timestamp="20200107 09:49:21.498" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:21.499" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:20.644" endtime="20200107 09:49:21.499"></status>
</kw>
<msg timestamp="20200107 09:49:21.500" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:21.500" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:20.643" endtime="20200107 09:49:21.500"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:21.503" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:21.504" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:21.504" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:21.502" endtime="20200107 09:49:21.505"></status>
</kw>
<doc>Gets all the drivers</doc>
<tags>
<tag>awsxrsdriverrestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>xrsawsperftest</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:20.641" endtime="20200107 09:49:21.507" critical="yes"></status>
</test>
<test id="s1-s1-s2-t9" name="Validate AWS XRS Delete Drivers REST Web Services Returns Error Message">
<kw name="Delete Drivers By IDs" library="Driver">
<doc>Delete a single driver record in Omnitracs XRS by specifying the DriverSID.
The Delete method supports the deletion of one driver record per call only.</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_DRIVER_1_SID}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:21.517" level="TRACE">Arguments: [ ${drivers_sid}=5741 ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Driver}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_DRIVERS}/${drivers_sid}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:21.518" level="TRACE">Arguments: [ 'DriverWebService.svc/drivers/5741' ]</msg>
<msg timestamp="20200107 09:49:21.519" level="TRACE">Return: 'DriverWebService.svc/drivers/5741'</msg>
<msg timestamp="20200107 09:49:21.519" level="INFO">${uri} = DriverWebService.svc/drivers/5741</msg>
<status status="PASS" starttime="20200107 09:49:21.517" endtime="20200107 09:49:21.519"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:21.520" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'DriverWebService.svc/drivers/5741' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:21.521" level="INFO">DELETE Request using : uri=DriverWebService.svc/drivers/5741, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:22.026" level="DEBUG">https://d3ws.xataxrs.com:443 "DELETE /DriverWebService.svc/drivers/5741 HTTP/1.1" 400 93</msg>
<msg timestamp="20200107 09:49:22.027" level="DEBUG">DELETE Response : status=400, reason=Bad Request
{"ErrorMessage":"Driver 5741 doesn't exist.","EventCode":3459609084779560960,"Parameters":[]}</msg>
<msg timestamp="20200107 09:49:22.028" level="TRACE">Return: &lt;Response [400]&gt;</msg>
<msg timestamp="20200107 09:49:22.028" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:21.520" endtime="20200107 09:49:22.028"></status>
</kw>
<msg timestamp="20200107 09:49:22.028" level="TRACE">Return: &lt;Response [400]&gt;</msg>
<msg timestamp="20200107 09:49:22.028" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:21.516" endtime="20200107 09:49:22.028"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>Driver ${XRS_WEB_SERVICES_TEST_DRIVER_1_SID} doesn't exist.</arg>
</arguments>
<assign>
<var>${expected_error_message}</var>
</assign>
<msg timestamp="20200107 09:49:22.031" level="TRACE">Arguments: [ "Driver 5741 doesn't exist." ]</msg>
<msg timestamp="20200107 09:49:22.031" level="TRACE">Return: "Driver 5741 doesn't exist."</msg>
<msg timestamp="20200107 09:49:22.031" level="INFO">${expected_error_message} = Driver 5741 doesn't exist.</msg>
<status status="PASS" starttime="20200107 09:49:22.030" endtime="20200107 09:49:22.031"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20200107 09:49:22.033" level="TRACE">Arguments: [ b'{"ErrorMessage":"Driver 5741 doesn\'t exist.","EventCode":3459609084779560960,"Parameters":[]}' ]</msg>
<msg timestamp="20200107 09:49:22.033" level="INFO">To JSON using : content={"ErrorMessage":"Driver 5741 doesn't exist.","EventCode":3459609084779560960,"Parameters":[]} </msg>
<msg timestamp="20200107 09:49:22.033" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20200107 09:49:22.033" level="TRACE">Return: {'ErrorMessage': "Driver 5741 doesn't exist.",
 'EventCode': 3459609084779560960,
 'Parameters': []}</msg>
<msg timestamp="20200107 09:49:22.033" level="INFO">${json_response} = {'ErrorMessage': "Driver 5741 doesn't exist.", 'EventCode': 3459609084779560960, 'Parameters': []}</msg>
<status status="PASS" starttime="20200107 09:49:22.032" endtime="20200107 09:49:22.033"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_response}[ErrorMessage]</arg>
<arg>${expected_error_message}</arg>
</arguments>
<msg timestamp="20200107 09:49:22.035" level="TRACE">Arguments: [ "Driver 5741 doesn't exist." | "Driver 5741 doesn't exist." ]</msg>
<msg timestamp="20200107 09:49:22.035" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:22.035" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:22.034" endtime="20200107 09:49:22.035"></status>
</kw>
<doc>Attempts to delete a previously deleted driver.</doc>
<tags>
<tag>awsxrsdriverrestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:21.514" endtime="20200107 09:49:22.036" critical="yes"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary" type="teardown">
<doc>Removes all the session objects</doc>
<msg timestamp="20200107 09:49:22.042" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200107 09:49:22.042" level="INFO">Delete All Sessions</msg>
<msg timestamp="20200107 09:49:22.043" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:22.042" endtime="20200107 09:49:22.043"></status>
</kw>
<doc>Fundamental suite to test XRS AWS Driver Entity Management Web Services</doc>
<status status="PASS" starttime="20200107 09:49:12.589" endtime="20200107 09:49:22.043"></status>
</suite>
<suite id="s1-s1-s3" name="ValidateAWSXRSOrganizationWebService" source="C:\Users\kstine\git\aws-api-gateway-tests\Tests\AWS_XRS_WebServicesTests\03__ValidateAWSXRSOrganizationWebService.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Create AWS XRS Web Services Session</arg>
<arg>AND</arg>
<arg>Test Data Setup For XRS AWS Organization Web Service Test Suite</arg>
</arguments>
<msg timestamp="20200107 09:49:22.734" level="TRACE">Arguments: [ 'Create AWS XRS Web Services Session' | 'AND' | 'Test Data Setup For XRS AWS Organization Web Service Test Suite' ]</msg>
<kw name="Create AWS XRS Web Services Session" library="XRSCommonWebService">
<doc>Create a session with aws xrs web services</doc>
<msg timestamp="20200107 09:49:22.734" level="TRACE">Arguments: [  ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${XRS_AWS_WEBSERVICES_URL}[${XRS_HOST_ENVIRONMENT}]</arg>
<arg>verify=True</arg>
<arg>auth=${XRS_WEBSERVICES_AUTHORIZATION}</arg>
</arguments>
<msg timestamp="20200107 09:49:22.734" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'https://d3ws.xataxrs.com' | verify=True | auth=['GnomeShippingD3|admin', 'xrs123'] ]</msg>
<msg timestamp="20200107 09:49:22.734" level="INFO">Creating Session using : alias=xrs_web_service_session, url=https://d3ws.xataxrs.com, headers={},                     cookies={}, auth=&lt;requests.auth.HTTPBasicAuth object at 0x0000018E38C04400&gt;, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<msg timestamp="20200107 09:49:22.735" level="DEBUG">Creating session: xrs_web_service_session</msg>
<msg timestamp="20200107 09:49:22.735" level="DEBUG">Argument types are:
&lt;class 'bool'&gt;</msg>
<msg timestamp="20200107 09:49:22.735" level="TRACE">Return: &lt;requests.sessions.Session object at 0x0000018E38C04580&gt;</msg>
<status status="PASS" starttime="20200107 09:49:22.734" endtime="20200107 09:49:22.735"></status>
</kw>
<msg timestamp="20200107 09:49:22.735" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:22.734" endtime="20200107 09:49:22.735"></status>
</kw>
<kw name="Test Data Setup For XRS AWS Organization Web Service Test Suite">
<doc>Keyword for setting up a random organization for the organization test suite</doc>
<msg timestamp="20200107 09:49:22.735" level="TRACE">Arguments: [  ]</msg>
<kw name="Word" library="FakerLibrary">
<doc>:returns: A random word, eg: 'lorem'</doc>
<assign>
<var>${FAKE_WORD1}</var>
</assign>
<msg timestamp="20200107 09:49:22.735" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200107 09:49:22.736" level="TRACE">Return: 'red'</msg>
<msg timestamp="20200107 09:49:22.736" level="INFO">${FAKE_WORD1} = red</msg>
<status status="PASS" starttime="20200107 09:49:22.735" endtime="20200107 09:49:22.736"></status>
</kw>
<kw name="Word" library="FakerLibrary">
<doc>:returns: A random word, eg: 'lorem'</doc>
<assign>
<var>${FAKE_WORD2}</var>
</assign>
<msg timestamp="20200107 09:49:22.736" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200107 09:49:22.736" level="TRACE">Return: 'how'</msg>
<msg timestamp="20200107 09:49:22.736" level="INFO">${FAKE_WORD2} = how</msg>
<status status="PASS" starttime="20200107 09:49:22.736" endtime="20200107 09:49:22.736"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${FAKE_WORD1}${FAKE_WORD2}</arg>
</arguments>
<assign>
<var>${FAKE_TEST_ORGANIZATION_ID_1}</var>
</assign>
<msg timestamp="20200107 09:49:22.736" level="TRACE">Arguments: [ 'redhow' ]</msg>
<msg timestamp="20200107 09:49:22.736" level="TRACE">Return: 'redhow'</msg>
<msg timestamp="20200107 09:49:22.736" level="INFO">${FAKE_TEST_ORGANIZATION_ID_1} = redhow</msg>
<status status="PASS" starttime="20200107 09:49:22.736" endtime="20200107 09:49:22.736"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${FAKE_WORD1}${SPACE}${FAKE_WORD2}</arg>
</arguments>
<assign>
<var>${FAKE_TEST_ORGANIZATION_NAME_1}</var>
</assign>
<msg timestamp="20200107 09:49:22.737" level="TRACE">Arguments: [ 'red how' ]</msg>
<msg timestamp="20200107 09:49:22.737" level="TRACE">Return: 'red how'</msg>
<msg timestamp="20200107 09:49:22.737" level="INFO">${FAKE_TEST_ORGANIZATION_NAME_1} = red how</msg>
<status status="PASS" starttime="20200107 09:49:22.737" endtime="20200107 09:49:22.737"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>CarrierName=${XRS_GENERAL_INFORMATION.Address.Carrier_Name}</arg>
<arg>Country=${XRS_GENERAL_INFORMATION.Address.Country}</arg>
<arg>DotNumber=${XRS_GENERAL_INFORMATION.Address.DOT_Number}</arg>
<arg>Language=${XRS_GENERAL_INFORMATION.Localization.Language}</arg>
<arg>OrganizationId=${FAKE_TEST_ORGANIZATION_ID_1}</arg>
<arg>OrganizationName=${FAKE_TEST_ORGANIZATION_NAME_1}</arg>
<arg>ParentOrganizationId=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>ParentOrganizationSid=${XRS_GENERAL_INFORMATION.Company.ParentOrganizationSid}</arg>
<arg>TimeZone=CST</arg>
</arguments>
<assign>
<var>&amp;{XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_1_DICT}</var>
</assign>
<msg timestamp="20200107 09:49:22.737" level="TRACE">Arguments: [ 'CarrierName=${XRS_GENERAL_INFORMATION.Address.Carrier_Name}' | 'Country=${XRS_GENERAL_INFORMATION.Address.Country}' | 'DotNumber=${XRS_GENERAL_INFORMATION.Address.DOT_Number}' | 'Language=${XRS_GENERAL_INFORMATION.Localization.Language}' | 'OrganizationId=${FAKE_TEST_ORGANIZATION_ID_1}' | 'OrganizationName=${FAKE_TEST_ORGANIZATION_NAME_1}' | 'ParentOrganizationId=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'ParentOrganizationSid=${XRS_GENERAL_INFORMATION.Company.ParentOrganizationSid}' | 'TimeZone=CST' ]</msg>
<msg timestamp="20200107 09:49:22.738" level="TRACE">Return: {'CarrierName': 'Gnome Shipping D3',
 'Country': 'USA',
 'DotNumber': 123456,
 'Language': 'English',
 'OrganizationId': 'redhow',
 'OrganizationName': 'red how',
 'ParentOrganizationId': 46663,
 'ParentOrganizationSid': 414,
 'TimeZone': 'CST'}</msg>
<msg timestamp="20200107 09:49:22.738" level="INFO">&amp;{XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_1_DICT} = { CarrierName=Gnome Shipping D3 | Country=USA | DotNumber=123456 | Language=English | OrganizationId=redhow | OrganizationName=red how | ParentOrganizationId=46663 | ParentOrganizationSid=414 | TimeZo...</msg>
<status status="PASS" starttime="20200107 09:49:22.737" endtime="20200107 09:49:22.738"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_1_DICT}</arg>
</arguments>
<assign>
<var>@{XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_LIST}</var>
</assign>
<msg timestamp="20200107 09:49:22.738" level="TRACE">Arguments: [ {'CarrierName': 'Gnome Shipping D3',
 'Country': 'USA',
 'DotNumber': 123456,
 'Language': 'English',
 'OrganizationId': 'redhow',
 'OrganizationName': 'red how',
 'ParentOrganizationId': 46663,
 'ParentOrganizationSid': 414,
 'TimeZone': 'CST'} ]</msg>
<msg timestamp="20200107 09:49:22.739" level="TRACE">Return: [{'CarrierName': 'Gnome Shipping D3',
  'Country': 'USA',
  'DotNumber': 123456,
  'Language': 'English',
  'OrganizationId': 'redhow',
  'OrganizationName': 'red how',
  'ParentOrganizationId': 46663,
  'ParentOrganizationSid': 414,
  'TimeZone': 'CST'}]</msg>
<msg timestamp="20200107 09:49:22.739" level="INFO">@{XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_LIST} = [ {'CarrierName': 'Gnome Shipping D3', 'Country': 'USA', 'DotNumber': 123456, 'Language': 'English', 'OrganizationId': 'redhow', 'OrganizationName': 'red how', 'ParentOrganizationId': 46663, 'ParentOr...</msg>
<status status="PASS" starttime="20200107 09:49:22.738" endtime="20200107 09:49:22.739"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_1_DICT}</arg>
</arguments>
<msg timestamp="20200107 09:49:22.739" level="TRACE">Arguments: [ '${XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_1_DICT}' ]</msg>
<msg timestamp="20200107 09:49:22.739" level="INFO">${XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_1_DICT} = {'CarrierName': 'Gnome Shipping D3', 'Country': 'USA', 'DotNumber': 123456, 'Language': 'English', 'OrganizationId': 'redhow', 'OrganizationName': 'red how', 'ParentOrganizationId': 46663, 'ParentOrga...</msg>
<msg timestamp="20200107 09:49:22.739" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:22.739" endtime="20200107 09:49:22.739"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_LIST}</arg>
</arguments>
<msg timestamp="20200107 09:49:22.740" level="TRACE">Arguments: [ '@{XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_LIST}' ]</msg>
<msg timestamp="20200107 09:49:22.740" level="INFO">@{XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_LIST} = [ {'CarrierName': 'Gnome Shipping D3', 'Country': 'USA', 'DotNumber': 123456, 'Language': 'English', 'OrganizationId': 'redhow', 'OrganizationName': 'red how', 'ParentOrganizationId': 46663, 'ParentOr...</msg>
<msg timestamp="20200107 09:49:22.740" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:22.739" endtime="20200107 09:49:22.740"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Language=${XRS_GENERAL_INFORMATION.Localization.Language}</arg>
<arg>OrganizationId=${FAKE_TEST_ORGANIZATION_ID_1}</arg>
<arg>OrganizationName=${FAKE_TEST_ORGANIZATION_NAME_1}Modified</arg>
<arg>ParentOrganizationId=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
</arguments>
<assign>
<var>&amp;{XRS_AWS_WEBSERVICE_PUT_TEST_ORGANIZATION_1_DICT}</var>
</assign>
<msg timestamp="20200107 09:49:22.740" level="TRACE">Arguments: [ 'Language=${XRS_GENERAL_INFORMATION.Localization.Language}' | 'OrganizationId=${FAKE_TEST_ORGANIZATION_ID_1}' | 'OrganizationName=${FAKE_TEST_ORGANIZATION_NAME_1}Modified' | 'ParentOrganizationId=${XRS_GENERAL_INFORMATION.Company.Company_ID}' ]</msg>
<msg timestamp="20200107 09:49:22.740" level="TRACE">Return: {'Language': 'English',
 'OrganizationId': 'redhow',
 'OrganizationName': 'red howModified',
 'ParentOrganizationId': 46663}</msg>
<msg timestamp="20200107 09:49:22.741" level="INFO">&amp;{XRS_AWS_WEBSERVICE_PUT_TEST_ORGANIZATION_1_DICT} = { Language=English | OrganizationId=redhow | OrganizationName=red howModified | ParentOrganizationId=46663 }</msg>
<status status="PASS" starttime="20200107 09:49:22.740" endtime="20200107 09:49:22.741"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${XRS_AWS_WEBSERVICE_PUT_TEST_ORGANIZATION_1_DICT}</arg>
</arguments>
<assign>
<var>@{XRS_AWS_WEBSERVICE_PUT_TEST_ORGANIZATION_LIST}</var>
</assign>
<msg timestamp="20200107 09:49:22.741" level="TRACE">Arguments: [ {'Language': 'English',
 'OrganizationId': 'redhow',
 'OrganizationName': 'red howModified',
 'ParentOrganizationId': 46663} ]</msg>
<msg timestamp="20200107 09:49:22.741" level="TRACE">Return: [{'Language': 'English',
  'OrganizationId': 'redhow',
  'OrganizationName': 'red howModified',
  'ParentOrganizationId': 46663}]</msg>
<msg timestamp="20200107 09:49:22.741" level="INFO">@{XRS_AWS_WEBSERVICE_PUT_TEST_ORGANIZATION_LIST} = [ {'Language': 'English', 'OrganizationId': 'redhow', 'OrganizationName': 'red howModified', 'ParentOrganizationId': 46663} ]</msg>
<status status="PASS" starttime="20200107 09:49:22.741" endtime="20200107 09:49:22.741"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_PUT_TEST_ORGANIZATION_LIST}</arg>
</arguments>
<msg timestamp="20200107 09:49:22.741" level="TRACE">Arguments: [ '@{XRS_AWS_WEBSERVICE_PUT_TEST_ORGANIZATION_LIST}' ]</msg>
<msg timestamp="20200107 09:49:22.742" level="INFO">@{XRS_AWS_WEBSERVICE_PUT_TEST_ORGANIZATION_LIST} = [ {'Language': 'English', 'OrganizationId': 'redhow', 'OrganizationName': 'red howModified', 'ParentOrganizationId': 46663} ]</msg>
<msg timestamp="20200107 09:49:22.742" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:22.741" endtime="20200107 09:49:22.742"></status>
</kw>
<msg timestamp="20200107 09:49:22.742" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:22.735" endtime="20200107 09:49:22.742"></status>
</kw>
<msg timestamp="20200107 09:49:22.742" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:22.733" endtime="20200107 09:49:22.742"></status>
</kw>
<test id="s1-s1-s3-t1" name="Validate AWS XRS Get Organization By SID REST Web Services Returns 200 OK With Parent Organization SID">
<kw name="Get Organization By OrganizationSID" library="Organization">
<doc>Get Organization information for a particular Organization using the OrganizationSID</doc>
<arguments>
<arg>${XRS_GENERAL_INFORMATION.Company.ParentOrganizationSid}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:22.743" level="TRACE">Arguments: [ ${organization_sid}=414 ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Organization}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_GET_ORGANIZATION}/${organization_sid}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:22.743" level="TRACE">Arguments: [ 'OrganizationWebService.svc/organization/414' ]</msg>
<msg timestamp="20200107 09:49:22.743" level="TRACE">Return: 'OrganizationWebService.svc/organization/414'</msg>
<msg timestamp="20200107 09:49:22.743" level="INFO">${uri} = OrganizationWebService.svc/organization/414</msg>
<status status="PASS" starttime="20200107 09:49:22.743" endtime="20200107 09:49:22.743"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:22.744" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'OrganizationWebService.svc/organization/414' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:22.744" level="INFO">GET Request using : uri=OrganizationWebService.svc/organization/414, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:22.746" level="DEBUG">Starting new HTTPS connection (1): d3ws.xataxrs.com:443</msg>
<msg timestamp="20200107 09:49:23.666" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /OrganizationWebService.svc/organization/414 HTTP/1.1" 200 657</msg>
<msg timestamp="20200107 09:49:23.668" level="DEBUG">GET Response : status=200, reason=OK
{"Address1":"12900 Whitewater Dr","Address2":"Suite 300","AllowSharedResourceGroup":true,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"Minnetonka","Country":"USA","CreateDate":"\/Date(1537828533000-0700)\/","DotNumber":"123456","FleetViewRefresh":5,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1574816207411-0800)\/","OrganizationId":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSid":414,"ParentOrganizationId":null,"ParentOrganizationSid":0,"PostalCode":"55343","State":"Minnesota","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"}</msg>
<msg timestamp="20200107 09:49:23.668" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:23.669" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:22.744" endtime="20200107 09:49:23.669"></status>
</kw>
<msg timestamp="20200107 09:49:23.670" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:23.670" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:22.743" endtime="20200107 09:49:23.670"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:23.674" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:23.675" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:23.675" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:23.673" endtime="20200107 09:49:23.675"></status>
</kw>
<doc>Verifies that a Organization with a specific number does not exist</doc>
<tags>
<tag>awsxrsorganizationrestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:22.742" endtime="20200107 09:49:23.677" critical="yes"></status>
</test>
<test id="s1-s1-s3-t2" name="Validate AWS XRS Post Organization REST Web Services Returns Caption &quot;Request succeeded.&quot;">
<kw name="Post Organizations" library="Organization">
<doc>Calls the Post Method on Organizations.
Accepts a list of json objects
Json field definitions:
Address1
The Address of the organization.
Defaults to Parent Organization's value.
Address2
The Address of the organization.
Defaults to Parent Organization's value.
AllowSharedResourceGroup
An advanced feature, users can view and report on shared resources across organizations.
See Resource Group Field Definitions for more information.
AllowSubscriptionChange
When set to True, Omnitracs XRS will track any changes that affect subscription levels
(adding subscribers, or moving vehicles or drivers between organizations).
The customer will be billed based on the changes.
When set to False, customers must contact Omnitracs XRS or their sales channel for subscription changes.
BillingOrganizationId
The ID of the Billing Organization.
BillingOrganizationSid
The SID of the Billing Organization.
This value is generated automatically by Omnitracs XRS and can be retrieved using the GET method.
CarrierName
DOT-specific carrier name.
City
The name of the city where the organization is based.
Country
The name of the country where the organization is based.
CreateDate
The date and time the account was created.
The value of this field is Read Only and cannot be modified using PUT or POST commands.
DotNumber
Company's US DOT Number.
FleetViewRefresh
A read only field indicating the ID of the last driver which logged into the Organization.
Language
A read only field indicating the name of the last driver which logged into the Organization.
ModifiedBy
The SID of the last Omnitracs XRS User that made modifications to the record.
ModifiedDate
The Date and Time the site record was last modified.
OrganizationID
The user-defined ID of the organization.
OrganizationName
A read-only field containing the name of the organization to which the Organization is assigned.
OrganizationSid
The internal system generated ID (primary key) of the Organization in Omnitracs XRS.
This value can be retrieved using the GET method.
ParentOrganizationID
The internal system generated ID (primary key) of the Parent Organization in Omnitracs XRS.
Note: This field is required if a ParentOrganizationSID value is not specified.
ParentOrganizationSid
The ID of the parent organization.
Note: This field is required if a Parent OrganizationID value is not specified.
PostalCode
The 5 to 9 digit zip code for the organization.
State
The state, province or territory for the organization.
Status
Indicates whether the Organization record is active within Omnitracs XRS.
TimeZone
Identifies the Time Zone the Organization is located in.
UnitOfMeasure
The unit of measure selected for this organization. This applies to all performance and compliance based reporting.
Standard (MPG)
Metric (KM/L)</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_LIST}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:23.684" level="TRACE">Arguments: [ @{list_data}=[{'CarrierName': 'Gnome Shipping D3',
  'Country': 'USA',
  'DotNumber': 123456,
  'Language': 'English',
  'OrganizationId': 'redhow',
  'OrganizationName': 'red how',
  'ParentOrganizationId': 46663,
  'ParentOrganizationSid': 414,
  'TimeZone': 'CST'}] ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Organization}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_ORGANIZATIONS}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:23.686" level="TRACE">Arguments: [ 'OrganizationWebService.svc/organizations' ]</msg>
<msg timestamp="20200107 09:49:23.686" level="TRACE">Return: 'OrganizationWebService.svc/organizations'</msg>
<msg timestamp="20200107 09:49:23.686" level="INFO">${uri} = OrganizationWebService.svc/organizations</msg>
<status status="PASS" starttime="20200107 09:49:23.685" endtime="20200107 09:49:23.686"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>json=${list_data}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:23.687" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'OrganizationWebService.svc/organizations' | json=[{'CarrierName': 'Gnome Shipping D3',
  'Country': 'USA',
  'DotNumber': 123456,
  'Language': 'English',
  'OrganizationId': 'redhow',
  'OrganizationName': 'red how',
  'ParentOrganizationId': 46663,
  'ParentOrganizationSid': 414,
  'TimeZone': 'CST'}] | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:23.688" level="INFO">POST Request using : uri=OrganizationWebService.svc/organizations, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=[{'CarrierName': 'Gnome Shipping D3', 'Country': 'USA', 'DotNumber': 123456, 'Language': 'English', 'OrganizationId': 'redhow', 'OrganizationName': 'red how', 'ParentOrganizationId': 46663, 'ParentOrganizationSid': 414, 'TimeZone': 'CST'}]</msg>
<msg timestamp="20200107 09:49:30.064" level="DEBUG">https://d3ws.xataxrs.com:443 "POST /OrganizationWebService.svc/organizations HTTP/1.1" 200 194</msg>
<msg timestamp="20200107 09:49:30.065" level="DEBUG">POST Response : status=200, reason=OK
[{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Organization Added Successfully.","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."}]</msg>
<msg timestamp="20200107 09:49:30.065" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:30.065" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:23.686" endtime="20200107 09:49:30.065"></status>
</kw>
<msg timestamp="20200107 09:49:30.066" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:30.066" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:23.684" endtime="20200107 09:49:30.066"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20200107 09:49:30.068" level="TRACE">Arguments: [ b'[{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Organization Added Successfully.","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."}]' ]</msg>
<msg timestamp="20200107 09:49:30.069" level="INFO">To JSON using : content=[{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Organization Added Successfully.","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."}] </msg>
<msg timestamp="20200107 09:49:30.069" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20200107 09:49:30.069" level="TRACE">Return: [{'Caption': 'Request succeeded.',
  'Code': '12538021530103185408',
  'Description': 'Organization Added Successfully.',
  'Id': 'redhow',
  'ObjectName': 'Organization',
  'SID': 533,
  'Title': 'Request succeeded.'}]</msg>
<msg timestamp="20200107 09:49:30.071" level="INFO">${json_response} = [{'Caption': 'Request succeeded.', 'Code': '12538021530103185408', 'Description': 'Organization Added Successfully.', 'Id': 'redhow', 'ObjectName': 'Organization', 'SID': 533, 'Title': 'Request succee...</msg>
<status status="PASS" starttime="20200107 09:49:30.068" endtime="20200107 09:49:30.071"></status>
</kw>
<kw name="${r} IN [ @{json_response} ]" type="for">
<kw name="${r} = {'Caption': 'Request succeeded.', 'Code': '12538021530103185408', 'Description': 'Organization Added Successfully.', 'Id': 'redhow', 'ObjectName': 'Organization', 'SID': 533, 'Title': 'Request succeed..." type="foritem">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${r}[Caption]</arg>
<arg>Request succeeded.</arg>
</arguments>
<msg timestamp="20200107 09:49:30.076" level="TRACE">Arguments: [ 'Request succeeded.' | 'Request succeeded.' ]</msg>
<msg timestamp="20200107 09:49:30.076" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:30.077" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:30.075" endtime="20200107 09:49:30.077"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${r}[SID]</arg>
</arguments>
<assign>
<var>${XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_SID}</var>
</assign>
<msg timestamp="20200107 09:49:30.078" level="TRACE">Arguments: [ 533 ]</msg>
<msg timestamp="20200107 09:49:30.078" level="TRACE">Return: 533</msg>
<msg timestamp="20200107 09:49:30.078" level="INFO">${XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_SID} = 533</msg>
<status status="PASS" starttime="20200107 09:49:30.077" endtime="20200107 09:49:30.078"></status>
</kw>
<status status="PASS" starttime="20200107 09:49:30.074" endtime="20200107 09:49:30.078"></status>
</kw>
<status status="PASS" starttime="20200107 09:49:30.073" endtime="20200107 09:49:30.078"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_SID}</arg>
</arguments>
<msg timestamp="20200107 09:49:30.080" level="TRACE">Arguments: [ '${XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_SID}' ]</msg>
<msg timestamp="20200107 09:49:30.080" level="INFO">${XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_SID} = 533</msg>
<msg timestamp="20200107 09:49:30.080" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:30.079" endtime="20200107 09:49:30.080"></status>
</kw>
<doc>Posts a Organization and expects a Caption value "Request succeeded."</doc>
<tags>
<tag>awsxrsorganizationrestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:23.681" endtime="20200107 09:49:30.081" critical="yes"></status>
</test>
<test id="s1-s1-s3-t3" name="Validate AWS XRS Get Organization By SID REST Web Services Returns 200 OK With New Organization">
<kw name="Get Organization By OrganizationSID" library="Organization">
<doc>Get Organization information for a particular Organization using the OrganizationSID</doc>
<arguments>
<arg>${XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_SID}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:30.085" level="TRACE">Arguments: [ ${organization_sid}=533 ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Organization}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_GET_ORGANIZATION}/${organization_sid}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:30.086" level="TRACE">Arguments: [ 'OrganizationWebService.svc/organization/533' ]</msg>
<msg timestamp="20200107 09:49:30.086" level="TRACE">Return: 'OrganizationWebService.svc/organization/533'</msg>
<msg timestamp="20200107 09:49:30.086" level="INFO">${uri} = OrganizationWebService.svc/organization/533</msg>
<status status="PASS" starttime="20200107 09:49:30.086" endtime="20200107 09:49:30.086"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:30.087" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'OrganizationWebService.svc/organization/533' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:30.087" level="INFO">GET Request using : uri=OrganizationWebService.svc/organization/533, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:30.544" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /OrganizationWebService.svc/organization/533 HTTP/1.1" 200 602</msg>
<msg timestamp="20200107 09:49:30.546" level="DEBUG">GET Response : status=200, reason=OK
{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1578440936469-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1578440937362-0800)\/","OrganizationId":"redhow","OrganizationName":"red how","OrganizationSid":533,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"}</msg>
<msg timestamp="20200107 09:49:30.546" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:30.547" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:30.087" endtime="20200107 09:49:30.547"></status>
</kw>
<msg timestamp="20200107 09:49:30.548" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:30.548" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:30.085" endtime="20200107 09:49:30.548"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:30.552" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:30.553" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:30.553" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:30.551" endtime="20200107 09:49:30.553"></status>
</kw>
<doc>Verifies that a posted Organization now exists</doc>
<tags>
<tag>awsxrsorganizationrestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:30.084" endtime="20200107 09:49:30.555" critical="yes"></status>
</test>
<test id="s1-s1-s3-t4" name="Validate AWS XRS Put Organization REST Web Services Modifies Description Successfully">
<kw name="Put Organizations" library="Organization">
<doc>Calls the Put Method on Organizations.
Accepts a list of json objects
See Json field definitions in the "Post Organizations" Keyword</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_PUT_TEST_ORGANIZATION_LIST}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:30.564" level="TRACE">Arguments: [ @{list_data}=[{'Language': 'English',
  'OrganizationId': 'redhow',
  'OrganizationName': 'red howModified',
  'ParentOrganizationId': 46663}] ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Organization}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_PUT_ORGANIZATIONS}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:30.565" level="TRACE">Arguments: [ 'OrganizationWebService.svc/organizations/update' ]</msg>
<msg timestamp="20200107 09:49:30.565" level="TRACE">Return: 'OrganizationWebService.svc/organizations/update'</msg>
<msg timestamp="20200107 09:49:30.565" level="INFO">${uri} = OrganizationWebService.svc/organizations/update</msg>
<status status="PASS" starttime="20200107 09:49:30.564" endtime="20200107 09:49:30.565"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary">
<doc>Send a PUT request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>json=${list_data}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:30.566" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'OrganizationWebService.svc/organizations/update' | json=[{'Language': 'English',
  'OrganizationId': 'redhow',
  'OrganizationName': 'red howModified',
  'ParentOrganizationId': 46663}] | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:30.567" level="INFO">PUT Request using : uri=OrganizationWebService.svc/organizations/update, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=[{'Language': 'English', 'OrganizationId': 'redhow', 'OrganizationName': 'red howModified', 'ParentOrganizationId': 46663}]</msg>
<msg timestamp="20200107 09:49:31.122" level="DEBUG">https://d3ws.xataxrs.com:443 "PUT /OrganizationWebService.svc/organizations/update HTTP/1.1" 200 195</msg>
<msg timestamp="20200107 09:49:31.124" level="DEBUG">PUT Response : status=200, reason=OK
[{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Organization Edited Successfully.","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."}]</msg>
<msg timestamp="20200107 09:49:31.124" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:31.125" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:30.565" endtime="20200107 09:49:31.125"></status>
</kw>
<msg timestamp="20200107 09:49:31.126" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:31.126" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:30.563" endtime="20200107 09:49:31.126"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20200107 09:49:31.129" level="TRACE">Arguments: [ b'[{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Organization Edited Successfully.","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."}]' ]</msg>
<msg timestamp="20200107 09:49:31.129" level="INFO">To JSON using : content=[{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Organization Edited Successfully.","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."}] </msg>
<msg timestamp="20200107 09:49:31.129" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20200107 09:49:31.130" level="TRACE">Return: [{'Caption': 'Request succeeded.',
  'Code': '12538021530103185408',
  'Description': 'Organization Edited Successfully.',
  'Id': 'redhow',
  'ObjectName': 'Organization',
  'SID': 533,
  'Title': 'Request succeeded.'}]</msg>
<msg timestamp="20200107 09:49:31.130" level="INFO">${json_response} = [{'Caption': 'Request succeeded.', 'Code': '12538021530103185408', 'Description': 'Organization Edited Successfully.', 'Id': 'redhow', 'ObjectName': 'Organization', 'SID': 533, 'Title': 'Request succe...</msg>
<status status="PASS" starttime="20200107 09:49:31.128" endtime="20200107 09:49:31.130"></status>
</kw>
<kw name="${r} IN [ @{json_response} ]" type="for">
<kw name="${r} = {'Caption': 'Request succeeded.', 'Code': '12538021530103185408', 'Description': 'Organization Edited Successfully.', 'Id': 'redhow', 'ObjectName': 'Organization', 'SID': 533, 'Title': 'Request succee..." type="foritem">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${r}[Description]</arg>
<arg>Organization Edited Successfully.</arg>
</arguments>
<msg timestamp="20200107 09:49:31.134" level="TRACE">Arguments: [ 'Organization Edited Successfully.' | 'Organization Edited Successfully.' ]</msg>
<msg timestamp="20200107 09:49:31.134" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:31.134" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:31.132" endtime="20200107 09:49:31.135"></status>
</kw>
<status status="PASS" starttime="20200107 09:49:31.132" endtime="20200107 09:49:31.135"></status>
</kw>
<status status="PASS" starttime="20200107 09:49:31.131" endtime="20200107 09:49:31.135"></status>
</kw>
<doc>Posts a Organization and expects a Code value of 201</doc>
<tags>
<tag>awsxrsorganizationrestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:30.561" endtime="20200107 09:49:31.136" critical="yes"></status>
</test>
<test id="s1-s1-s3-t5" name="Validate AWS XRS Get Organizations By Parameters REST Web Services Returns 200 OK">
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:49:31.140" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:49:31.141" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:49:31.141" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:49:31.141" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:49:31.141" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:49:31.140" endtime="20200107 09:49:31.141"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationSid=${XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_SID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:49:31.142" level="TRACE">Arguments: [ 'OrganizationSid=${XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_SID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:49:31.143" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationSid': 533}</msg>
<msg timestamp="20200107 09:49:31.143" level="INFO">&amp;{params} = { OrganizationSid=533 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:49:31.142" endtime="20200107 09:49:31.143"></status>
</kw>
<kw name="Verify Get Organizations With Forward Slash Returns 200 OK">
<doc>Verify that using a '/' in the URI returns 200 OK</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<msg timestamp="20200107 09:49:31.144" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationSid': 533} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/</arg>
</arguments>
<assign>
<var>${ending_character}</var>
</assign>
<msg timestamp="20200107 09:49:31.145" level="TRACE">Arguments: [ '/' ]</msg>
<msg timestamp="20200107 09:49:31.145" level="TRACE">Return: '/'</msg>
<msg timestamp="20200107 09:49:31.145" level="INFO">${ending_character} = /</msg>
<status status="PASS" starttime="20200107 09:49:31.145" endtime="20200107 09:49:31.145"></status>
</kw>
<kw name="Get Organizations With URI Ending With ${ending_character} And Parameters &amp;{params}" library="Organization">
<doc>This Keyword modifies character between the base uri and the parameters
This will get Organizations that match the provided parameters.
Params can be named individually or within a Dictionary
See the Get Organizations Keyword for param definitions.</doc>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:31.145" level="TRACE">Arguments: [ ${ending_character}='/' | ${params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationSid': 533} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Organization}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_ORGANIZATIONS}${ending_character}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:31.146" level="TRACE">Arguments: [ 'OrganizationWebService.svc/organizations/' ]</msg>
<msg timestamp="20200107 09:49:31.146" level="TRACE">Return: 'OrganizationWebService.svc/organizations/'</msg>
<msg timestamp="20200107 09:49:31.146" level="INFO">${uri} = OrganizationWebService.svc/organizations/</msg>
<status status="PASS" starttime="20200107 09:49:31.146" endtime="20200107 09:49:31.146"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:31.147" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'OrganizationWebService.svc/organizations/' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} | params={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationSid': 533} ]</msg>
<msg timestamp="20200107 09:49:31.147" level="INFO">GET Request using : uri=OrganizationWebService.svc/organizations/, params={'OrganizationSid': 533, 'IsActive': 'True', 'AsOfDateTime': '01/07/2020'}, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:31.594" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /OrganizationWebService.svc/organizations/?OrganizationSid=533&amp;IsActive=True&amp;AsOfDateTime=01%2F07%2F2020 HTTP/1.1" 200 604</msg>
<msg timestamp="20200107 09:49:31.595" level="DEBUG">GET Response : status=200, reason=OK
[{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1578440936469-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1578440937362-0800)\/","OrganizationId":"redhow","OrganizationName":"red how","OrganizationSid":533,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"}]</msg>
<msg timestamp="20200107 09:49:31.595" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:31.595" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:31.147" endtime="20200107 09:49:31.595"></status>
</kw>
<msg timestamp="20200107 09:49:31.596" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:31.596" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:31.145" endtime="20200107 09:49:31.596"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:31.596" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:31.597" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:31.597" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:31.596" endtime="20200107 09:49:31.597"></status>
</kw>
<msg timestamp="20200107 09:49:31.597" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:31.144" endtime="20200107 09:49:31.597"></status>
</kw>
<kw name="Verify Get Organizations Without Forward Slash Returns 200 OK">
<doc>Verify that not using a '/' in the URI returns 200 OK</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<msg timestamp="20200107 09:49:31.598" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationSid': 533} ]</msg>
<kw name="Get Organizations" library="Organization">
<doc>Call the Get Method on Organizations.
This will get Organizations that match the provided parameters.
Params can be named individually or within a Dictionary
Param Definitions:
AsOfDateTime
Tells the service to return only the data that changed since the specified date and time.
The date and time are associated with the last modified date and time of the record.
System Limit: 30 days
Status
Filters results to active organizations only.
Valid Values: True False Both
Active (same as True)
Inactive (same as False)
Limit
Used in conjunction with the Offset parameter to implement paging.
Limits the number of results to a specified number.
System Limit: 10,000
Offset
Used in conjunction with the Limit parameter to implement paging.
Represents a page number for the starting point of the return set.
OrganizationId
Limits results to organizations that fall under the specified organization.
ResourceGroupId
Limits results to Organizations in one or more resource groups.
OrganizationSid
Limits results to organizations that fall under the specified organization.
ResourceGroupSid
Limits results to Organizations in one or more resource groups.</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:31.600" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationSid': 533} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Organization}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_ORGANIZATIONS}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:31.600" level="TRACE">Arguments: [ 'OrganizationWebService.svc/organizations' ]</msg>
<msg timestamp="20200107 09:49:31.600" level="TRACE">Return: 'OrganizationWebService.svc/organizations'</msg>
<msg timestamp="20200107 09:49:31.601" level="INFO">${uri} = OrganizationWebService.svc/organizations</msg>
<status status="PASS" starttime="20200107 09:49:31.600" endtime="20200107 09:49:31.601"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:31.601" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'OrganizationWebService.svc/organizations' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} | params={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationSid': 533} ]</msg>
<msg timestamp="20200107 09:49:31.602" level="INFO">GET Request using : uri=OrganizationWebService.svc/organizations, params={'OrganizationSid': 533, 'IsActive': 'True', 'AsOfDateTime': '01/07/2020'}, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:32.059" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /OrganizationWebService.svc/organizations?OrganizationSid=533&amp;IsActive=True&amp;AsOfDateTime=01%2F07%2F2020 HTTP/1.1" 200 604</msg>
<msg timestamp="20200107 09:49:32.060" level="DEBUG">GET Response : status=200, reason=OK
[{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1578440936469-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1578440937362-0800)\/","OrganizationId":"redhow","OrganizationName":"red how","OrganizationSid":533,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"}]</msg>
<msg timestamp="20200107 09:49:32.060" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:32.060" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:31.601" endtime="20200107 09:49:32.060"></status>
</kw>
<msg timestamp="20200107 09:49:32.061" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:32.061" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:31.599" endtime="20200107 09:49:32.061"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:32.062" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:32.062" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:32.063" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:32.061" endtime="20200107 09:49:32.063"></status>
</kw>
<msg timestamp="20200107 09:49:32.063" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:31.598" endtime="20200107 09:49:32.063"></status>
</kw>
<doc>Get Organizations with basic parameters</doc>
<tags>
<tag>awsxrsorganizationrestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:31.138" endtime="20200107 09:49:32.065" critical="yes"></status>
</test>
<test id="s1-s1-s3-t6" name="Validate AWS XRS Get Organizations By Parameters REST Web Services Returns 200 OK With Raw String URI">
<kw name="Verify Get Organizations Raw String URI With /? Returns 200 OK">
<doc>Verify that using the given character string in the raw URI string returns 200 OK</doc>
<msg timestamp="20200107 09:49:32.071" level="TRACE">Arguments: [ ${character_string}='/?' ]</msg>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:49:32.072" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:49:32.072" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:49:32.072" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:49:32.072" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:49:32.072" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:49:32.071" endtime="20200107 09:49:32.072"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationSid=${XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_SID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:49:32.073" level="TRACE">Arguments: [ 'OrganizationSid=${XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_SID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:49:32.074" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationSid': 533}</msg>
<msg timestamp="20200107 09:49:32.074" level="INFO">&amp;{params} = { OrganizationSid=533 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:49:32.073" endtime="20200107 09:49:32.074"></status>
</kw>
<kw name="Create URI String With" library="URIStringBuilderTool">
<doc>Helper Keyword to construct the request uri with different character strings
base_uri = webservice uri
request_type = request extension for the webservice
character_string = final character of the uri. i.e. /, /?, etc ...</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Organization}</arg>
<arg>${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_ORGANIZATIONS}</arg>
<arg>${character_string}</arg>
</arguments>
<assign>
<var>${uri_string}</var>
</assign>
<msg timestamp="20200107 09:49:32.076" level="TRACE">Arguments: [ ${base_uri}='OrganizationWebService.svc' | ${request_type}='/organizations' | ${character_string}='/?' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${base_uri}${request_type}${character_string}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:32.076" level="TRACE">Arguments: [ 'OrganizationWebService.svc/organizations/?' ]</msg>
<msg timestamp="20200107 09:49:32.077" level="TRACE">Return: 'OrganizationWebService.svc/organizations/?'</msg>
<msg timestamp="20200107 09:49:32.077" level="INFO">${uri} = OrganizationWebService.svc/organizations/?</msg>
<status status="PASS" starttime="20200107 09:49:32.076" endtime="20200107 09:49:32.077"></status>
</kw>
<msg timestamp="20200107 09:49:32.077" level="TRACE">Return: 'OrganizationWebService.svc/organizations/?'</msg>
<msg timestamp="20200107 09:49:32.077" level="INFO">${uri_string} = OrganizationWebService.svc/organizations/?</msg>
<status status="PASS" starttime="20200107 09:49:32.074" endtime="20200107 09:49:32.077"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${uri_string}OrganizationSid=${params.OrganizationSid}&amp;IsActive=${params.IsActive}&amp;AsOfDateTime=${params.AsOfDateTime}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:32.078" level="TRACE">Arguments: [ 'OrganizationWebService.svc/organizations/?OrganizationSid=533&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' ]</msg>
<msg timestamp="20200107 09:49:32.078" level="TRACE">Return: 'OrganizationWebService.svc/organizations/?OrganizationSid=533&amp;IsActive=True&amp;AsOfDateTime=01/07/2020'</msg>
<msg timestamp="20200107 09:49:32.078" level="INFO">${uri} = OrganizationWebService.svc/organizations/?OrganizationSid=533&amp;IsActive=True&amp;AsOfDateTime=01/07/2020</msg>
<status status="PASS" starttime="20200107 09:49:32.077" endtime="20200107 09:49:32.078"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:32.080" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'OrganizationWebService.svc/organizations/?OrganizationSid=533&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:32.080" level="INFO">GET Request using : uri=OrganizationWebService.svc/organizations/?OrganizationSid=533&amp;IsActive=True&amp;AsOfDateTime=01/07/2020, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:32.538" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /OrganizationWebService.svc/organizations/?OrganizationSid=533&amp;IsActive=True&amp;AsOfDateTime=01/07/2020 HTTP/1.1" 200 604</msg>
<msg timestamp="20200107 09:49:32.541" level="DEBUG">GET Response : status=200, reason=OK
[{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1578440936469-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1578440937362-0800)\/","OrganizationId":"redhow","OrganizationName":"red how","OrganizationSid":533,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"}]</msg>
<msg timestamp="20200107 09:49:32.541" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:32.542" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:32.079" endtime="20200107 09:49:32.542"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:32.544" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:32.545" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:32.545" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:32.543" endtime="20200107 09:49:32.546"></status>
</kw>
<msg timestamp="20200107 09:49:32.546" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:32.070" endtime="20200107 09:49:32.546"></status>
</kw>
<kw name="Verify Get Organizations Raw String URI With ? Returns 200 OK">
<doc>Verify that using the given character string in the raw URI string returns 200 OK</doc>
<msg timestamp="20200107 09:49:32.549" level="TRACE">Arguments: [ ${character_string}='?' ]</msg>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:49:32.551" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:49:32.552" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:49:32.552" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:49:32.552" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:49:32.552" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:49:32.550" endtime="20200107 09:49:32.552"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationSid=${XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_SID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:49:32.553" level="TRACE">Arguments: [ 'OrganizationSid=${XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_SID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:49:32.554" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationSid': 533}</msg>
<msg timestamp="20200107 09:49:32.554" level="INFO">&amp;{params} = { OrganizationSid=533 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:49:32.553" endtime="20200107 09:49:32.555"></status>
</kw>
<kw name="Create URI String With" library="URIStringBuilderTool">
<doc>Helper Keyword to construct the request uri with different character strings
base_uri = webservice uri
request_type = request extension for the webservice
character_string = final character of the uri. i.e. /, /?, etc ...</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Organization}</arg>
<arg>${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_ORGANIZATIONS}</arg>
<arg>${character_string}</arg>
</arguments>
<assign>
<var>${uri_string}</var>
</assign>
<msg timestamp="20200107 09:49:32.556" level="TRACE">Arguments: [ ${base_uri}='OrganizationWebService.svc' | ${request_type}='/organizations' | ${character_string}='?' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${base_uri}${request_type}${character_string}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:32.557" level="TRACE">Arguments: [ 'OrganizationWebService.svc/organizations?' ]</msg>
<msg timestamp="20200107 09:49:32.557" level="TRACE">Return: 'OrganizationWebService.svc/organizations?'</msg>
<msg timestamp="20200107 09:49:32.557" level="INFO">${uri} = OrganizationWebService.svc/organizations?</msg>
<status status="PASS" starttime="20200107 09:49:32.557" endtime="20200107 09:49:32.558"></status>
</kw>
<msg timestamp="20200107 09:49:32.558" level="TRACE">Return: 'OrganizationWebService.svc/organizations?'</msg>
<msg timestamp="20200107 09:49:32.558" level="INFO">${uri_string} = OrganizationWebService.svc/organizations?</msg>
<status status="PASS" starttime="20200107 09:49:32.555" endtime="20200107 09:49:32.558"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${uri_string}OrganizationSid=${params.OrganizationSid}&amp;IsActive=${params.IsActive}&amp;AsOfDateTime=${params.AsOfDateTime}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:32.559" level="TRACE">Arguments: [ 'OrganizationWebService.svc/organizations?OrganizationSid=533&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' ]</msg>
<msg timestamp="20200107 09:49:32.559" level="TRACE">Return: 'OrganizationWebService.svc/organizations?OrganizationSid=533&amp;IsActive=True&amp;AsOfDateTime=01/07/2020'</msg>
<msg timestamp="20200107 09:49:32.559" level="INFO">${uri} = OrganizationWebService.svc/organizations?OrganizationSid=533&amp;IsActive=True&amp;AsOfDateTime=01/07/2020</msg>
<status status="PASS" starttime="20200107 09:49:32.558" endtime="20200107 09:49:32.560"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:32.560" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'OrganizationWebService.svc/organizations?OrganizationSid=533&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:32.561" level="INFO">GET Request using : uri=OrganizationWebService.svc/organizations?OrganizationSid=533&amp;IsActive=True&amp;AsOfDateTime=01/07/2020, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:33.011" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /OrganizationWebService.svc/organizations?OrganizationSid=533&amp;IsActive=True&amp;AsOfDateTime=01/07/2020 HTTP/1.1" 200 604</msg>
<msg timestamp="20200107 09:49:33.012" level="DEBUG">GET Response : status=200, reason=OK
[{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1578440936469-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1578440937362-0800)\/","OrganizationId":"redhow","OrganizationName":"red how","OrganizationSid":533,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"}]</msg>
<msg timestamp="20200107 09:49:33.012" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:33.013" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:32.560" endtime="20200107 09:49:33.013"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:33.014" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:33.015" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:33.015" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:33.013" endtime="20200107 09:49:33.015"></status>
</kw>
<msg timestamp="20200107 09:49:33.015" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:32.549" endtime="20200107 09:49:33.015"></status>
</kw>
<doc>Get Organizations with basic parameters using a raw URI string</doc>
<tags>
<tag>awsxrsorganizationrestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:32.068" endtime="20200107 09:49:33.017" critical="yes"></status>
</test>
<test id="s1-s1-s3-t7" name="Validate AWS XRS Get Organizations By ID REST Web Services Returns 200 OK">
<kw name="Get Organizations By ID" library="Organization">
<doc>Get organizations by ID.</doc>
<arguments>
<arg>${XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_1_DICT.OrganizationId}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:33.026" level="TRACE">Arguments: [ ${organization_id}='redhow' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Organization}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_ORGANIZATIONS}/${organization_id}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:33.028" level="TRACE">Arguments: [ 'OrganizationWebService.svc/organizations/redhow' ]</msg>
<msg timestamp="20200107 09:49:33.028" level="TRACE">Return: 'OrganizationWebService.svc/organizations/redhow'</msg>
<msg timestamp="20200107 09:49:33.028" level="INFO">${uri} = OrganizationWebService.svc/organizations/redhow</msg>
<status status="PASS" starttime="20200107 09:49:33.027" endtime="20200107 09:49:33.028"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:33.029" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'OrganizationWebService.svc/organizations/redhow' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:33.030" level="INFO">GET Request using : uri=OrganizationWebService.svc/organizations/redhow, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:33.458" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /OrganizationWebService.svc/organizations/redhow HTTP/1.1" 200 602</msg>
<msg timestamp="20200107 09:49:33.460" level="DEBUG">GET Response : status=200, reason=OK
{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1578440936469-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1578440937362-0800)\/","OrganizationId":"redhow","OrganizationName":"red how","OrganizationSid":533,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"}</msg>
<msg timestamp="20200107 09:49:33.460" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:33.461" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:33.028" endtime="20200107 09:49:33.461"></status>
</kw>
<msg timestamp="20200107 09:49:33.462" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:33.462" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:33.025" endtime="20200107 09:49:33.463"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:33.466" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:33.467" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:33.467" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:33.465" endtime="20200107 09:49:33.467"></status>
</kw>
<doc>Get organization by ID returns 200 OK</doc>
<tags>
<tag>awsxrsorganizationrestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:33.023" endtime="20200107 09:49:33.468" critical="yes"></status>
</test>
<test id="s1-s1-s3-t8" name="Validate AWS XRS Get Organizations REST Web Services For All Organizations Returns 200 OK">
<kw name="Get All Organizations" library="Organization">
<doc>Get attributes for all organizations.</doc>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:33.475" level="TRACE">Arguments: [  ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Organization}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_ORGANIZATIONS}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:33.477" level="TRACE">Arguments: [ 'OrganizationWebService.svc/organizations' ]</msg>
<msg timestamp="20200107 09:49:33.477" level="TRACE">Return: 'OrganizationWebService.svc/organizations'</msg>
<msg timestamp="20200107 09:49:33.477" level="INFO">${uri} = OrganizationWebService.svc/organizations</msg>
<status status="PASS" starttime="20200107 09:49:33.476" endtime="20200107 09:49:33.477"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:33.478" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'OrganizationWebService.svc/organizations' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:33.478" level="INFO">GET Request using : uri=OrganizationWebService.svc/organizations, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:34.680" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /OrganizationWebService.svc/organizations HTTP/1.1" 200 26721</msg>
<msg timestamp="20200107 09:49:34.733" level="DEBUG">GET Response : status=200, reason=OK
[{"Address1":"12900 Whitewater Dr","Address2":"Suite 300","AllowSharedResourceGroup":true,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"Minnetonka","Country":"USA","CreateDate":"\/Date(1537828533000-0700)\/","DotNumber":"123456","FleetViewRefresh":5,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1574816207411-0800)\/","OrganizationId":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSid":414,"ParentOrganizationId":null,"ParentOrganizationSid":0,"PostalCode":"55343","State":"Minnesota","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576132837331-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576132837491-0800)\/","OrganizationId":"adultmanager","OrganizationName":"adult manager","OrganizationSid":503,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576203698026-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576203698479-0800)\/","OrganizationId":"agebelieve","OrganizationName":"age believe","OrganizationSid":518,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576199130592-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576199130747-0800)\/","OrganizationId":"alonevalue","OrganizationName":"alone value","OrganizationSid":516,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576203947761-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576203947586-0800)\/","OrganizationId":"availabledevelopment","OrganizationName":"available development","OrganizationSid":520,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"12900 Whitewater Dr","Address2":"Suite 300","AllowSharedResourceGroup":true,"AllowSubscriptionChange":false,"BillingOrganizationId":"46663","BillingOrganizationSid":414,"CarrierName":"Gnome Shipping D3","City":"Minnetonka","Country":"USA","CreateDate":"\/Date(1556163634892-0700)\/","DotNumber":"123456","FleetViewRefresh":5,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1575348898444-0800)\/","OrganizationId":"Bob","OrganizationName":"Bob","OrganizationSid":482,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"55343","State":"Minnesota","Status":true,"TimeZone":"HST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576132502418-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576132502318-0800)\/","OrganizationId":"bytop","OrganizationName":"by top","OrganizationSid":501,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576203973165-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576203973436-0800)\/","OrganizationId":"carpopulation","OrganizationName":"car population","OrganizationSid":521,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1578008495669-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1578008495877-0800)\/","OrganizationId":"courtitself","OrganizationName":"court itself","OrganizationSid":532,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576204288823-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576204288762-0800)\/","OrganizationId":"designcourt","OrganizationName":"design court","OrganizationSid":523,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576132876437-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576132876598-0800)\/","OrganizationId":"directorcompare","OrganizationName":"director compare","OrganizationSid":504,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576198711058-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576198711082-0800)\/","OrganizationId":"discoveradd","OrganizationName":"discover add","OrganizationSid":513,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576122799498-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576122799351-0800)\/","OrganizationId":"Evaluate FakerLibrary.WordEvaluate FakerLibrary.Word","OrganizationName":"Evaluate FakerLibrary.Word Evaluate FakerLibrary.Word","OrganizationSid":499,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576122678864-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576122678742-0800)\/","OrganizationId":"FakerLibrary.WordFakerLibrary.Word","OrganizationName":"FakerLibrary.Word FakerLibrary.Word","OrganizationSid":498,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"12900 Whitewater Dr","Address2":"Suite 300","AllowSharedResourceGroup":true,"AllowSubscriptionChange":false,"BillingOrganizationId":"46663","BillingOrganizationSid":414,"CarrierName":"Gnome Shipping D3","City":"Minnetonka","Country":"USA","CreateDate":"\/Date(1575692062764-0800)\/","DotNumber":"123456","FleetViewRefresh":5,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576109206905-0800)\/","OrganizationId":"fghjfghjfghj","OrganizationName":"testme name","OrganizationSid":494,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"55343","State":"Minnesota","Status":true,"TimeZone":"NFLD","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576204315081-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576204314934-0800)\/","OrganizationId":"glasshair","OrganizationName":"glass hair","OrganizationSid":524,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576627049977-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576627049929-0800)\/","OrganizationId":"hundredwind","OrganizationName":"hundred wind","OrganizationSid":530,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576194403361-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576194403499-0800)\/","OrganizationId":"itselfmedia","OrganizationName":"itself media","OrganizationSid":511,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576205393649-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576205393420-0800)\/","OrganizationId":"leaderappear","OrganizationName":"leader appear","OrganizationSid":526,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576199029080-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576199029238-0800)\/","OrganizationId":"legscene","OrganizationName":"leg scene","OrganizationSid":515,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576193414920-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576193415165-0800)\/","OrganizationId":"lookstar","OrganizationName":"look star","OrganizationSid":506,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576111786284-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576111786488-0800)\/","OrganizationId":"neworgid","OrganizationName":"neworg name","OrganizationSid":495,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576113163095-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576113163460-0800)\/","OrganizationId":"neworgid2","OrganizationName":"neworg name2","OrganizationSid":496,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576198598102-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576198598271-0800)\/","OrganizationId":"nicescene","OrganizationName":"nice scene","OrganizationSid":512,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576198957632-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576198957614-0800)\/","OrganizationId":"officermain","OrganizationName":"officer main","OrganizationSid":514,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576193807638-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576193807711-0800)\/","OrganizationId":"onapply","OrganizationName":"on apply","OrganizationSid":509,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576203513711-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576203513717-0800)\/","OrganizationId":"pieceseries","OrganizationName":"piece series","OrganizationSid":517,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1578440936469-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1578440937362-0800)\/","OrganizationId":"redhow","OrganizationName":"red how","OrganizationSid":533,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"12900 Whitewater Dr","Address2":"Suite 300","AllowSharedResourceGroup":true,"AllowSubscriptionChange":false,"BillingOrganizationId":"46663","BillingOrganizationSid":414,"CarrierName":"Gnome Shipping D3","City":"Minnetonka","Country":"USA","CreateDate":"\/Date(1576113346196-0800)\/","DotNumber":"123456","FleetViewRefresh":5,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576113346196-0800)\/","OrganizationId":"sdfgsdfgdfg","OrganizationName":"ksdjfhgkjsdg","OrganizationSid":497,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"55343","State":"Minnesota","Status":true,"TimeZone":"HST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576194375306-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576194375502-0800)\/","OrganizationId":"sherequire","OrganizationName":"she require","OrganizationSid":510,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576626894133-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576626894519-0800)\/","OrganizationId":"sidelate","OrganizationName":"side late","OrganizationSid":528,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576204005471-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576204005274-0800)\/","OrganizationId":"sidestand","OrganizationName":"side stand","OrganizationSid":522,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576128882233-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576128882274-0800)\/","OrganizationId":"simplybecause","OrganizationName":"simply because","OrganizationSid":500,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576627001150-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576627001284-0800)\/","OrganizationId":"simplything","OrganizationName":"simply thing","OrganizationSid":529,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576132795706-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576132795968-0800)\/","OrganizationId":"strategymeeting","OrganizationName":"strategy meeting","OrganizationSid":502,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"12900 Whitewater Dr","Address2":"300","AllowSharedResourceGroup":true,"AllowSubscriptionChange":false,"BillingOrganizationId":"46663","BillingOrganizationSid":414,"CarrierName":"SvirfneblinSyndicate","City":"Minnetonka","Country":"USA","CreateDate":"\/Date(1537907376514-0700)\/","DotNumber":"12312312","FleetViewRefresh":5,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1575349017631-0800)\/","OrganizationId":"SvirfneblinSyndicate","OrganizationName":"SvirfneblinSyndicate","OrganizationSid":415,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"55343","State":"Minnesota","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576204512559-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576204512897-0800)\/","OrganizationId":"testarticle","OrganizationName":"test article","OrganizationSid":525,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576626487900-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576626487870-0800)\/","OrganizationId":"themcreate","OrganizationName":"them create","OrganizationSid":527,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576193767687-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576193767766-0800)\/","OrganizationId":"uponremember","OrganizationName":"upon remember","OrganizationSid":508,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576203769350-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576203769194-0800)\/","OrganizationId":"whatparticipant","OrganizationName":"what participant","OrganizationSid":519,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576132988050-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576132988266-0800)\/","OrganizationId":"whiterule","OrganizationName":"white rule","OrganizationSid":505,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576627159186-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576627159028-0800)\/","OrganizationId":"windrun","OrganizationName":"wind run","OrganizationSid":531,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"},{"Address1":"","Address2":"","AllowSharedResourceGroup":false,"AllowSubscriptionChange":false,"BillingOrganizationId":null,"BillingOrganizationSid":0,"CarrierName":"Gnome Shipping D3","City":"","Country":"USA","CreateDate":"\/Date(1576193686932-0800)\/","DotNumber":"123456","FleetViewRefresh":0,"Language":"English","ModifiedBy":5412,"ModifiedDate":"\/Date(1576193687184-0800)\/","OrganizationId":"withloss","OrganizationName":"with loss","OrganizationSid":507,"ParentOrganizationId":"46663","ParentOrganizationSid":414,"PostalCode":"","State":"","Status":true,"TimeZone":"CST","UnitOfMeasure":"Standard"}]</msg>
<msg timestamp="20200107 09:49:34.734" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:34.734" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:33.477" endtime="20200107 09:49:34.734"></status>
</kw>
<msg timestamp="20200107 09:49:34.734" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:34.735" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:33.475" endtime="20200107 09:49:34.735"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:34.737" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:34.737" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:34.737" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:34.736" endtime="20200107 09:49:34.737"></status>
</kw>
<doc>Gets all the Organizations</doc>
<tags>
<tag>awsxrsorganizationrestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>xrsawsperftest</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:33.473" endtime="20200107 09:49:34.738" critical="yes"></status>
</test>
<test id="s1-s1-s3-t9" name="Validate AWS XRS Get Organizations Performance (settings) Data By SID REST Web Services Returns 200 OK">
<kw name="Get Organizations Performance Data By ID" library="Organization">
<doc>Get performance (settings) data for all organizations by ID</doc>
<arguments>
<arg>${XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_1_DICT.OrganizationId}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:34.744" level="TRACE">Arguments: [ ${organization_id}='redhow' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Organization}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_ORGANIZATIONS}/${organization_id}/performance</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:34.745" level="TRACE">Arguments: [ 'OrganizationWebService.svc/organizations/redhow/performance' ]</msg>
<msg timestamp="20200107 09:49:34.746" level="TRACE">Return: 'OrganizationWebService.svc/organizations/redhow/performance'</msg>
<msg timestamp="20200107 09:49:34.746" level="INFO">${uri} = OrganizationWebService.svc/organizations/redhow/performance</msg>
<status status="PASS" starttime="20200107 09:49:34.744" endtime="20200107 09:49:34.746"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:34.746" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'OrganizationWebService.svc/organizations/redhow/performance' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:34.747" level="INFO">GET Request using : uri=OrganizationWebService.svc/organizations/redhow/performance, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:35.217" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /OrganizationWebService.svc/organizations/redhow/performance HTTP/1.1" 404 1782</msg>
<msg timestamp="20200107 09:49:35.218" level="DEBUG">GET Response : status=404, reason=Not Found
﻿&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
  &lt;head&gt;
    &lt;title&gt;Service&lt;/title&gt;
    &lt;style&gt;BODY { color: #000000; background-color: white; font-family: Verdana; margin-left: 0px; margin-top: 0px; } #content { margin-left: 30px; font-size: .70em; padding-bottom: 2em; } A:link { color: #336699; font-weight: bold; text-decoration: underline; } A:visited { color: #6699cc; font-weight: bold; text-decoration: underline; } A:active { color: #336699; font-weight: bold; text-decoration: underline; } .heading1 { background-color: #003366; border-bottom: #336699 6px solid; color: #ffffff; font-family: Tahoma; font-size: 26px; font-weight: normal;margin: 0em 0em 10px -20px; padding-bottom: 8px; padding-left: 30px;padding-top: 16px;} pre { font-size:small; background-color: #e5e5cc; padding: 5px; font-family: Courier New; margin-top: 0px; border: 1px #f0f0e0 solid; white-space: pre-wrap; white-space: -pre-wrap; word-wrap: break-word; } table { border-collapse: collapse; border-spacing: 0px; font-family: Verdana;} table th { border-right: 2px white solid; border-bottom: 2px white solid; font-weight: bold; background-color: #cecf9c;} table td { border-right: 2px white solid; border-bottom: 2px white solid; background-color: #e5e5cc;}&lt;/style&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id="content"&gt;
      &lt;p class="heading1"&gt;Service&lt;/p&gt;
      &lt;p xmlns=""&gt;Endpoint not found. Please see the &lt;a rel="help-page" href="http://xrs-apigw-ws-2a944cb0887450de.elb.us-east-1.amazonaws.com/OrganizationWebService.svc/help"&gt;service help page&lt;/a&gt; for constructing valid requests to the service.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20200107 09:49:35.218" level="TRACE">Return: &lt;Response [404]&gt;</msg>
<msg timestamp="20200107 09:49:35.218" level="INFO">${response} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:34.746" endtime="20200107 09:49:35.218"></status>
</kw>
<msg timestamp="20200107 09:49:35.218" level="TRACE">Return: &lt;Response [404]&gt;</msg>
<msg timestamp="20200107 09:49:35.218" level="INFO">${response} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:34.744" endtime="20200107 09:49:35.218"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:35.219" level="TRACE">Arguments: [ 404 | '200' ]</msg>
<msg timestamp="20200107 09:49:35.219" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:35.219" level="FAIL">404 != 200</msg>
<msg timestamp="20200107 09:49:35.219" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200107 09:49:35.219" endtime="20200107 09:49:35.219"></status>
</kw>
<doc>Get organization performance endpoint by ID returns 200 OK</doc>
<tags>
<tag>awsxrsorganizationrestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="FAIL" starttime="20200107 09:49:34.741" endtime="20200107 09:49:35.220" critical="yes">404 != 200</status>
</test>
<test id="s1-s1-s3-t10" name="Validate AWS XRS Put Organization Performance (settings) Data By SID REST Web Services Update Return 200 OK">
<kw name="Load JSON From File" library="JSONLibrary">
<doc>Load JSON from file.</doc>
<arguments>
<arg>C:\\Users\\kstine\\git\\aws-api-gateway-tests\\Tests\\AWS_XRS_WebServicesTests/organization_performance_minimum_setting.json</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200107 09:49:35.223" level="TRACE">Arguments: [ 'C:\\Users\\kstine\\git\\aws-api-gateway-tests\\Tests\\AWS_XRS_WebServicesTests/organization_performance_minimum_setting.json' ]</msg>
<msg timestamp="20200107 09:49:35.223" level="DEBUG">Check if file exists</msg>
<msg timestamp="20200107 09:49:35.223" level="TRACE">Return: [{'Key': 'AbsHardBrakeEnable', 'Value': '0'},
 {'Key': 'ExcessiveOverspeedThreshold', 'Value': '5'},
 {'Key': 'ExcessiveOverspeedEnable', 'Value': '0'},
 {'Key': 'OverspeedThreshold', 'Value': '5'},
 {'Key': 'OverspeedEnable', 'Value': '0'},
 {'Key': 'CMSXBRThreshold', 'Value': '-1'},
 {'Key': 'ForwardCollisionWarningCriticalEventDetection', 'Value': '0'},
 {'Key': 'HapticWarningXBRThreshold', 'Value': '-1'},
 {'Key': 'FCWOffThreshold', 'Value': '1'},
 {'Key': 'FCWOnThreshold', 'Value': '1'},
 {'Key': 'ForwardCollisionWarningMinimumSpeedThreshold', 'Value': '1'},
 {'Key': 'FollowingTimeDurationThreshold', 'Value': '1'},
 {'Key': 'FollowingTimeViolationOffThreshold', 'Value': '1'},
 {'Key': 'FollowingTimeViolationOnThreshold', 'Value': '1'},
 {'Key': 'FollowingTimeViolationThreshold', 'Value': '0'},
 {'Key': 'FleetHardBrakeThreshold', 'Value': '-4'},
 {'Key': 'LaneDepartureDisableWarningEnable', 'Value': '0'},
 {'Key': 'LaneDepartureDisableEventCountThreshold', 'Value': '1'},
 {'Key': 'LaneDepartureDisableTimeThreshold', 'Value': '1'},
 {'Key': 'LaneDepartureDisableOffCountThreshold', 'Value': '1'},
 {'Key': 'LaneDepartureDisableOnCountThreshold', 'Value': '1'},
 {'Key': 'LaneDepartureDisableSpeedThreshold', 'Value': '0'},
 {'Key': 'LaneDepartureActiveWarningEnable', 'Value': '0'},
 {'Key': 'LaneDepartureImminentWarningEnable', 'Value': '0'},
 {'Key': 'LaneDepartureImminentEventCountThreshold', 'Value': '1'},
 {'Key': 'LaneDepartureImminentTimeThreshold', 'Value': '1'},
 {'Key': 'LaneDepartureImminentOffCountThreshold', 'Value': '1'},
 {'Key': 'LaneDepartureImminentSpeedThreshold', 'Value': '0'},
 {'Key': 'LaneDepartureActiveOffCountThreshold', 'Value': '1'},
 {'Key': 'LaneDepartureActiveOnCountThreshold', 'Value': '1'},
 {'Key': 'LaneDepartureActiveSpeedThreshold', 'Value': '0'},
 {'Key': 'LaneDepartureActiveTimeThreshold', 'Value': '1'},
 {'Key': 'RollStabilityCriticalEventDetection', 'Value': '0'},
 {'Key': 'RollStabilityOffThreshold', 'Value': '1'},
 {'Key': 'RollStabilityOnThreshold', 'Value': '1'},
 {'Key': 'RollStabilityMinimumSpeedThreshold', 'Value': '1'},
 {'Key': 'RollStabilitySources', 'Value': '0'}]</msg>
<msg timestamp="20200107 09:49:35.224" level="INFO">${json_data} = [{'Key': 'AbsHardBrakeEnable', 'Value': '0'}, {'Key': 'ExcessiveOverspeedThreshold', 'Value': '5'}, {'Key': 'ExcessiveOverspeedEnable', 'Value': '0'}, {'Key': 'OverspeedThreshold', 'Value': '5'}, {'Ke...</msg>
<status status="PASS" starttime="20200107 09:49:35.223" endtime="20200107 09:49:35.224"></status>
</kw>
<kw name="Put Organizations Performance Data By ID" library="Organization">
<doc>Calls the Put Method on Organizations performance (settings)
Requires two variables: OrganizationId and json file data</doc>
<arguments>
<arg>${XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_1_DICT.OrganizationId}</arg>
<arg>${json_data}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:35.225" level="TRACE">Arguments: [ ${organization_id}='redhow' | ${json_data}=[{'Key': 'AbsHardBrakeEnable', 'Value': '0'},
 {'Key': 'ExcessiveOverspeedThreshold', 'Value': '5'},
 {'Key': 'ExcessiveOverspeedEnable', 'Value': '0'},
 {'Key': 'OverspeedThreshold', 'Value': '5'},
 {'Key': 'OverspeedEnable', 'Value': '0'},
 {'Key': 'CMSXBRThreshold', 'Value': '-1'},
 {'Key': 'ForwardCollisionWarningCriticalEventDetection', 'Value': '0'},
 {'Key': 'HapticWarningXBRThreshold', 'Value': '-1'},
 {'Key': 'FCWOffThreshold', 'Value': '1'},
 {'Key': 'FCWOnThreshold', 'Value': '1'},
 {'Key': 'ForwardCollisionWarningMinimumSpeedThreshold', 'Value': '1'},
 {'Key': 'FollowingTimeDurationThreshold', 'Value': '1'},
 {'Key': 'FollowingTimeViolationOffThreshold', 'Value': '1'},
 {'Key': 'FollowingTimeViolationOnThreshold', 'Value': '1'},
 {'Key': 'FollowingTimeViolationThreshold', 'Value': '0'},
 {'Key': 'FleetHardBrakeThreshold', 'Value': '-4'},
 {'Key': 'LaneDepartureDisableWarningEnable', 'Value': '0'},
 {'Key': 'LaneDepartureDisableEventCountThreshold', 'Value': '1'},
 {'Key': 'LaneDepartureDisableTimeThreshold', 'Value': '1'},
 {'Key': 'LaneDepartureDisableOffCountThreshold', 'Value': '1'},
 {'Key': 'LaneDepartureDisableOnCountThreshold', 'Value': '1'},
 {'Key': 'LaneDepartureDisableSpeedThreshold', 'Value': '0'},
 {'Key': 'LaneDepartureActiveWarningEnable', 'Value': '0'},
 {'Key': 'LaneDepartureImminentWarningEnable', 'Value': '0'},
 {'Key': 'LaneDepartureImminentEventCountThreshold', 'Value': '1'},
 {'Key': 'LaneDepartureImminentTimeThreshold', 'Value': '1'},
 {'Key': 'LaneDepartureImminentOffCountThreshold', 'Value': '1'},
 {'Key': 'LaneDepartureImminentSpeedThreshold', 'Value': '0'},
 {'Key': 'LaneDepartureActiveOffCountThreshold', 'Value': '1'},
 {'Key': 'LaneDepartureActiveOnCountThreshold', 'Value': '1'},
 {'Key': 'LaneDepartureActiveSpeedThreshold', 'Value': '0'},
 {'Key': 'LaneDepartureActiveTimeThreshold', 'Value': '1'},
 {'Key': 'RollStabilityCriticalEventDetection', 'Value': '0'},
 {'Key': 'RollStabilityOffThreshold', 'Value': '1'},
 {'Key': 'RollStabilityOnThreshold', 'Value': '1'},
 {'Key': 'RollStabilityMinimumSpeedThreshold', 'Value': '1'},
 {'Key': 'RollStabilitySources', 'Value': '0'}] ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Organization}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_ORGANIZATIONS}/${organization_id}/performance</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:35.227" level="TRACE">Arguments: [ 'OrganizationWebService.svc/organizations/redhow/performance' ]</msg>
<msg timestamp="20200107 09:49:35.227" level="TRACE">Return: 'OrganizationWebService.svc/organizations/redhow/performance'</msg>
<msg timestamp="20200107 09:49:35.227" level="INFO">${uri} = OrganizationWebService.svc/organizations/redhow/performance</msg>
<status status="PASS" starttime="20200107 09:49:35.226" endtime="20200107 09:49:35.227"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary">
<doc>Send a PUT request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>json=${json_data}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:35.228" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'OrganizationWebService.svc/organizations/redhow/performance' | json=[{'Key': 'AbsHardBrakeEnable', 'Value': '0'},
 {'Key': 'ExcessiveOverspeedThreshold', 'Value': '5'},
 {'Key': 'ExcessiveOverspeedEnable', 'Value': '0'},
 {'Key': 'OverspeedThreshold', 'Value': '5'},
 {'Key': 'OverspeedEnable', 'Value': '0'},
 {'Key': 'CMSXBRThreshold', 'Value': '-1'},
 {'Key': 'ForwardCollisionWarningCriticalEventDetection', 'Value': '0'},
 {'Key': 'HapticWarningXBRThreshold', 'Value': '-1'},
 {'Key': 'FCWOffThreshold', 'Value': '1'},
 {'Key': 'FCWOnThreshold', 'Value': '1'},
 {'Key': 'ForwardCollisionWarningMinimumSpeedThreshold', 'Value': '1'},
 {'Key': 'FollowingTimeDurationThreshold', 'Value': '1'},
 {'Key': 'FollowingTimeViolationOffThreshold', 'Value': '1'},
 {'Key': 'FollowingTimeViolationOnThreshold', 'Value': '1'},
 {'Key': 'FollowingTimeViolationThreshold', 'Value': '0'},
 {'Key': 'FleetHardBrakeThreshold', 'Value': '-4'},
 {'Key': 'LaneDepartureDisableWarningEnable', 'Value': '0'},
 {'Key': 'LaneDepartureDisableEventCountThreshold', 'Value': '1'},
 {'Key': 'LaneDepartureDisableTimeThreshold', 'Value': '1'},
 {'Key': 'LaneDepartureDisableOffCountThreshold', 'Value': '1'},
 {'Key': 'LaneDepartureDisableOnCountThreshold', 'Value': '1'},
 {'Key': 'LaneDepartureDisableSpeedThreshold', 'Value': '0'},
 {'Key': 'LaneDepartureActiveWarningEnable', 'Value': '0'},
 {'Key': 'LaneDepartureImminentWarningEnable', 'Value': '0'},
 {'Key': 'LaneDepartureImminentEventCountThreshold', 'Value': '1'},
 {'Key': 'LaneDepartureImminentTimeThreshold', 'Value': '1'},
 {'Key': 'LaneDepartureImminentOffCountThreshold', 'Value': '1'},
 {'Key': 'LaneDepartureImminentSpeedThreshold', 'Value': '0'},
 {'Key': 'LaneDepartureActiveOffCountThreshold', 'Value': '1'},
 {'Key': 'LaneDepartureActiveOnCountThreshold', 'Value': '1'},
 {'Key': 'LaneDepartureActiveSpeedThreshold', 'Value': '0'},
 {'Key': 'LaneDepartureActiveTimeThreshold', 'Value': '1'},
 {'Key': 'RollStabilityCriticalEventDetection', 'Value': '0'},
 {'Key': 'RollStabilityOffThreshold', 'Value': '1'},
 {'Key': 'RollStabilityOnThreshold', 'Value': '1'},
 {'Key': 'RollStabilityMinimumSpeedThreshold', 'Value': '1'},
 {'Key': 'RollStabilitySources', 'Value': '0'}] | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:35.230" level="INFO">PUT Request using : uri=OrganizationWebService.svc/organizations/redhow/performance, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=[{'Key': 'AbsHardBrakeEnable', 'Value': '0'}, {'Key': 'ExcessiveOverspeedThreshold', 'Value': '5'}, {'Key': 'ExcessiveOverspeedEnable', 'Value': '0'}, {'Key': 'OverspeedThreshold', 'Value': '5'}, {'Key': 'OverspeedEnable', 'Value': '0'}, {'Key': 'CMSXBRThreshold', 'Value': '-1'}, {'Key': 'ForwardCollisionWarningCriticalEventDetection', 'Value': '0'}, {'Key': 'HapticWarningXBRThreshold', 'Value': '-1'}, {'Key': 'FCWOffThreshold', 'Value': '1'}, {'Key': 'FCWOnThreshold', 'Value': '1'}, {'Key': 'ForwardCollisionWarningMinimumSpeedThreshold', 'Value': '1'}, {'Key': 'FollowingTimeDurationThreshold', 'Value': '1'}, {'Key': 'FollowingTimeViolationOffThreshold', 'Value': '1'}, {'Key': 'FollowingTimeViolationOnThreshold', 'Value': '1'}, {'Key': 'FollowingTimeViolationThreshold', 'Value': '0'}, {'Key': 'FleetHardBrakeThreshold', 'Value': '-4'}, {'Key': 'LaneDepartureDisableWarningEnable', 'Value': '0'}, {'Key': 'LaneDepartureDisableEventCountThreshold', 'Value': '1'}, {'Key': 'LaneDepartureDisableTimeThreshold', 'Value': '1'}, {'Key': 'LaneDepartureDisableOffCountThreshold', 'Value': '1'}, {'Key': 'LaneDepartureDisableOnCountThreshold', 'Value': '1'}, {'Key': 'LaneDepartureDisableSpeedThreshold', 'Value': '0'}, {'Key': 'LaneDepartureActiveWarningEnable', 'Value': '0'}, {'Key': 'LaneDepartureImminentWarningEnable', 'Value': '0'}, {'Key': 'LaneDepartureImminentEventCountThreshold', 'Value': '1'}, {'Key': 'LaneDepartureImminentTimeThreshold', 'Value': '1'}, {'Key': 'LaneDepartureImminentOffCountThreshold', 'Value': '1'}, {'Key': 'LaneDepartureImminentSpeedThreshold', 'Value': '0'}, {'Key': 'LaneDepartureActiveOffCountThreshold', 'Value': '1'}, {'Key': 'LaneDepartureActiveOnCountThreshold', 'Value': '1'}, {'Key': 'LaneDepartureActiveSpeedThreshold', 'Value': '0'}, {'Key': 'LaneDepartureActiveTimeThreshold', 'Value': '1'}, {'Key': 'RollStabilityCriticalEventDetection', 'Value': '0'}, {'Key': 'RollStabilityOffThreshold', 'Value': '1'}, {'Key': 'RollStabilityOnThreshold', 'Value': '1'}, {'Key': 'RollStabilityMinimumSpeedThreshold', 'Value': '1'}, {'Key': 'RollStabilitySources', 'Value': '0'}]</msg>
<msg timestamp="20200107 09:49:35.932" level="DEBUG">https://d3ws.xataxrs.com:443 "PUT /OrganizationWebService.svc/organizations/redhow/performance HTTP/1.1" 200 8178</msg>
<msg timestamp="20200107 09:49:35.933" level="DEBUG">PUT Response : status=200, reason=OK
[{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. AbsHardBrakeEnable","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. ExcessiveOverspeedThreshold","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. ExcessiveOverspeedEnable","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. OverspeedThreshold","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. OverspeedEnable","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. CMSXBRThreshold","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. ForwardCollisionWarningCriticalEventDetection","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. HapticWarningXBRThreshold","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. FCWOffThreshold","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. FCWOnThreshold","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. ForwardCollisionWarningMinimumSpeedThreshold","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. FollowingTimeDurationThreshold","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. FollowingTimeViolationOffThreshold","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. FollowingTimeViolationOnThreshold","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. FollowingTimeViolationThreshold","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. FleetHardBrakeThreshold","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. LaneDepartureDisableWarningEnable","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. LaneDepartureDisableEventCountThreshold","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. LaneDepartureDisableTimeThreshold","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. LaneDepartureDisableOffCountThreshold","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. LaneDepartureDisableOnCountThreshold","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. LaneDepartureDisableSpeedThreshold","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. LaneDepartureActiveWarningEnable","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. LaneDepartureImminentWarningEnable","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. LaneDepartureImminentEventCountThreshold","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. LaneDepartureImminentTimeThreshold","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. LaneDepartureImminentOffCountThreshold","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. LaneDepartureImminentSpeedThreshold","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. LaneDepartureActiveOffCountThreshold","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. LaneDepartureActiveOnCountThreshold","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. LaneDepartureActiveSpeedThreshold","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. LaneDepartureActiveTimeThreshold","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. RollStabilityCriticalEventDetection","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. RollStabilityOffThreshold","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. RollStabilityOnThreshold","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. RollStabilityMinimumSpeedThreshold","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."},{"Caption":"Request succeeded.","Code":"12538021530103185408","Description":"Setting successfully updated. RollStabilitySources","Id":"redhow","ObjectName":"Organization","SID":533,"Title":"Request succeeded."}]</msg>
<msg timestamp="20200107 09:49:35.933" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:35.933" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:35.227" endtime="20200107 09:49:35.934"></status>
</kw>
<msg timestamp="20200107 09:49:35.934" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:35.934" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:35.225" endtime="20200107 09:49:35.934"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:35.935" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:35.935" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:35.935" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:35.935" endtime="20200107 09:49:35.935"></status>
</kw>
<doc>Sends an performance settings update request from a json file, expects a 200 response</doc>
<tags>
<tag>awsxrsorganizationrestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:35.222" endtime="20200107 09:49:35.936" critical="yes"></status>
</test>
<test id="s1-s1-s3-t11" name="Validate AWS XRS Get Organizations Performance (settings) Data By Parameters REST Web Services Returns 200 OK">
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:49:35.938" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:49:35.939" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:49:35.939" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:49:35.939" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:49:35.939" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:49:35.938" endtime="20200107 09:49:35.939"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationId=${XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_1_DICT.OrganizationId}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:49:35.939" level="TRACE">Arguments: [ 'OrganizationId=${XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_1_DICT.OrganizationId}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:49:35.940" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationId': 'redhow'}</msg>
<msg timestamp="20200107 09:49:35.940" level="INFO">&amp;{params} = { OrganizationId=redhow | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:49:35.939" endtime="20200107 09:49:35.940"></status>
</kw>
<kw name="Verify Get Organizations Performance (settings) Data With Forward Slash Returns 200 OK">
<doc>Verify that using a '/' in the URI returns 200 OK</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<msg timestamp="20200107 09:49:35.941" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationId': 'redhow'} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/</arg>
</arguments>
<assign>
<var>${ending_character}</var>
</assign>
<msg timestamp="20200107 09:49:35.941" level="TRACE">Arguments: [ '/' ]</msg>
<msg timestamp="20200107 09:49:35.941" level="TRACE">Return: '/'</msg>
<msg timestamp="20200107 09:49:35.941" level="INFO">${ending_character} = /</msg>
<status status="PASS" starttime="20200107 09:49:35.941" endtime="20200107 09:49:35.941"></status>
</kw>
<kw name="Get Organizations Performance Data With URI Ending With ${ending_character} And Parameters &amp;{params}" library="Organization">
<doc>This Keyword modifies character between the base uri and the parameters
This will get Organizations that match the provided parameters.
Params can be named individually or within a Dictionary
See the Get Organizations Performance Data Keyword for param definitions.</doc>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:35.941" level="TRACE">Arguments: [ ${ending_character}='/' | ${params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationId': 'redhow'} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Organization}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_GET_PUT_ORGANIZATIONS_PERFORMANCE}${ending_character}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:35.942" level="TRACE">Arguments: [ 'OrganizationWebService.svc/organizations/performance/' ]</msg>
<msg timestamp="20200107 09:49:35.942" level="TRACE">Return: 'OrganizationWebService.svc/organizations/performance/'</msg>
<msg timestamp="20200107 09:49:35.942" level="INFO">${uri} = OrganizationWebService.svc/organizations/performance/</msg>
<status status="PASS" starttime="20200107 09:49:35.942" endtime="20200107 09:49:35.942"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:35.943" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'OrganizationWebService.svc/organizations/performance/' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} | params={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationId': 'redhow'} ]</msg>
<msg timestamp="20200107 09:49:35.943" level="INFO">GET Request using : uri=OrganizationWebService.svc/organizations/performance/, params={'OrganizationId': 'redhow', 'IsActive': 'True', 'AsOfDateTime': '01/07/2020'}, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:36.558" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /OrganizationWebService.svc/organizations/performance/?OrganizationId=redhow&amp;IsActive=True&amp;AsOfDateTime=01%2F07%2F2020 HTTP/1.1" 200 1387</msg>
<msg timestamp="20200107 09:49:36.560" level="DEBUG">GET Response : status=200, reason=OK
[{"AbsHardBrake":{"EnableEvent":false},"ExcessiveOverspeed":{"EnableEvent":false,"Threshold":5},"Fleet":{"HardBrakeThreshold":-4,"SpeedingGracePeriod":60,"SpeedingThreshold":65},"FollowingTimeViolation":{"EnableEvent":false,"OffThreshold":1,"OnThreshold":1,"SecondsThreshold":37,"TimeThreshold":1},"ForwardCollisionWarning":{"CmsThreshold":-1,"EnableEvent":false,"HapticThreshold":-1,"MinimumSpeedThreshold":1,"OffThreshold":1,"OnThreshold":1},"LaneDepartureWarning":{"Active":{"CountThreshold":1,"EnableEvent":false,"OffCount":1,"OnCount":1,"SpeedThreshold":0,"TimeThreshold":1},"Disable":{"CountThreshold":1,"EnableEvent":false,"OffCount":1,"OnCount":1,"SpeedThreshold":0,"TimeThreshold":1},"Imminent":{"CountThreshold":1,"EnableEvent":false,"OffCount":1,"OnCount":1,"SpeedThreshold":0,"TimeThreshold":1}},"OfficialStopTime":300,"OptimumRpmThreshold":{"High":1750,"Low":1150},"OrganizationId":"redhow","OrganizationName":"red how","Overspeed":{"Duration":30,"EnableEvent":false,"Threshold":5},"PassiveForwardCollisionWarning":{"EnableEvent":false},"StabilityControl":{"EnableEvent":false,"OffCount":1,"OnCount":1,"Sources":"0","SpeedThreshold":1},"TopSpeed":[{"Key":1,"Value":5},{"Key":2,"Value":35},{"Key":3,"Value":50},{"Key":4,"Value":55},{"Key":5,"Value":60},{"Key":6,"Value":65},{"Key":7,"Value":70},{"Key":8,"Value":75},{"Key":9,"Value":85}],"YardToRoad":{"Speed":0,"Time":120}}]</msg>
<msg timestamp="20200107 09:49:36.561" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:36.561" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:35.942" endtime="20200107 09:49:36.562"></status>
</kw>
<msg timestamp="20200107 09:49:36.562" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:36.563" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:35.941" endtime="20200107 09:49:36.563"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:36.565" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:36.566" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:36.567" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:36.564" endtime="20200107 09:49:36.568"></status>
</kw>
<msg timestamp="20200107 09:49:36.568" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:35.940" endtime="20200107 09:49:36.568"></status>
</kw>
<kw name="Verify Get Organizations Performance (settings) Data Without Forward Slash Returns 200 OK">
<doc>Verify that not using a '/' in the URI returns 200 OK</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<msg timestamp="20200107 09:49:36.570" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationId': 'redhow'} ]</msg>
<kw name="Get Organizations Performance Data" library="Organization">
<doc>Call the Get Method on Organizations Performance (settings) data.
This will get Organizations that match the provided parameters.
Params can be named individually or within a Dictionary
Param Definitions:
AsOfDateTime
Tells the service to return only the data that changed since the specified date and time.
The date and time are associated with the last modified date and time of the record.
System Limit: 30 days
Status
Filters results to active organizations only.
Valid Values: True False Both
Active (same as True)
Inactive (same as False)
Limit
Used in conjunction with the Offset parameter to implement paging.
Limits the number of results to a specified number.
System Limit: 10,000
Offset
Used in conjunction with the Limit parameter to implement paging.
Represents a page number for the starting point of the return set.
OrganizationId
Limits results to organizations that fall under the specified organization.
ResourceGroupId
Limits results to Organizations in one or more resource groups.
Recurse
No clue what this does.</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:36.573" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationId': 'redhow'} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Organization}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_GET_PUT_ORGANIZATIONS_PERFORMANCE}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:36.574" level="TRACE">Arguments: [ 'OrganizationWebService.svc/organizations/performance' ]</msg>
<msg timestamp="20200107 09:49:36.574" level="TRACE">Return: 'OrganizationWebService.svc/organizations/performance'</msg>
<msg timestamp="20200107 09:49:36.574" level="INFO">${uri} = OrganizationWebService.svc/organizations/performance</msg>
<status status="PASS" starttime="20200107 09:49:36.573" endtime="20200107 09:49:36.574"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
<arg>params=&amp;{params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:36.575" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'OrganizationWebService.svc/organizations/performance' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} | params={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationId': 'redhow'} ]</msg>
<msg timestamp="20200107 09:49:36.576" level="INFO">GET Request using : uri=OrganizationWebService.svc/organizations/performance, params={'OrganizationId': 'redhow', 'IsActive': 'True', 'AsOfDateTime': '01/07/2020'}, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:37.104" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /OrganizationWebService.svc/organizations/performance?OrganizationId=redhow&amp;IsActive=True&amp;AsOfDateTime=01%2F07%2F2020 HTTP/1.1" 200 1387</msg>
<msg timestamp="20200107 09:49:37.107" level="DEBUG">GET Response : status=200, reason=OK
[{"AbsHardBrake":{"EnableEvent":false},"ExcessiveOverspeed":{"EnableEvent":false,"Threshold":5},"Fleet":{"HardBrakeThreshold":-4,"SpeedingGracePeriod":60,"SpeedingThreshold":65},"FollowingTimeViolation":{"EnableEvent":false,"OffThreshold":1,"OnThreshold":1,"SecondsThreshold":37,"TimeThreshold":1},"ForwardCollisionWarning":{"CmsThreshold":-1,"EnableEvent":false,"HapticThreshold":-1,"MinimumSpeedThreshold":1,"OffThreshold":1,"OnThreshold":1},"LaneDepartureWarning":{"Active":{"CountThreshold":1,"EnableEvent":false,"OffCount":1,"OnCount":1,"SpeedThreshold":0,"TimeThreshold":1},"Disable":{"CountThreshold":1,"EnableEvent":false,"OffCount":1,"OnCount":1,"SpeedThreshold":0,"TimeThreshold":1},"Imminent":{"CountThreshold":1,"EnableEvent":false,"OffCount":1,"OnCount":1,"SpeedThreshold":0,"TimeThreshold":1}},"OfficialStopTime":300,"OptimumRpmThreshold":{"High":1750,"Low":1150},"OrganizationId":"redhow","OrganizationName":"red how","Overspeed":{"Duration":30,"EnableEvent":false,"Threshold":5},"PassiveForwardCollisionWarning":{"EnableEvent":false},"StabilityControl":{"EnableEvent":false,"OffCount":1,"OnCount":1,"Sources":"0","SpeedThreshold":1},"TopSpeed":[{"Key":1,"Value":5},{"Key":2,"Value":35},{"Key":3,"Value":50},{"Key":4,"Value":55},{"Key":5,"Value":60},{"Key":6,"Value":65},{"Key":7,"Value":70},{"Key":8,"Value":75},{"Key":9,"Value":85}],"YardToRoad":{"Speed":0,"Time":120}}]</msg>
<msg timestamp="20200107 09:49:37.107" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:37.108" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:36.574" endtime="20200107 09:49:37.108"></status>
</kw>
<msg timestamp="20200107 09:49:37.109" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:37.110" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:36.571" endtime="20200107 09:49:37.110"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:37.112" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:37.113" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:37.113" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:37.111" endtime="20200107 09:49:37.113"></status>
</kw>
<msg timestamp="20200107 09:49:37.114" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:36.569" endtime="20200107 09:49:37.114"></status>
</kw>
<doc>Get Organizations with basic parameters</doc>
<tags>
<tag>awsxrsorganizationrestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:35.937" endtime="20200107 09:49:37.117" critical="yes"></status>
</test>
<test id="s1-s1-s3-t12" name="Validate AWS XRS Get Organizations Performance (settings) Data By Parameters REST Web Services Returns 200 OK With Raw String URI">
<kw name="Verify Get Organizations Performance (settings) Data Raw String URI With /? Returns 200 OK">
<doc>Verify that using the given character string in the raw URI string returns 200 OK</doc>
<msg timestamp="20200107 09:49:37.123" level="TRACE">Arguments: [ ${character_string}='/?' ]</msg>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:49:37.124" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:49:37.124" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:49:37.124" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:49:37.125" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:49:37.125" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:49:37.124" endtime="20200107 09:49:37.125"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationSid=${XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_SID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:49:37.125" level="TRACE">Arguments: [ 'OrganizationSid=${XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_SID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:49:37.126" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationSid': 533}</msg>
<msg timestamp="20200107 09:49:37.126" level="INFO">&amp;{params} = { OrganizationSid=533 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:49:37.125" endtime="20200107 09:49:37.126"></status>
</kw>
<kw name="Create URI String With" library="URIStringBuilderTool">
<doc>Helper Keyword to construct the request uri with different character strings
base_uri = webservice uri
request_type = request extension for the webservice
character_string = final character of the uri. i.e. /, /?, etc ...</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Organization}</arg>
<arg>${XRS_WEBSERVICE_ENTITY_MANAGEMENT_GET_PUT_ORGANIZATIONS_PERFORMANCE}</arg>
<arg>${character_string}</arg>
</arguments>
<assign>
<var>${uri_string}</var>
</assign>
<msg timestamp="20200107 09:49:37.127" level="TRACE">Arguments: [ ${base_uri}='OrganizationWebService.svc' | ${request_type}='/organizations/performance' | ${character_string}='/?' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${base_uri}${request_type}${character_string}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:37.128" level="TRACE">Arguments: [ 'OrganizationWebService.svc/organizations/performance/?' ]</msg>
<msg timestamp="20200107 09:49:37.128" level="TRACE">Return: 'OrganizationWebService.svc/organizations/performance/?'</msg>
<msg timestamp="20200107 09:49:37.128" level="INFO">${uri} = OrganizationWebService.svc/organizations/performance/?</msg>
<status status="PASS" starttime="20200107 09:49:37.128" endtime="20200107 09:49:37.128"></status>
</kw>
<msg timestamp="20200107 09:49:37.128" level="TRACE">Return: 'OrganizationWebService.svc/organizations/performance/?'</msg>
<msg timestamp="20200107 09:49:37.128" level="INFO">${uri_string} = OrganizationWebService.svc/organizations/performance/?</msg>
<status status="PASS" starttime="20200107 09:49:37.127" endtime="20200107 09:49:37.128"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${uri_string}OrganizationSid=${params.OrganizationSid}&amp;IsActive=${params.IsActive}&amp;AsOfDateTime=${params.AsOfDateTime}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:37.129" level="TRACE">Arguments: [ 'OrganizationWebService.svc/organizations/performance/?OrganizationSid=533&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' ]</msg>
<msg timestamp="20200107 09:49:37.129" level="TRACE">Return: 'OrganizationWebService.svc/organizations/performance/?OrganizationSid=533&amp;IsActive=True&amp;AsOfDateTime=01/07/2020'</msg>
<msg timestamp="20200107 09:49:37.129" level="INFO">${uri} = OrganizationWebService.svc/organizations/performance/?OrganizationSid=533&amp;IsActive=True&amp;AsOfDateTime=01/07/2020</msg>
<status status="PASS" starttime="20200107 09:49:37.129" endtime="20200107 09:49:37.130"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:37.130" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'OrganizationWebService.svc/organizations/performance/?OrganizationSid=533&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:37.131" level="INFO">GET Request using : uri=OrganizationWebService.svc/organizations/performance/?OrganizationSid=533&amp;IsActive=True&amp;AsOfDateTime=01/07/2020, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:37.561" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /OrganizationWebService.svc/organizations/performance/?OrganizationSid=533&amp;IsActive=True&amp;AsOfDateTime=01/07/2020 HTTP/1.1" 200 1387</msg>
<msg timestamp="20200107 09:49:37.563" level="DEBUG">GET Response : status=200, reason=OK
[{"AbsHardBrake":{"EnableEvent":false},"ExcessiveOverspeed":{"EnableEvent":false,"Threshold":5},"Fleet":{"HardBrakeThreshold":-4,"SpeedingGracePeriod":60,"SpeedingThreshold":65},"FollowingTimeViolation":{"EnableEvent":false,"OffThreshold":1,"OnThreshold":1,"SecondsThreshold":37,"TimeThreshold":1},"ForwardCollisionWarning":{"CmsThreshold":-1,"EnableEvent":false,"HapticThreshold":-1,"MinimumSpeedThreshold":1,"OffThreshold":1,"OnThreshold":1},"LaneDepartureWarning":{"Active":{"CountThreshold":1,"EnableEvent":false,"OffCount":1,"OnCount":1,"SpeedThreshold":0,"TimeThreshold":1},"Disable":{"CountThreshold":1,"EnableEvent":false,"OffCount":1,"OnCount":1,"SpeedThreshold":0,"TimeThreshold":1},"Imminent":{"CountThreshold":1,"EnableEvent":false,"OffCount":1,"OnCount":1,"SpeedThreshold":0,"TimeThreshold":1}},"OfficialStopTime":300,"OptimumRpmThreshold":{"High":1750,"Low":1150},"OrganizationId":"redhow","OrganizationName":"red how","Overspeed":{"Duration":30,"EnableEvent":false,"Threshold":5},"PassiveForwardCollisionWarning":{"EnableEvent":false},"StabilityControl":{"EnableEvent":false,"OffCount":1,"OnCount":1,"Sources":"0","SpeedThreshold":1},"TopSpeed":[{"Key":1,"Value":5},{"Key":2,"Value":35},{"Key":3,"Value":50},{"Key":4,"Value":55},{"Key":5,"Value":60},{"Key":6,"Value":65},{"Key":7,"Value":70},{"Key":8,"Value":75},{"Key":9,"Value":85}],"YardToRoad":{"Speed":0,"Time":120}}]</msg>
<msg timestamp="20200107 09:49:37.564" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:37.564" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:37.130" endtime="20200107 09:49:37.565"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:37.567" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:37.567" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:37.567" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:37.565" endtime="20200107 09:49:37.568"></status>
</kw>
<msg timestamp="20200107 09:49:37.568" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:37.123" endtime="20200107 09:49:37.568"></status>
</kw>
<kw name="Verify Get Organizations Performance (settings) Data Raw String URI With ? Returns 200 OK">
<doc>Verify that using the given character string in the raw URI string returns 200 OK</doc>
<msg timestamp="20200107 09:49:37.570" level="TRACE">Arguments: [ ${character_string}='?' ]</msg>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:49:37.571" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:49:37.572" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:49:37.572" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:49:37.572" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:49:37.573" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:49:37.571" endtime="20200107 09:49:37.573"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationSid=${XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_SID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:49:37.573" level="TRACE">Arguments: [ 'OrganizationSid=${XRS_AWS_WEBSERVICE_POST_TEST_ORGANIZATION_SID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:49:37.574" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationSid': 533}</msg>
<msg timestamp="20200107 09:49:37.574" level="INFO">&amp;{params} = { OrganizationSid=533 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:49:37.573" endtime="20200107 09:49:37.574"></status>
</kw>
<kw name="Create URI String With" library="URIStringBuilderTool">
<doc>Helper Keyword to construct the request uri with different character strings
base_uri = webservice uri
request_type = request extension for the webservice
character_string = final character of the uri. i.e. /, /?, etc ...</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Organization}</arg>
<arg>${XRS_WEBSERVICE_ENTITY_MANAGEMENT_GET_PUT_ORGANIZATIONS_PERFORMANCE}</arg>
<arg>${character_string}</arg>
</arguments>
<assign>
<var>${uri_string}</var>
</assign>
<msg timestamp="20200107 09:49:37.576" level="TRACE">Arguments: [ ${base_uri}='OrganizationWebService.svc' | ${request_type}='/organizations/performance' | ${character_string}='?' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${base_uri}${request_type}${character_string}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:37.577" level="TRACE">Arguments: [ 'OrganizationWebService.svc/organizations/performance?' ]</msg>
<msg timestamp="20200107 09:49:37.578" level="TRACE">Return: 'OrganizationWebService.svc/organizations/performance?'</msg>
<msg timestamp="20200107 09:49:37.578" level="INFO">${uri} = OrganizationWebService.svc/organizations/performance?</msg>
<status status="PASS" starttime="20200107 09:49:37.577" endtime="20200107 09:49:37.578"></status>
</kw>
<msg timestamp="20200107 09:49:37.578" level="TRACE">Return: 'OrganizationWebService.svc/organizations/performance?'</msg>
<msg timestamp="20200107 09:49:37.578" level="INFO">${uri_string} = OrganizationWebService.svc/organizations/performance?</msg>
<status status="PASS" starttime="20200107 09:49:37.575" endtime="20200107 09:49:37.578"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${uri_string}OrganizationSid=${params.OrganizationSid}&amp;IsActive=${params.IsActive}&amp;AsOfDateTime=${params.AsOfDateTime}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:37.580" level="TRACE">Arguments: [ 'OrganizationWebService.svc/organizations/performance?OrganizationSid=533&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' ]</msg>
<msg timestamp="20200107 09:49:37.580" level="TRACE">Return: 'OrganizationWebService.svc/organizations/performance?OrganizationSid=533&amp;IsActive=True&amp;AsOfDateTime=01/07/2020'</msg>
<msg timestamp="20200107 09:49:37.580" level="INFO">${uri} = OrganizationWebService.svc/organizations/performance?OrganizationSid=533&amp;IsActive=True&amp;AsOfDateTime=01/07/2020</msg>
<status status="PASS" starttime="20200107 09:49:37.579" endtime="20200107 09:49:37.581"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:37.582" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'OrganizationWebService.svc/organizations/performance?OrganizationSid=533&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:37.583" level="INFO">GET Request using : uri=OrganizationWebService.svc/organizations/performance?OrganizationSid=533&amp;IsActive=True&amp;AsOfDateTime=01/07/2020, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:38.014" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /OrganizationWebService.svc/organizations/performance?OrganizationSid=533&amp;IsActive=True&amp;AsOfDateTime=01/07/2020 HTTP/1.1" 200 1387</msg>
<msg timestamp="20200107 09:49:38.017" level="DEBUG">GET Response : status=200, reason=OK
[{"AbsHardBrake":{"EnableEvent":false},"ExcessiveOverspeed":{"EnableEvent":false,"Threshold":5},"Fleet":{"HardBrakeThreshold":-4,"SpeedingGracePeriod":60,"SpeedingThreshold":65},"FollowingTimeViolation":{"EnableEvent":false,"OffThreshold":1,"OnThreshold":1,"SecondsThreshold":37,"TimeThreshold":1},"ForwardCollisionWarning":{"CmsThreshold":-1,"EnableEvent":false,"HapticThreshold":-1,"MinimumSpeedThreshold":1,"OffThreshold":1,"OnThreshold":1},"LaneDepartureWarning":{"Active":{"CountThreshold":1,"EnableEvent":false,"OffCount":1,"OnCount":1,"SpeedThreshold":0,"TimeThreshold":1},"Disable":{"CountThreshold":1,"EnableEvent":false,"OffCount":1,"OnCount":1,"SpeedThreshold":0,"TimeThreshold":1},"Imminent":{"CountThreshold":1,"EnableEvent":false,"OffCount":1,"OnCount":1,"SpeedThreshold":0,"TimeThreshold":1}},"OfficialStopTime":300,"OptimumRpmThreshold":{"High":1750,"Low":1150},"OrganizationId":"redhow","OrganizationName":"red how","Overspeed":{"Duration":30,"EnableEvent":false,"Threshold":5},"PassiveForwardCollisionWarning":{"EnableEvent":false},"StabilityControl":{"EnableEvent":false,"OffCount":1,"OnCount":1,"Sources":"0","SpeedThreshold":1},"TopSpeed":[{"Key":1,"Value":5},{"Key":2,"Value":35},{"Key":3,"Value":50},{"Key":4,"Value":55},{"Key":5,"Value":60},{"Key":6,"Value":65},{"Key":7,"Value":70},{"Key":8,"Value":75},{"Key":9,"Value":85}],"YardToRoad":{"Speed":0,"Time":120}}]</msg>
<msg timestamp="20200107 09:49:38.018" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:38.018" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:37.581" endtime="20200107 09:49:38.018"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:38.021" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:38.021" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:38.021" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:38.019" endtime="20200107 09:49:38.022"></status>
</kw>
<msg timestamp="20200107 09:49:38.022" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:37.570" endtime="20200107 09:49:38.022"></status>
</kw>
<doc>Get Organizations with basic parameters using a raw URI string</doc>
<tags>
<tag>awsxrsorganizationrestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:37.121" endtime="20200107 09:49:38.025" critical="yes"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary" type="teardown">
<doc>Removes all the session objects</doc>
<msg timestamp="20200107 09:49:38.035" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200107 09:49:38.036" level="INFO">Delete All Sessions</msg>
<msg timestamp="20200107 09:49:38.036" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:38.035" endtime="20200107 09:49:38.036"></status>
</kw>
<doc>Fundamental suite to test XRS AWS Organization Entity Management Web Services</doc>
<status status="FAIL" starttime="20200107 09:49:22.050" endtime="20200107 09:49:38.036"></status>
</suite>
<suite id="s1-s1-s4" name="ValidateAWSXRSResourceGroupWebService" source="C:\Users\kstine\git\aws-api-gateway-tests\Tests\AWS_XRS_WebServicesTests\04__ValidateAWSXRSResourceGroupWebService.robot">
<kw name="Create AWS XRS Web Services Session" library="XRSCommonWebService" type="setup">
<doc>Create a session with aws xrs web services</doc>
<msg timestamp="20200107 09:49:38.125" level="TRACE">Arguments: [  ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${XRS_AWS_WEBSERVICES_URL}[${XRS_HOST_ENVIRONMENT}]</arg>
<arg>verify=True</arg>
<arg>auth=${XRS_WEBSERVICES_AUTHORIZATION}</arg>
</arguments>
<msg timestamp="20200107 09:49:38.125" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'https://d3ws.xataxrs.com' | verify=True | auth=['GnomeShippingD3|admin', 'xrs123'] ]</msg>
<msg timestamp="20200107 09:49:38.125" level="INFO">Creating Session using : alias=xrs_web_service_session, url=https://d3ws.xataxrs.com, headers={},                     cookies={}, auth=&lt;requests.auth.HTTPBasicAuth object at 0x0000018E38C047C0&gt;, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<msg timestamp="20200107 09:49:38.125" level="DEBUG">Creating session: xrs_web_service_session</msg>
<msg timestamp="20200107 09:49:38.125" level="DEBUG">Argument types are:
&lt;class 'bool'&gt;</msg>
<msg timestamp="20200107 09:49:38.125" level="TRACE">Return: &lt;requests.sessions.Session object at 0x0000018E38C04B20&gt;</msg>
<status status="PASS" starttime="20200107 09:49:38.125" endtime="20200107 09:49:38.126"></status>
</kw>
<msg timestamp="20200107 09:49:38.126" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:38.124" endtime="20200107 09:49:38.126"></status>
</kw>
<test id="s1-s1-s4-t1" name="Validate AWS XRS Get Resource Groups REST Web Services Returns 200 OK">
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:49:38.127" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:49:38.127" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:49:38.127" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:49:38.127" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:49:38.127" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:49:38.126" endtime="20200107 09:49:38.127"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:49:38.127" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:49:38.128" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20200107 09:49:38.128" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:49:38.127" endtime="20200107 09:49:38.128"></status>
</kw>
<kw name="Verify Get Resource Groups With Forward Slash Returns 200 OK">
<doc>Verify that using a '/' in the URI returns 200 OK</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<msg timestamp="20200107 09:49:38.129" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/</arg>
</arguments>
<assign>
<var>${ending_character}</var>
</assign>
<msg timestamp="20200107 09:49:38.129" level="TRACE">Arguments: [ '/' ]</msg>
<msg timestamp="20200107 09:49:38.129" level="TRACE">Return: '/'</msg>
<msg timestamp="20200107 09:49:38.129" level="INFO">${ending_character} = /</msg>
<status status="PASS" starttime="20200107 09:49:38.129" endtime="20200107 09:49:38.129"></status>
</kw>
<kw name="Get Resource Groups With URI Ending With ${ending_character} And Parameters &amp;{params}" library="ResourceGroup">
<doc>This Keyword modifies character between the base uri and the parameters
This will get Resource Groups that match the provided parameters.
Params can be named individually or within a Dictionary
See the Get Resource Groups Keyword for param definitions.</doc>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:38.130" level="TRACE">Arguments: [ ${ending_character}='/' | ${params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Resource_Group}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_GET_RESOURCE_GROUPS}${ending_character}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:38.130" level="TRACE">Arguments: [ 'ResourceGroupWebService.svc/resourcegroups/' ]</msg>
<msg timestamp="20200107 09:49:38.131" level="TRACE">Return: 'ResourceGroupWebService.svc/resourcegroups/'</msg>
<msg timestamp="20200107 09:49:38.131" level="INFO">${uri} = ResourceGroupWebService.svc/resourcegroups/</msg>
<status status="PASS" starttime="20200107 09:49:38.130" endtime="20200107 09:49:38.131"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:38.131" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'ResourceGroupWebService.svc/resourcegroups/' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} | params={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<msg timestamp="20200107 09:49:38.131" level="INFO">GET Request using : uri=ResourceGroupWebService.svc/resourcegroups/, params={'OrganizationID': 46663, 'IsActive': 'True', 'AsOfDateTime': '01/07/2020'}, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:38.133" level="DEBUG">Starting new HTTPS connection (1): d3ws.xataxrs.com:443</msg>
<msg timestamp="20200107 09:49:39.497" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /ResourceGroupWebService.svc/resourcegroups/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01%2F07%2F2020 HTTP/1.1" 200 660</msg>
<msg timestamp="20200107 09:49:39.499" level="DEBUG">GET Response : status=200, reason=OK
[{"DeviceNumberList":["9522227832"],"DeviceSidList":[2720],"DriverIdList":[],"DriverSidList":[],"IsDefaultGroup":true,"IsSharedResourceGroup":false,"ModifiedBy":0,"ModifiedDate":"\/Date(1578440932602-0800)\/","OrganizationID":"46663","OrganizationSID":414,"ResourceGroupName":"Gnome Shipping D3","ResourceGroupSid":357,"SiteIdList":[],"SiteSidList":[],"Status":true,"TrailerIdList":[],"TrailerSidList":[],"UserIdList":["dispatchUser","fleetviewUser","kstine","readOnlyUser","admin","beer","annj","operationsUser","mobileInstallerUser","maintenanceUser"],"UserSidList":[5687,5690,5685,5686,5412,5736,5523,5688,5691,5689],"VehicleIdList":[],"VehicleSidList":[]}]</msg>
<msg timestamp="20200107 09:49:39.499" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:39.500" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:38.131" endtime="20200107 09:49:39.501"></status>
</kw>
<msg timestamp="20200107 09:49:39.501" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:39.502" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:38.130" endtime="20200107 09:49:39.502"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:39.504" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:39.505" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:39.505" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:39.503" endtime="20200107 09:49:39.505"></status>
</kw>
<msg timestamp="20200107 09:49:39.506" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:38.128" endtime="20200107 09:49:39.506"></status>
</kw>
<kw name="Verify Get Resource Groups Without Forward Slash Returns 200 OK">
<doc>Verify that not using a '/' in the URI returns 200 OK</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<msg timestamp="20200107 09:49:39.509" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Get Resource Groups" library="ResourceGroup">
<doc>Call the Get Method on Organizations.
This will get Organizations that match the provided parameters.
Params can be named individually or within a Dictionary
Param Definitions:
AsOfDateTime
Tells the service to return only the data that changed since the specified date and time.
Status
Filters results to active organizations only.
Valid Values: True False Both
Limit
Used in conjunction with the Offset parameter to implement paging.
Limits the number of results to a specified number.
System Limit: 10,000
Offset
Used in conjunction with the Limit parameter to implement paging.
Represents a page number for the starting point of the return set.
OrganizationId
Limits results to organizations that fall under the specified organization.
ResourceGroupId
Limits results to Organizations in one or more resource groups.
OrganizationSid
Limits results to organizations that fall under the specified organization.
ResourceGroupSid
Limits results to Organizations in one or more resource groups.</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:39.512" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Resource_Group}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_GET_RESOURCE_GROUPS}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:39.513" level="TRACE">Arguments: [ 'ResourceGroupWebService.svc/resourcegroups' ]</msg>
<msg timestamp="20200107 09:49:39.513" level="TRACE">Return: 'ResourceGroupWebService.svc/resourcegroups'</msg>
<msg timestamp="20200107 09:49:39.513" level="INFO">${uri} = ResourceGroupWebService.svc/resourcegroups</msg>
<status status="PASS" starttime="20200107 09:49:39.512" endtime="20200107 09:49:39.513"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:39.514" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'ResourceGroupWebService.svc/resourcegroups' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} | params={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<msg timestamp="20200107 09:49:39.515" level="INFO">GET Request using : uri=ResourceGroupWebService.svc/resourcegroups, params={'OrganizationID': 46663, 'IsActive': 'True', 'AsOfDateTime': '01/07/2020'}, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:40.177" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /ResourceGroupWebService.svc/resourcegroups?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01%2F07%2F2020 HTTP/1.1" 200 660</msg>
<msg timestamp="20200107 09:49:40.180" level="DEBUG">GET Response : status=200, reason=OK
[{"DeviceNumberList":["9522227832"],"DeviceSidList":[2720],"DriverIdList":[],"DriverSidList":[],"IsDefaultGroup":true,"IsSharedResourceGroup":false,"ModifiedBy":0,"ModifiedDate":"\/Date(1578440932602-0800)\/","OrganizationID":"46663","OrganizationSID":414,"ResourceGroupName":"Gnome Shipping D3","ResourceGroupSid":357,"SiteIdList":[],"SiteSidList":[],"Status":true,"TrailerIdList":[],"TrailerSidList":[],"UserIdList":["dispatchUser","fleetviewUser","kstine","readOnlyUser","admin","beer","annj","operationsUser","mobileInstallerUser","maintenanceUser"],"UserSidList":[5687,5690,5685,5686,5412,5736,5523,5688,5691,5689],"VehicleIdList":[],"VehicleSidList":[]}]</msg>
<msg timestamp="20200107 09:49:40.180" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:40.181" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:39.513" endtime="20200107 09:49:40.181"></status>
</kw>
<msg timestamp="20200107 09:49:40.182" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:40.182" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:39.510" endtime="20200107 09:49:40.182"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:40.184" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:40.184" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:40.185" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:40.183" endtime="20200107 09:49:40.185"></status>
</kw>
<msg timestamp="20200107 09:49:40.185" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:39.508" endtime="20200107 09:49:40.186"></status>
</kw>
<doc>Get Resource Groups with basic parameters</doc>
<tags>
<tag>awsxrsresourcegrouprestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:38.126" endtime="20200107 09:49:40.188" critical="yes"></status>
</test>
<test id="s1-s1-s4-t2" name="Validate AWS XRS Get Resource Groups REST Web Services Returns 200 OK With Raw String URI">
<kw name="Verify Get Resource Groups Raw String URI With /? Returns 200 OK">
<doc>Verify that using the given character string in the raw URI string returns 200 OK</doc>
<msg timestamp="20200107 09:49:40.193" level="TRACE">Arguments: [ ${character_string}='/?' ]</msg>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:49:40.194" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:49:40.194" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:49:40.194" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:49:40.194" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:49:40.194" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:49:40.194" endtime="20200107 09:49:40.194"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:49:40.195" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:49:40.196" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20200107 09:49:40.196" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:49:40.195" endtime="20200107 09:49:40.196"></status>
</kw>
<kw name="Create URI String With" library="URIStringBuilderTool">
<doc>Helper Keyword to construct the request uri with different character strings
base_uri = webservice uri
request_type = request extension for the webservice
character_string = final character of the uri. i.e. /, /?, etc ...</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Resource_Group}</arg>
<arg>${XRS_WEBSERVICE_ENTITY_MANAGEMENT_GET_RESOURCE_GROUPS}</arg>
<arg>${character_string}</arg>
</arguments>
<assign>
<var>${uri_string}</var>
</assign>
<msg timestamp="20200107 09:49:40.197" level="TRACE">Arguments: [ ${base_uri}='ResourceGroupWebService.svc' | ${request_type}='/resourcegroups' | ${character_string}='/?' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${base_uri}${request_type}${character_string}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:40.198" level="TRACE">Arguments: [ 'ResourceGroupWebService.svc/resourcegroups/?' ]</msg>
<msg timestamp="20200107 09:49:40.198" level="TRACE">Return: 'ResourceGroupWebService.svc/resourcegroups/?'</msg>
<msg timestamp="20200107 09:49:40.198" level="INFO">${uri} = ResourceGroupWebService.svc/resourcegroups/?</msg>
<status status="PASS" starttime="20200107 09:49:40.198" endtime="20200107 09:49:40.198"></status>
</kw>
<msg timestamp="20200107 09:49:40.198" level="TRACE">Return: 'ResourceGroupWebService.svc/resourcegroups/?'</msg>
<msg timestamp="20200107 09:49:40.198" level="INFO">${uri_string} = ResourceGroupWebService.svc/resourcegroups/?</msg>
<status status="PASS" starttime="20200107 09:49:40.197" endtime="20200107 09:49:40.199"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${uri_string}OrganizationID=${params.OrganizationID}&amp;IsActive=${params.IsActive}&amp;AsOfDateTime=${params.AsOfDateTime}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:40.199" level="TRACE">Arguments: [ 'ResourceGroupWebService.svc/resourcegroups/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' ]</msg>
<msg timestamp="20200107 09:49:40.200" level="TRACE">Return: 'ResourceGroupWebService.svc/resourcegroups/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020'</msg>
<msg timestamp="20200107 09:49:40.200" level="INFO">${uri} = ResourceGroupWebService.svc/resourcegroups/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020</msg>
<status status="PASS" starttime="20200107 09:49:40.199" endtime="20200107 09:49:40.200"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:40.200" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'ResourceGroupWebService.svc/resourcegroups/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:40.201" level="INFO">GET Request using : uri=ResourceGroupWebService.svc/resourcegroups/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:40.691" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /ResourceGroupWebService.svc/resourcegroups/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020 HTTP/1.1" 200 660</msg>
<msg timestamp="20200107 09:49:40.692" level="DEBUG">GET Response : status=200, reason=OK
[{"DeviceNumberList":["9522227832"],"DeviceSidList":[2720],"DriverIdList":[],"DriverSidList":[],"IsDefaultGroup":true,"IsSharedResourceGroup":false,"ModifiedBy":0,"ModifiedDate":"\/Date(1578440932602-0800)\/","OrganizationID":"46663","OrganizationSID":414,"ResourceGroupName":"Gnome Shipping D3","ResourceGroupSid":357,"SiteIdList":[],"SiteSidList":[],"Status":true,"TrailerIdList":[],"TrailerSidList":[],"UserIdList":["dispatchUser","fleetviewUser","kstine","readOnlyUser","admin","beer","annj","operationsUser","mobileInstallerUser","maintenanceUser"],"UserSidList":[5687,5690,5685,5686,5412,5736,5523,5688,5691,5689],"VehicleIdList":[],"VehicleSidList":[]}]</msg>
<msg timestamp="20200107 09:49:40.692" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:40.692" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:40.200" endtime="20200107 09:49:40.692"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:40.693" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:40.693" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:40.693" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:40.692" endtime="20200107 09:49:40.693"></status>
</kw>
<msg timestamp="20200107 09:49:40.693" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:40.193" endtime="20200107 09:49:40.693"></status>
</kw>
<kw name="Verify Get Resource Groups Raw String URI With ? Returns 200 OK">
<doc>Verify that using the given character string in the raw URI string returns 200 OK</doc>
<msg timestamp="20200107 09:49:40.694" level="TRACE">Arguments: [ ${character_string}='?' ]</msg>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:49:40.694" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:49:40.695" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:49:40.695" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:49:40.695" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:49:40.695" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:49:40.694" endtime="20200107 09:49:40.695"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:49:40.695" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:49:40.696" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20200107 09:49:40.696" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:49:40.695" endtime="20200107 09:49:40.696"></status>
</kw>
<kw name="Create URI String With" library="URIStringBuilderTool">
<doc>Helper Keyword to construct the request uri with different character strings
base_uri = webservice uri
request_type = request extension for the webservice
character_string = final character of the uri. i.e. /, /?, etc ...</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Resource_Group}</arg>
<arg>${XRS_WEBSERVICE_ENTITY_MANAGEMENT_GET_RESOURCE_GROUPS}</arg>
<arg>${character_string}</arg>
</arguments>
<assign>
<var>${uri_string}</var>
</assign>
<msg timestamp="20200107 09:49:40.697" level="TRACE">Arguments: [ ${base_uri}='ResourceGroupWebService.svc' | ${request_type}='/resourcegroups' | ${character_string}='?' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${base_uri}${request_type}${character_string}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:40.697" level="TRACE">Arguments: [ 'ResourceGroupWebService.svc/resourcegroups?' ]</msg>
<msg timestamp="20200107 09:49:40.698" level="TRACE">Return: 'ResourceGroupWebService.svc/resourcegroups?'</msg>
<msg timestamp="20200107 09:49:40.698" level="INFO">${uri} = ResourceGroupWebService.svc/resourcegroups?</msg>
<status status="PASS" starttime="20200107 09:49:40.697" endtime="20200107 09:49:40.698"></status>
</kw>
<msg timestamp="20200107 09:49:40.698" level="TRACE">Return: 'ResourceGroupWebService.svc/resourcegroups?'</msg>
<msg timestamp="20200107 09:49:40.698" level="INFO">${uri_string} = ResourceGroupWebService.svc/resourcegroups?</msg>
<status status="PASS" starttime="20200107 09:49:40.696" endtime="20200107 09:49:40.698"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${uri_string}OrganizationID=${params.OrganizationID}&amp;IsActive=${params.IsActive}&amp;AsOfDateTime=${params.AsOfDateTime}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:40.699" level="TRACE">Arguments: [ 'ResourceGroupWebService.svc/resourcegroups?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' ]</msg>
<msg timestamp="20200107 09:49:40.699" level="TRACE">Return: 'ResourceGroupWebService.svc/resourcegroups?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020'</msg>
<msg timestamp="20200107 09:49:40.699" level="INFO">${uri} = ResourceGroupWebService.svc/resourcegroups?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020</msg>
<status status="PASS" starttime="20200107 09:49:40.698" endtime="20200107 09:49:40.699"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:40.700" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'ResourceGroupWebService.svc/resourcegroups?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:40.700" level="INFO">GET Request using : uri=ResourceGroupWebService.svc/resourcegroups?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:41.244" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /ResourceGroupWebService.svc/resourcegroups?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020 HTTP/1.1" 200 660</msg>
<msg timestamp="20200107 09:49:41.246" level="DEBUG">GET Response : status=200, reason=OK
[{"DeviceNumberList":["9522227832"],"DeviceSidList":[2720],"DriverIdList":[],"DriverSidList":[],"IsDefaultGroup":true,"IsSharedResourceGroup":false,"ModifiedBy":0,"ModifiedDate":"\/Date(1578440932602-0800)\/","OrganizationID":"46663","OrganizationSID":414,"ResourceGroupName":"Gnome Shipping D3","ResourceGroupSid":357,"SiteIdList":[],"SiteSidList":[],"Status":true,"TrailerIdList":[],"TrailerSidList":[],"UserIdList":["dispatchUser","fleetviewUser","kstine","readOnlyUser","admin","beer","annj","operationsUser","mobileInstallerUser","maintenanceUser"],"UserSidList":[5687,5690,5685,5686,5412,5736,5523,5688,5691,5689],"VehicleIdList":[],"VehicleSidList":[]}]</msg>
<msg timestamp="20200107 09:49:41.247" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:41.247" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:40.699" endtime="20200107 09:49:41.248"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:41.250" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:41.251" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:41.251" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:41.248" endtime="20200107 09:49:41.251"></status>
</kw>
<msg timestamp="20200107 09:49:41.252" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:40.694" endtime="20200107 09:49:41.252"></status>
</kw>
<doc>Get Resource Groups with basic parameters using a raw URI string</doc>
<tags>
<tag>awsxrsresourcegrouprestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:40.192" endtime="20200107 09:49:41.254" critical="yes"></status>
</test>
<test id="s1-s1-s4-t3" name="Validate AWS XRS Get Resource Groups REST Web Services For All Resource Groups Returns 200 OK">
<kw name="Get All Resource Groups" library="ResourceGroup">
<doc>Get attributes for all organizations.</doc>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:41.263" level="TRACE">Arguments: [  ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Resource_Group}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_GET_RESOURCE_GROUPS}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:41.264" level="TRACE">Arguments: [ 'ResourceGroupWebService.svc/resourcegroups' ]</msg>
<msg timestamp="20200107 09:49:41.264" level="TRACE">Return: 'ResourceGroupWebService.svc/resourcegroups'</msg>
<msg timestamp="20200107 09:49:41.264" level="INFO">${uri} = ResourceGroupWebService.svc/resourcegroups</msg>
<status status="PASS" starttime="20200107 09:49:41.263" endtime="20200107 09:49:41.264"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:41.265" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'ResourceGroupWebService.svc/resourcegroups' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:41.267" level="INFO">GET Request using : uri=ResourceGroupWebService.svc/resourcegroups, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:41.771" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /ResourceGroupWebService.svc/resourcegroups HTTP/1.1" 200 660</msg>
<msg timestamp="20200107 09:49:41.773" level="DEBUG">GET Response : status=200, reason=OK
[{"DeviceNumberList":["9522227832"],"DeviceSidList":[2720],"DriverIdList":[],"DriverSidList":[],"IsDefaultGroup":true,"IsSharedResourceGroup":false,"ModifiedBy":0,"ModifiedDate":"\/Date(1578440932602-0800)\/","OrganizationID":"46663","OrganizationSID":414,"ResourceGroupName":"Gnome Shipping D3","ResourceGroupSid":357,"SiteIdList":[],"SiteSidList":[],"Status":true,"TrailerIdList":[],"TrailerSidList":[],"UserIdList":["dispatchUser","fleetviewUser","kstine","readOnlyUser","admin","beer","annj","operationsUser","mobileInstallerUser","maintenanceUser"],"UserSidList":[5687,5690,5685,5686,5412,5736,5523,5688,5691,5689],"VehicleIdList":[],"VehicleSidList":[]}]</msg>
<msg timestamp="20200107 09:49:41.774" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:41.774" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:41.265" endtime="20200107 09:49:41.774"></status>
</kw>
<msg timestamp="20200107 09:49:41.775" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:41.776" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:41.262" endtime="20200107 09:49:41.776"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:41.780" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:41.781" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:41.781" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:41.779" endtime="20200107 09:49:41.782"></status>
</kw>
<doc>Gets all the Organizations</doc>
<tags>
<tag>awsxrsresourcegrouprestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>xrsawsperftest</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:41.259" endtime="20200107 09:49:41.784" critical="yes"></status>
</test>
<test id="s1-s1-s4-t4" name="Validate AWS XRS Get Device REST Web Services Returns 200 OK">
<kw name="Get Resource Group By Resource Group Id" library="ResourceGroup">
<doc>Get resource group information for a particular group using the resource group id</doc>
<arguments>
<arg>${DEFAULT_RESOURCE_GROUP.RESOURCE_GROUP_NAME}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:41.797" level="TRACE">Arguments: [ ${resource_group_id}='Gnome Shipping D3' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Resource_Group}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_GET_RESOURCE_GROUP}/${resource_group_id}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:41.798" level="TRACE">Arguments: [ 'ResourceGroupWebService.svc/resourcegroup/Gnome Shipping D3' ]</msg>
<msg timestamp="20200107 09:49:41.799" level="TRACE">Return: 'ResourceGroupWebService.svc/resourcegroup/Gnome Shipping D3'</msg>
<msg timestamp="20200107 09:49:41.799" level="INFO">${uri} = ResourceGroupWebService.svc/resourcegroup/Gnome Shipping D3</msg>
<status status="PASS" starttime="20200107 09:49:41.798" endtime="20200107 09:49:41.799"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:41.800" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'ResourceGroupWebService.svc/resourcegroup/Gnome Shipping D3' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:41.800" level="INFO">GET Request using : uri=ResourceGroupWebService.svc/resourcegroup/Gnome Shipping D3, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:42.291" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /ResourceGroupWebService.svc/resourcegroup/Gnome%20Shipping%20D3 HTTP/1.1" 200 658</msg>
<msg timestamp="20200107 09:49:42.293" level="DEBUG">GET Response : status=200, reason=OK
{"DeviceNumberList":["9522227832"],"DeviceSidList":[2720],"DriverIdList":[],"DriverSidList":[],"IsDefaultGroup":true,"IsSharedResourceGroup":false,"ModifiedBy":0,"ModifiedDate":"\/Date(1578440932602-0800)\/","OrganizationID":"46663","OrganizationSID":414,"ResourceGroupName":"Gnome Shipping D3","ResourceGroupSid":357,"SiteIdList":[],"SiteSidList":[],"Status":true,"TrailerIdList":[],"TrailerSidList":[],"UserIdList":["dispatchUser","fleetviewUser","kstine","readOnlyUser","admin","beer","annj","operationsUser","mobileInstallerUser","maintenanceUser"],"UserSidList":[5687,5690,5685,5686,5412,5736,5523,5688,5691,5689],"VehicleIdList":[],"VehicleSidList":[]}</msg>
<msg timestamp="20200107 09:49:42.294" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:42.294" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:41.799" endtime="20200107 09:49:42.295"></status>
</kw>
<msg timestamp="20200107 09:49:42.295" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:42.296" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:41.796" endtime="20200107 09:49:42.296"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:42.299" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:42.300" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:42.301" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:42.298" endtime="20200107 09:49:42.301"></status>
</kw>
<doc>Verifies that a posted device now exists</doc>
<tags>
<tag>awsxrsresourcegrouprestwebservicevalidation</tag>
<tag>awsxrsrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:41.793" endtime="20200107 09:49:42.302" critical="yes"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary" type="teardown">
<doc>Removes all the session objects</doc>
<msg timestamp="20200107 09:49:42.308" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200107 09:49:42.308" level="INFO">Delete All Sessions</msg>
<msg timestamp="20200107 09:49:42.308" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:42.308" endtime="20200107 09:49:42.309"></status>
</kw>
<doc>Fundamental suite to test XRS AWS Resource Group Entity Management Web Services</doc>
<status status="PASS" starttime="20200107 09:49:38.045" endtime="20200107 09:49:42.309"></status>
</suite>
<suite id="s1-s1-s5" name="ValidateAWSXRSSiteWebService" source="C:\Users\kstine\git\aws-api-gateway-tests\Tests\AWS_XRS_WebServicesTests\05__ValidateAWSXRSSiteWebService.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Create AWS XRS Web Services Session</arg>
<arg>AND</arg>
<arg>Test Data Setup For XRS AWS Site Web Service Test Suite</arg>
</arguments>
<msg timestamp="20200107 09:49:42.391" level="TRACE">Arguments: [ 'Create AWS XRS Web Services Session' | 'AND' | 'Test Data Setup For XRS AWS Site Web Service Test Suite' ]</msg>
<kw name="Create AWS XRS Web Services Session" library="XRSCommonWebService">
<doc>Create a session with aws xrs web services</doc>
<msg timestamp="20200107 09:49:42.391" level="TRACE">Arguments: [  ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${XRS_AWS_WEBSERVICES_URL}[${XRS_HOST_ENVIRONMENT}]</arg>
<arg>verify=True</arg>
<arg>auth=${XRS_WEBSERVICES_AUTHORIZATION}</arg>
</arguments>
<msg timestamp="20200107 09:49:42.392" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'https://d3ws.xataxrs.com' | verify=True | auth=['GnomeShippingD3|admin', 'xrs123'] ]</msg>
<msg timestamp="20200107 09:49:42.392" level="INFO">Creating Session using : alias=xrs_web_service_session, url=https://d3ws.xataxrs.com, headers={},                     cookies={}, auth=&lt;requests.auth.HTTPBasicAuth object at 0x0000018E38BF3310&gt;, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<msg timestamp="20200107 09:49:42.392" level="DEBUG">Creating session: xrs_web_service_session</msg>
<msg timestamp="20200107 09:49:42.392" level="DEBUG">Argument types are:
&lt;class 'bool'&gt;</msg>
<msg timestamp="20200107 09:49:42.392" level="TRACE">Return: &lt;requests.sessions.Session object at 0x0000018E38BF3BB0&gt;</msg>
<status status="PASS" starttime="20200107 09:49:42.392" endtime="20200107 09:49:42.392"></status>
</kw>
<msg timestamp="20200107 09:49:42.392" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:42.391" endtime="20200107 09:49:42.392"></status>
</kw>
<kw name="Test Data Setup For XRS AWS Site Web Service Test Suite">
<doc>Keyword for setting up suite variables for AWS Site Web Service Tests.</doc>
<msg timestamp="20200107 09:49:42.393" level="TRACE">Arguments: [  ]</msg>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>ArrivalGeoCodeType=${XRS_WEB_SERVICES_TEST_SITE.ArrivalGeoCodeType}</arg>
<arg>ArrivalRadius=${XRS_WEB_SERVICES_TEST_SITE.ArrivalRadius}</arg>
<arg>City=${XRS_WEB_SERVICES_TEST_SITE.City}</arg>
<arg>Country=${XRS_WEB_SERVICES_TEST_SITE.Country}</arg>
<arg>DepartureGeoCodeType=${XRS_WEB_SERVICES_TEST_SITE.DepartureGeoCodeType}</arg>
<arg>DepartureRadius=${XRS_WEB_SERVICES_TEST_SITE.DepartureRadius}</arg>
<arg>DepartureSameAsArrival=${XRS_WEB_SERVICES_TEST_SITE.DepartureSameAsArrival}</arg>
<arg>Measure=${XRS_WEB_SERVICES_TEST_SITE.Measure}</arg>
<arg>Name=${XRS_WEB_SERVICES_TEST_SITE.Name}</arg>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>OrganizationName=${XRS_GENERAL_INFORMATION.Company.Company_Name}</arg>
<arg>SiteID=${XRS_WEB_SERVICES_TEST_SITE.SiteID}</arg>
<arg>SiteType=${XRS_WEB_SERVICES_TEST_SITE.SiteType}</arg>
<arg>StateName=${XRS_WEB_SERVICES_TEST_SITE.StateName}</arg>
<arg>TimeZone=${XRS_WEB_SERVICES_TEST_SITE.TimeZone}</arg>
</arguments>
<assign>
<var>&amp;{XRS_AWS_WEBSERVICE_POST_TEST_SITE_1_DICT}</var>
</assign>
<msg timestamp="20200107 09:49:42.393" level="TRACE">Arguments: [ 'ArrivalGeoCodeType=${XRS_WEB_SERVICES_TEST_SITE.ArrivalGeoCodeType}' | 'ArrivalRadius=${XRS_WEB_SERVICES_TEST_SITE.ArrivalRadius}' | 'City=${XRS_WEB_SERVICES_TEST_SITE.City}' | 'Country=${XRS_WEB_SERVICES_TEST_SITE.Country}' | 'DepartureGeoCodeType=${XRS_WEB_SERVICES_TEST_SITE.DepartureGeoCodeType}' | 'DepartureRadius=${XRS_WEB_SERVICES_TEST_SITE.DepartureRadius}' | 'DepartureSameAsArrival=${XRS_WEB_SERVICES_TEST_SITE.DepartureSameAsArrival}' | 'Measure=${XRS_WEB_SERVICES_TEST_SITE.Measure}' | 'Name=${XRS_WEB_SERVICES_TEST_SITE.Name}' | 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'OrganizationName=${XRS_GENERAL_INFORMATION.Company.Company_Name}' | 'SiteID=${XRS_WEB_SERVICES_TEST_SITE.SiteID}' | 'SiteType=${XRS_WEB_SERVICES_TEST_SITE.SiteType}' | 'StateName=${XRS_WEB_SERVICES_TEST_SITE.StateName}' | 'TimeZone=${XRS_WEB_SERVICES_TEST_SITE.TimeZone}' ]</msg>
<msg timestamp="20200107 09:49:42.395" level="TRACE">Return: {'ArrivalGeoCodeType': 'Circle',
 'ArrivalRadius': 500.0,
 'City': 'Minnetonka',
 'Country': 'USA',
 'DepartureGeoCodeType': 'Circle',
 'DepartureRadius': 500.0,
 'DepartureSameAsArrival': True,
 'Measure': 'Feet',
 'Name': 'Test Site',
 'OrganizationID': 46663,
 'OrganizationName': 'Gnome Shipping D3',
 'SiteID': 'TestSite',
 'SiteType': 'Commerce',
 'StateName': 'Minnesota',
 'TimeZone': 'Central'}</msg>
<msg timestamp="20200107 09:49:42.395" level="INFO">&amp;{XRS_AWS_WEBSERVICE_POST_TEST_SITE_1_DICT} = { ArrivalGeoCodeType=Circle | ArrivalRadius=500.0 | City=Minnetonka | Country=USA | DepartureGeoCodeType=Circle | DepartureRadius=500.0 | DepartureSameAsArrival=True | Measure=Feet | Name=Test Site | ...</msg>
<status status="PASS" starttime="20200107 09:49:42.393" endtime="20200107 09:49:42.395"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${XRS_AWS_WEBSERVICE_POST_TEST_SITE_1_DICT}</arg>
</arguments>
<assign>
<var>@{XRS_AWS_WEBSERVICE_POST_TEST_SITE_LIST}</var>
</assign>
<msg timestamp="20200107 09:49:42.395" level="TRACE">Arguments: [ {'ArrivalGeoCodeType': 'Circle',
 'ArrivalRadius': 500.0,
 'City': 'Minnetonka',
 'Country': 'USA',
 'DepartureGeoCodeType': 'Circle',
 'DepartureRadius': 500.0,
 'DepartureSameAsArrival': True,
 'Measure': 'Feet',
 'Name': 'Test Site',
 'OrganizationID': 46663,
 'OrganizationName': 'Gnome Shipping D3',
 'SiteID': 'TestSite',
 'SiteType': 'Commerce',
 'StateName': 'Minnesota',
 'TimeZone': 'Central'} ]</msg>
<msg timestamp="20200107 09:49:42.396" level="TRACE">Return: [{'ArrivalGeoCodeType': 'Circle',
  'ArrivalRadius': 500.0,
  'City': 'Minnetonka',
  'Country': 'USA',
  'DepartureGeoCodeType': 'Circle',
  'DepartureRadius': 500.0,
  'DepartureSameAsArrival': True,
  'Measure': 'Feet',
  'Name': 'Test Site',
  'OrganizationID': 46663,
  'OrganizationName': 'Gnome Shipping D3',
  'SiteID': 'TestSite',
  'SiteType': 'Commerce',
  'StateName': 'Minnesota',
  'TimeZone': 'Central'}]</msg>
<msg timestamp="20200107 09:49:42.396" level="INFO">@{XRS_AWS_WEBSERVICE_POST_TEST_SITE_LIST} = [ {'ArrivalGeoCodeType': 'Circle', 'ArrivalRadius': 500.0, 'City': 'Minnetonka', 'Country': 'USA', 'DepartureGeoCodeType': 'Circle', 'DepartureRadius': 500.0, 'DepartureSameAsArrival': True, 'Measure'...</msg>
<status status="PASS" starttime="20200107 09:49:42.395" endtime="20200107 09:49:42.396"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_POST_TEST_Site_LIST}</arg>
</arguments>
<msg timestamp="20200107 09:49:42.396" level="TRACE">Arguments: [ '@{XRS_AWS_WEBSERVICE_POST_TEST_Site_LIST}' ]</msg>
<msg timestamp="20200107 09:49:42.396" level="INFO">@{XRS_AWS_WEBSERVICE_POST_TEST_Site_LIST} = [ {'ArrivalGeoCodeType': 'Circle', 'ArrivalRadius': 500.0, 'City': 'Minnetonka', 'Country': 'USA', 'DepartureGeoCodeType': 'Circle', 'DepartureRadius': 500.0, 'DepartureSameAsArrival': True, 'Measure'...</msg>
<msg timestamp="20200107 09:49:42.396" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:42.396" endtime="20200107 09:49:42.396"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>ArrivalRadius=${XRS_WEB_SERVICES_TEST_SITE.ArrivalRadius}</arg>
<arg>City=${XRS_WEB_SERVICES_TEST_SITE.City}</arg>
<arg>Country=${XRS_WEB_SERVICES_TEST_SITE.Country}</arg>
<arg>DepartureRadius=${XRS_WEB_SERVICES_TEST_SITE.DepartureRadius}</arg>
<arg>Name=${XRS_WEB_SERVICES_TEST_SITE.Name}Modified</arg>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>SiteID=${XRS_WEB_SERVICES_TEST_SITE.SiteID}</arg>
<arg>StateName=${XRS_WEB_SERVICES_TEST_SITE.StateName}</arg>
<arg>TimeZone=${XRS_WEB_SERVICES_TEST_SITE.TimeZone}</arg>
</arguments>
<assign>
<var>&amp;{XRS_AWS_WEBSERVICE_PUT_TEST_Site_1_DICT}</var>
</assign>
<msg timestamp="20200107 09:49:42.397" level="TRACE">Arguments: [ 'ArrivalRadius=${XRS_WEB_SERVICES_TEST_SITE.ArrivalRadius}' | 'City=${XRS_WEB_SERVICES_TEST_SITE.City}' | 'Country=${XRS_WEB_SERVICES_TEST_SITE.Country}' | 'DepartureRadius=${XRS_WEB_SERVICES_TEST_SITE.DepartureRadius}' | 'Name=${XRS_WEB_SERVICES_TEST_SITE.Name}Modified' | 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'SiteID=${XRS_WEB_SERVICES_TEST_SITE.SiteID}' | 'StateName=${XRS_WEB_SERVICES_TEST_SITE.StateName}' | 'TimeZone=${XRS_WEB_SERVICES_TEST_SITE.TimeZone}' ]</msg>
<msg timestamp="20200107 09:49:42.398" level="TRACE">Return: {'ArrivalRadius': 500.0,
 'City': 'Minnetonka',
 'Country': 'USA',
 'DepartureRadius': 500.0,
 'Name': 'Test SiteModified',
 'OrganizationID': 46663,
 'SiteID': 'TestSite',
 'StateName': 'Minnesota',
 'TimeZone': 'Central'}</msg>
<msg timestamp="20200107 09:49:42.398" level="INFO">&amp;{XRS_AWS_WEBSERVICE_PUT_TEST_Site_1_DICT} = { ArrivalRadius=500.0 | City=Minnetonka | Country=USA | DepartureRadius=500.0 | Name=Test SiteModified | OrganizationID=46663 | SiteID=TestSite | StateName=Minnesota | TimeZone=Central }</msg>
<status status="PASS" starttime="20200107 09:49:42.396" endtime="20200107 09:49:42.398"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${XRS_AWS_WEBSERVICE_PUT_TEST_SITE_1_DICT}</arg>
</arguments>
<assign>
<var>@{XRS_AWS_WEBSERVICE_PUT_TEST_SITE_LIST}</var>
</assign>
<msg timestamp="20200107 09:49:42.398" level="TRACE">Arguments: [ {'ArrivalRadius': 500.0,
 'City': 'Minnetonka',
 'Country': 'USA',
 'DepartureRadius': 500.0,
 'Name': 'Test SiteModified',
 'OrganizationID': 46663,
 'SiteID': 'TestSite',
 'StateName': 'Minnesota',
 'TimeZone': 'Central'} ]</msg>
<msg timestamp="20200107 09:49:42.398" level="TRACE">Return: [{'ArrivalRadius': 500.0,
  'City': 'Minnetonka',
  'Country': 'USA',
  'DepartureRadius': 500.0,
  'Name': 'Test SiteModified',
  'OrganizationID': 46663,
  'SiteID': 'TestSite',
  'StateName': 'Minnesota',
  'TimeZone': 'Central'}]</msg>
<msg timestamp="20200107 09:49:42.398" level="INFO">@{XRS_AWS_WEBSERVICE_PUT_TEST_SITE_LIST} = [ {'ArrivalRadius': 500.0, 'City': 'Minnetonka', 'Country': 'USA', 'DepartureRadius': 500.0, 'Name': 'Test SiteModified', 'OrganizationID': 46663, 'SiteID': 'TestSite', 'StateName': 'Minnesota', 'Time...</msg>
<status status="PASS" starttime="20200107 09:49:42.398" endtime="20200107 09:49:42.398"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_PUT_TEST_SITE_LIST}</arg>
</arguments>
<msg timestamp="20200107 09:49:42.399" level="TRACE">Arguments: [ '@{XRS_AWS_WEBSERVICE_PUT_TEST_SITE_LIST}' ]</msg>
<msg timestamp="20200107 09:49:42.399" level="INFO">@{XRS_AWS_WEBSERVICE_PUT_TEST_SITE_LIST} = [ {'ArrivalRadius': 500.0, 'City': 'Minnetonka', 'Country': 'USA', 'DepartureRadius': 500.0, 'Name': 'Test SiteModified', 'OrganizationID': 46663, 'SiteID': 'TestSite', 'StateName': 'Minnesota', 'Time...</msg>
<msg timestamp="20200107 09:49:42.399" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:42.399" endtime="20200107 09:49:42.399"></status>
</kw>
<msg timestamp="20200107 09:49:42.399" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:42.393" endtime="20200107 09:49:42.399"></status>
</kw>
<msg timestamp="20200107 09:49:42.399" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:42.391" endtime="20200107 09:49:42.399"></status>
</kw>
<test id="s1-s1-s5-t1" name="Validate AWS XRS Get Site REST Web Services Returns Geographic &quot;Site identity does not exist.&quot; Error Message">
<kw name="Get Sites By Site Id" library="Site">
<doc>Get organizations by Site ID.</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_SITE.SiteID}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:42.400" level="TRACE">Arguments: [ ${site_id}='TestSite' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Site}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_SITE}/${site_id}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:42.401" level="TRACE">Arguments: [ 'SiteWebService.svc/sites/TestSite' ]</msg>
<msg timestamp="20200107 09:49:42.401" level="TRACE">Return: 'SiteWebService.svc/sites/TestSite'</msg>
<msg timestamp="20200107 09:49:42.401" level="INFO">${uri} = SiteWebService.svc/sites/TestSite</msg>
<status status="PASS" starttime="20200107 09:49:42.400" endtime="20200107 09:49:42.401"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:42.401" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'SiteWebService.svc/sites/TestSite' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:42.401" level="INFO">GET Request using : uri=SiteWebService.svc/sites/TestSite, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:42.403" level="DEBUG">Starting new HTTPS connection (1): d3ws.xataxrs.com:443</msg>
<msg timestamp="20200107 09:49:43.376" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /SiteWebService.svc/sites/TestSite HTTP/1.1" 500 117</msg>
<msg timestamp="20200107 09:49:43.378" level="DEBUG">GET Response : status=500, reason=Internal Server Error
{"ErrorMessage":"Geographic Site identity does not exist.","EventCode":3461579431091372032,"Parameters":["TestSite"]}</msg>
<msg timestamp="20200107 09:49:43.378" level="TRACE">Return: &lt;Response [500]&gt;</msg>
<msg timestamp="20200107 09:49:43.379" level="INFO">${response} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:42.401" endtime="20200107 09:49:43.379"></status>
</kw>
<msg timestamp="20200107 09:49:43.379" level="TRACE">Return: &lt;Response [500]&gt;</msg>
<msg timestamp="20200107 09:49:43.380" level="INFO">${response} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:42.400" endtime="20200107 09:49:43.380"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20200107 09:49:43.384" level="TRACE">Arguments: [ b'{"ErrorMessage":"Geographic Site identity does not exist.","EventCode":3461579431091372032,"Parameters":["TestSite"]}' ]</msg>
<msg timestamp="20200107 09:49:43.384" level="INFO">To JSON using : content={"ErrorMessage":"Geographic Site identity does not exist.","EventCode":3461579431091372032,"Parameters":["TestSite"]} </msg>
<msg timestamp="20200107 09:49:43.384" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20200107 09:49:43.385" level="TRACE">Return: {'ErrorMessage': 'Geographic Site identity does not exist.',
 'EventCode': 3461579431091372032,
 'Parameters': ['TestSite']}</msg>
<msg timestamp="20200107 09:49:43.386" level="INFO">${json_response} = {'ErrorMessage': 'Geographic Site identity does not exist.', 'EventCode': 3461579431091372032, 'Parameters': ['TestSite']}</msg>
<status status="PASS" starttime="20200107 09:49:43.382" endtime="20200107 09:49:43.386"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_response}[ErrorMessage]</arg>
<arg>Geographic Site identity does not exist.</arg>
</arguments>
<msg timestamp="20200107 09:49:43.389" level="TRACE">Arguments: [ 'Geographic Site identity does not exist.' | 'Geographic Site identity does not exist.' ]</msg>
<msg timestamp="20200107 09:49:43.390" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:43.391" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:43.388" endtime="20200107 09:49:43.392"></status>
</kw>
<doc>Verifies that a Site with a specific number does not exist</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrssiterestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:42.399" endtime="20200107 09:49:43.393" critical="yes"></status>
</test>
<test id="s1-s1-s5-t2" name="Validate AWS XRS Post Site REST Web Services Returns Description &quot;Geographic Site added successfully.&quot;">
<kw name="Post Sites" library="Site">
<doc>Calls the Post Method on Organizations.
Accepts a list of json objects
Json field definitions (POST/PUT requirements):
Address
The address of the site.
ArrivalGeoCodeType
Indicates whether the site area is defined as a circle or a polygon
ArrivalPolygonPoints
The collection of lat/long pairs for each point that defines the boundaries of the polygon.
ArrivalRadius
Arrival perimeter of CIRCLE GeoCode site.
The arrival circle characteristics are also used in site lookups throughout the system.​
City
The name of the city where the site is located.
Country
The name of the country where the site is located.
CreateDate
The date and time the site object was created.
The value of this field is Read Only and cannot be modified using PUT or POST commands.
DeliveryWindows
Delivery Windows Collection Field Definitions:
BeginTime
The beginning time of the delivery window.
DayOfWeek
The day to which the delivery window applies.
When multiple days are provided using a comma separated list,
the values provided in the BeginTime and EndTime fields will apply to all days provided in the list.
EndTime
The ending time of the delivery window.
IsAllowDelivery
The type of delivery window.
A value of true indicates that deliveries are allowed during this window.
A value of false indicates deliveries are not allowed during this window.
DepartureGeoCodeType
Indicates whether the site area is defined as a circle or a polygon
DeparturePolygonPoints
Collection of latitude and longitude coordinate​ pairs for each point that defines the boundary of the polygon GeoCode type.
DepartureRadius
Departure perimeter of a circle Geocode Type
NOTE: This field does not apply to polygon GeoCode types.
DepartureSameAsArrival
Indicates whether the site departure geocode is the same as the site arrive geocode.
Latitude
The latitudinal position of the site.
XRS supports up to 6 decimal points for this value.
Longitude
The longitudinal position of the site.
XRS supports up to 6 decimal points for this value.
Measure
The unit of measure to be used for the Site radius (if selected)
ModifiedBy
The ID of the last person to modify the site.
From AC: CreateDate, ModifiedDate and ModifiedBy data fields will be initialized by system.
ModifiedDate
The date the site record was last modified.
The value of this field is Read Only and cannot be modified using PUT or POST commands.
Name
The name of the Site.
Field length is 3-50 to match current host GUI.
OrganizationID
The user-defined ID of the Organization in XRS.
OrganizationName
The user-defined name of the organization.
PostalCode
The 5 to 9 digit zip code for the organization.
ResourceGroupIDs
Indicates the set of ResourceGroupIDs to which the site belongs.
SiteID
The user-defined ID of the Site in Omnitracs XRS.
SiteType
Unknown, Commerce, Domicile, Terminal, Fuel Stop, Government, Rest Stop, Shop, Truck Stop
StateName
The name of the state or province where the site is located.
This field corresponds to the State.Province field on the Edit Site &gt; General Information tab.
TimeZone
Identifies the Time Zone the site is located in.
UserDefinedField1
User-defined field #1
UserDefinedField2
User-defined field #2
UserDefinedField3
User-defined field #3
UserDefinedField4
User-defined field #4
UserDefinedField5
User-defined field #5</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_POST_TEST_SITE_LIST}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:43.402" level="TRACE">Arguments: [ @{list_data}=[{'ArrivalGeoCodeType': 'Circle',
  'ArrivalRadius': 500.0,
  'City': 'Minnetonka',
  'Country': 'USA',
  'DepartureGeoCodeType': 'Circle',
  'DepartureRadius': 500.0,
  'DepartureSameAsArrival': True,
  'Measure': 'Feet',
  'Name': 'Test Site',
  'OrganizationID': 46663,
  'OrganizationName': 'Gnome Shipping D3',
  'SiteID': 'TestSite',
  'SiteType': 'Commerce',
  'StateName': 'Minnesota',
  'TimeZone': 'Central'}] ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Site}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_SITE}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:43.403" level="TRACE">Arguments: [ 'SiteWebService.svc/sites' ]</msg>
<msg timestamp="20200107 09:49:43.403" level="TRACE">Return: 'SiteWebService.svc/sites'</msg>
<msg timestamp="20200107 09:49:43.403" level="INFO">${uri} = SiteWebService.svc/sites</msg>
<status status="PASS" starttime="20200107 09:49:43.402" endtime="20200107 09:49:43.403"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>json=${list_data}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:43.404" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'SiteWebService.svc/sites' | json=[{'ArrivalGeoCodeType': 'Circle',
  'ArrivalRadius': 500.0,
  'City': 'Minnetonka',
  'Country': 'USA',
  'DepartureGeoCodeType': 'Circle',
  'DepartureRadius': 500.0,
  'DepartureSameAsArrival': True,
  'Measure': 'Feet',
  'Name': 'Test Site',
  'OrganizationID': 46663,
  'OrganizationName': 'Gnome Shipping D3',
  'SiteID': 'TestSite',
  'SiteType': 'Commerce',
  'StateName': 'Minnesota',
  'TimeZone': 'Central'}] | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:43.404" level="INFO">POST Request using : uri=SiteWebService.svc/sites, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=[{'ArrivalGeoCodeType': 'Circle', 'ArrivalRadius': 500.0, 'City': 'Minnetonka', 'Country': 'USA', 'DepartureGeoCodeType': 'Circle', 'DepartureRadius': 500.0, 'DepartureSameAsArrival': True, 'Measure': 'Feet', 'Name': 'Test Site', 'OrganizationID': 46663, 'OrganizationName': 'Gnome Shipping D3', 'SiteID': 'TestSite', 'SiteType': 'Commerce', 'StateName': 'Minnesota', 'TimeZone': 'Central'}]</msg>
<msg timestamp="20200107 09:49:45.732" level="DEBUG">https://d3ws.xataxrs.com:443 "POST /SiteWebService.svc/sites HTTP/1.1" 200 173</msg>
<msg timestamp="20200107 09:49:45.734" level="DEBUG">POST Response : status=200, reason=OK
[{"Caption":"Created","Code":"201","Description":"Geographic Site added successfully.","Id":"TestSite","ObjectName":"Test Site","SID":21344,"Title":"GeographicSite Added."}]</msg>
<msg timestamp="20200107 09:49:45.734" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:45.735" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:43.403" endtime="20200107 09:49:45.735"></status>
</kw>
<msg timestamp="20200107 09:49:45.736" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:45.736" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:43.401" endtime="20200107 09:49:45.736"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20200107 09:49:45.740" level="TRACE">Arguments: [ b'[{"Caption":"Created","Code":"201","Description":"Geographic Site added successfully.","Id":"TestSite","ObjectName":"Test Site","SID":21344,"Title":"GeographicSite Added."}]' ]</msg>
<msg timestamp="20200107 09:49:45.741" level="INFO">To JSON using : content=[{"Caption":"Created","Code":"201","Description":"Geographic Site added successfully.","Id":"TestSite","ObjectName":"Test Site","SID":21344,"Title":"GeographicSite Added."}] </msg>
<msg timestamp="20200107 09:49:45.741" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20200107 09:49:45.741" level="TRACE">Return: [{'Caption': 'Created',
  'Code': '201',
  'Description': 'Geographic Site added successfully.',
  'Id': 'TestSite',
  'ObjectName': 'Test Site',
  'SID': 21344,
  'Title': 'GeographicSite Added.'}]</msg>
<msg timestamp="20200107 09:49:45.742" level="INFO">${json_response} = [{'Caption': 'Created', 'Code': '201', 'Description': 'Geographic Site added successfully.', 'Id': 'TestSite', 'ObjectName': 'Test Site', 'SID': 21344, 'Title': 'GeographicSite Added.'}]</msg>
<status status="PASS" starttime="20200107 09:49:45.739" endtime="20200107 09:49:45.743"></status>
</kw>
<kw name="${r} IN [ @{json_response} ]" type="for">
<kw name="${r} = {'Caption': 'Created', 'Code': '201', 'Description': 'Geographic Site added successfully.', 'Id': 'TestSite', 'ObjectName': 'Test Site', 'SID': 21344, 'Title': 'GeographicSite Added.'}" type="foritem">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${r}[Description]</arg>
<arg>Geographic Site added successfully.</arg>
</arguments>
<msg timestamp="20200107 09:49:45.745" level="TRACE">Arguments: [ 'Geographic Site added successfully.' | 'Geographic Site added successfully.' ]</msg>
<msg timestamp="20200107 09:49:45.745" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:45.745" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:45.744" endtime="20200107 09:49:45.745"></status>
</kw>
<status status="PASS" starttime="20200107 09:49:45.744" endtime="20200107 09:49:45.746"></status>
</kw>
<status status="PASS" starttime="20200107 09:49:45.743" endtime="20200107 09:49:45.746"></status>
</kw>
<doc>Posts a Site and expects a Code value of 201</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrssiterestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:43.398" endtime="20200107 09:49:45.747" critical="yes"></status>
</test>
<test id="s1-s1-s5-t3" name="Validate AWS XRS Get Site REST Web Services Returns 200 OK">
<kw name="Get Sites By Site Id" library="Site">
<doc>Get organizations by Site ID.</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_SITE.SiteID}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:45.753" level="TRACE">Arguments: [ ${site_id}='TestSite' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Site}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_SITE}/${site_id}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:45.754" level="TRACE">Arguments: [ 'SiteWebService.svc/sites/TestSite' ]</msg>
<msg timestamp="20200107 09:49:45.754" level="TRACE">Return: 'SiteWebService.svc/sites/TestSite'</msg>
<msg timestamp="20200107 09:49:45.754" level="INFO">${uri} = SiteWebService.svc/sites/TestSite</msg>
<status status="PASS" starttime="20200107 09:49:45.753" endtime="20200107 09:49:45.754"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:45.754" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'SiteWebService.svc/sites/TestSite' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:45.755" level="INFO">GET Request using : uri=SiteWebService.svc/sites/TestSite, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:46.473" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /SiteWebService.svc/sites/TestSite HTTP/1.1" 200 727</msg>
<msg timestamp="20200107 09:49:46.473" level="DEBUG">GET Response : status=200, reason=OK
{"Address":"","ArrivalGeoCodeType":"Circle","ArrivalPolygonPoints":"","ArrivalRadius":500,"City":"Minnetonka","Country":"USA","CreateDate":"\/Date(1578412156069)\/","DeliveryWindows":[],"DepartureGeoCodeType":"Circle","DeparturePolygonPoints":"","DepartureRadius":500,"DepartureSameAsArrival":true,"Latitude":0,"Longitude":0,"Measure":"Feet","ModifiedBy":"admin","ModifiedDate":"\/Date(1578412156069)\/","Name":"Test Site","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PostalCode":"","ResourceGroupIDs":"","SiteID":"TestSite","SiteType":"Commerce","StateName":"Minnesota","TimeZone":"Central","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""}</msg>
<msg timestamp="20200107 09:49:46.473" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:46.474" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:45.754" endtime="20200107 09:49:46.474"></status>
</kw>
<msg timestamp="20200107 09:49:46.474" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:46.474" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:45.752" endtime="20200107 09:49:46.474"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:46.475" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:46.475" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:46.475" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:46.474" endtime="20200107 09:49:46.475"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20200107 09:49:46.476" level="TRACE">Arguments: [ b'{"Address":"","ArrivalGeoCodeType":"Circle","ArrivalPolygonPoints":"","ArrivalRadius":500,"City":"Minnetonka","Country":"USA","CreateDate":"\\/Date(1578412156069)\\/","DeliveryWindows":[],"DepartureGeoCodeType":"Circle","DeparturePolygonPoints":"","DepartureRadius":500,"DepartureSameAsArrival":true,"Latitude":0,"Longitude":0,"Measure":"Feet","ModifiedBy":"admin","ModifiedDate":"\\/Date(1578412156069)\\/","Name":"Test Site","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PostalCode":"","ResourceGroupIDs":"","SiteID":"TestSite","SiteType":"Commerce","StateName":"Minnesota","TimeZone":"Central","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""}' ]</msg>
<msg timestamp="20200107 09:49:46.476" level="INFO">To JSON using : content={"Address":"","ArrivalGeoCodeType":"Circle","ArrivalPolygonPoints":"","ArrivalRadius":500,"City":"Minnetonka","Country":"USA","CreateDate":"\/Date(1578412156069)\/","DeliveryWindows":[],"DepartureGeoCodeType":"Circle","DeparturePolygonPoints":"","DepartureRadius":500,"DepartureSameAsArrival":true,"Latitude":0,"Longitude":0,"Measure":"Feet","ModifiedBy":"admin","ModifiedDate":"\/Date(1578412156069)\/","Name":"Test Site","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PostalCode":"","ResourceGroupIDs":"","SiteID":"TestSite","SiteType":"Commerce","StateName":"Minnesota","TimeZone":"Central","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""} </msg>
<msg timestamp="20200107 09:49:46.476" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20200107 09:49:46.476" level="TRACE">Return: {'Address': '',
 'ArrivalGeoCodeType': 'Circle',
 'ArrivalPolygonPoints': '',
 'ArrivalRadius': 500,
 'City': 'Minnetonka',
 'Country': 'USA',
 'CreateDate': '/Date(1578412156069)/',
 'DeliveryWindows': [],
 'DepartureGeoCodeType': 'Circle',
 'DeparturePolygonPoints': '',
 'DepartureRadius': 500,
 'DepartureSameAsArrival': True,
 'Latitude': 0,
 'Longitude': 0,
 'Measure': 'Feet',
 'ModifiedBy': 'admin',
 'ModifiedDate': '/Date(1578412156069)/',
 'Name': 'Test Site',
 'OrganizationID': '46663',
 'OrganizationName': 'Gnome Shipping D3',
 'PostalCode': '',
 'ResourceGroupIDs': '',
 'SiteID': 'TestSite',
 'SiteType': 'Commerce',
 'StateName': 'Minnesota',
 'TimeZone': 'Central',
 'UserDefinedField1': '',
 'UserDefinedField2': '',
 'UserDefinedField3': '',
 'UserDefinedField4': '',
 'UserDefinedField5': ''}</msg>
<msg timestamp="20200107 09:49:46.476" level="INFO">${json_response} = {'Address': '', 'ArrivalGeoCodeType': 'Circle', 'ArrivalPolygonPoints': '', 'ArrivalRadius': 500, 'City': 'Minnetonka', 'Country': 'USA', 'CreateDate': '/Date(1578412156069)/', 'DeliveryWindows': [], ...</msg>
<status status="PASS" starttime="20200107 09:49:46.476" endtime="20200107 09:49:46.476"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${json_response}[SiteID]</arg>
</arguments>
<assign>
<var>${XRS_WEB_SERVICES_TEST_SITE_SID}</var>
</assign>
<msg timestamp="20200107 09:49:46.477" level="TRACE">Arguments: [ 'TestSite' ]</msg>
<msg timestamp="20200107 09:49:46.477" level="TRACE">Return: 'TestSite'</msg>
<msg timestamp="20200107 09:49:46.477" level="INFO">${XRS_WEB_SERVICES_TEST_SITE_SID} = TestSite</msg>
<status status="PASS" starttime="20200107 09:49:46.477" endtime="20200107 09:49:46.477"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_SITE_SID}</arg>
</arguments>
<msg timestamp="20200107 09:49:46.478" level="TRACE">Arguments: [ '${XRS_WEB_SERVICES_TEST_SITE_SID}' ]</msg>
<msg timestamp="20200107 09:49:46.478" level="INFO">${XRS_WEB_SERVICES_TEST_SITE_SID} = TestSite</msg>
<msg timestamp="20200107 09:49:46.478" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:46.477" endtime="20200107 09:49:46.478"></status>
</kw>
<doc>Verifies that a posted Site now exists</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrssiterestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:45.751" endtime="20200107 09:49:46.478" critical="yes"></status>
</test>
<test id="s1-s1-s5-t4" name="Validate AWS XRS Put Site REST Web Services Modifies Site Successfully">
<kw name="Put Sites" library="Site">
<doc>Calls the Put Method on Sites.
Accepts a list of json objects
See Json field definitions in the "Post Sites" Keyword</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_PUT_TEST_SITE_LIST}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:46.481" level="TRACE">Arguments: [ @{list_data}=[{'ArrivalRadius': 500.0,
  'City': 'Minnetonka',
  'Country': 'USA',
  'DepartureRadius': 500.0,
  'Name': 'Test SiteModified',
  'OrganizationID': 46663,
  'SiteID': 'TestSite',
  'StateName': 'Minnesota',
  'TimeZone': 'Central'}] ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Site}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_SITE}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:46.482" level="TRACE">Arguments: [ 'SiteWebService.svc/sites' ]</msg>
<msg timestamp="20200107 09:49:46.482" level="TRACE">Return: 'SiteWebService.svc/sites'</msg>
<msg timestamp="20200107 09:49:46.483" level="INFO">${uri} = SiteWebService.svc/sites</msg>
<status status="PASS" starttime="20200107 09:49:46.482" endtime="20200107 09:49:46.483"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary">
<doc>Send a PUT request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>json=${list_data}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:46.483" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'SiteWebService.svc/sites' | json=[{'ArrivalRadius': 500.0,
  'City': 'Minnetonka',
  'Country': 'USA',
  'DepartureRadius': 500.0,
  'Name': 'Test SiteModified',
  'OrganizationID': 46663,
  'SiteID': 'TestSite',
  'StateName': 'Minnesota',
  'TimeZone': 'Central'}] | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:46.484" level="INFO">PUT Request using : uri=SiteWebService.svc/sites, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=[{'ArrivalRadius': 500.0, 'City': 'Minnetonka', 'Country': 'USA', 'DepartureRadius': 500.0, 'Name': 'Test SiteModified', 'OrganizationID': 46663, 'SiteID': 'TestSite', 'StateName': 'Minnesota', 'TimeZone': 'Central'}]</msg>
<msg timestamp="20200107 09:49:47.583" level="DEBUG">https://d3ws.xataxrs.com:443 "PUT /SiteWebService.svc/sites HTTP/1.1" 200 183</msg>
<msg timestamp="20200107 09:49:47.585" level="DEBUG">PUT Response : status=200, reason=OK
[{"Caption":"Edited.","Code":"200","Description":"Geographic Site edited successfully.","Id":"TestSite","ObjectName":"Test SiteModified","SID":21344,"Title":"GeographicSite Edited."}]</msg>
<msg timestamp="20200107 09:49:47.585" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:47.586" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:46.483" endtime="20200107 09:49:47.586"></status>
</kw>
<msg timestamp="20200107 09:49:47.587" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:47.587" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:46.481" endtime="20200107 09:49:47.587"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20200107 09:49:47.590" level="TRACE">Arguments: [ b'[{"Caption":"Edited.","Code":"200","Description":"Geographic Site edited successfully.","Id":"TestSite","ObjectName":"Test SiteModified","SID":21344,"Title":"GeographicSite Edited."}]' ]</msg>
<msg timestamp="20200107 09:49:47.590" level="INFO">To JSON using : content=[{"Caption":"Edited.","Code":"200","Description":"Geographic Site edited successfully.","Id":"TestSite","ObjectName":"Test SiteModified","SID":21344,"Title":"GeographicSite Edited."}] </msg>
<msg timestamp="20200107 09:49:47.590" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20200107 09:49:47.590" level="TRACE">Return: [{'Caption': 'Edited.',
  'Code': '200',
  'Description': 'Geographic Site edited successfully.',
  'Id': 'TestSite',
  'ObjectName': 'Test SiteModified',
  'SID': 21344,
  'Title': 'GeographicSite Edited.'}]</msg>
<msg timestamp="20200107 09:49:47.591" level="INFO">${json_response} = [{'Caption': 'Edited.', 'Code': '200', 'Description': 'Geographic Site edited successfully.', 'Id': 'TestSite', 'ObjectName': 'Test SiteModified', 'SID': 21344, 'Title': 'GeographicSite Edited.'}]</msg>
<status status="PASS" starttime="20200107 09:49:47.589" endtime="20200107 09:49:47.591"></status>
</kw>
<kw name="${r} IN [ @{json_response} ]" type="for">
<kw name="${r} = {'Caption': 'Edited.', 'Code': '200', 'Description': 'Geographic Site edited successfully.', 'Id': 'TestSite', 'ObjectName': 'Test SiteModified', 'SID': 21344, 'Title': 'GeographicSite Edited.'}" type="foritem">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${r}[Description]</arg>
<arg>Geographic Site edited successfully.</arg>
</arguments>
<msg timestamp="20200107 09:49:47.594" level="TRACE">Arguments: [ 'Geographic Site edited successfully.' | 'Geographic Site edited successfully.' ]</msg>
<msg timestamp="20200107 09:49:47.595" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:47.595" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:47.593" endtime="20200107 09:49:47.595"></status>
</kw>
<status status="PASS" starttime="20200107 09:49:47.593" endtime="20200107 09:49:47.595"></status>
</kw>
<status status="PASS" starttime="20200107 09:49:47.592" endtime="20200107 09:49:47.595"></status>
</kw>
<doc>Posts a Site and expects a Code value of 201</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrssiterestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:46.480" endtime="20200107 09:49:47.596" critical="yes"></status>
</test>
<test id="s1-s1-s5-t5" name="Validate AWS XRS Get Sites REST Web Services Returns 200 OK">
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:49:47.603" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:49:47.603" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:49:47.603" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:49:47.604" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:49:47.604" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:49:47.602" endtime="20200107 09:49:47.604"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:49:47.606" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:49:47.607" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20200107 09:49:47.608" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:49:47.606" endtime="20200107 09:49:47.608"></status>
</kw>
<kw name="Verify Get Sites With Forward Slash Returns 200 OK">
<doc>Verify that using a '/' in the URI returns 200 OK</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<msg timestamp="20200107 09:49:47.609" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/</arg>
</arguments>
<assign>
<var>${ending_character}</var>
</assign>
<msg timestamp="20200107 09:49:47.609" level="TRACE">Arguments: [ '/' ]</msg>
<msg timestamp="20200107 09:49:47.609" level="TRACE">Return: '/'</msg>
<msg timestamp="20200107 09:49:47.610" level="INFO">${ending_character} = /</msg>
<status status="PASS" starttime="20200107 09:49:47.609" endtime="20200107 09:49:47.610"></status>
</kw>
<kw name="Get Sites With URI Ending With ${ending_character} And Parameters &amp;{params}" library="Site">
<doc>This Keyword modifies character between the base uri and the parameters
This will get Sites that match the provided parameters.
Params can be named individually or within a Dictionary
See the Get Sites Keyword for param definitions.</doc>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:47.611" level="TRACE">Arguments: [ ${ending_character}='/' | ${params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Site}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_SITE}${ending_character}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:47.612" level="TRACE">Arguments: [ 'SiteWebService.svc/sites/' ]</msg>
<msg timestamp="20200107 09:49:47.612" level="TRACE">Return: 'SiteWebService.svc/sites/'</msg>
<msg timestamp="20200107 09:49:47.612" level="INFO">${uri} = SiteWebService.svc/sites/</msg>
<status status="PASS" starttime="20200107 09:49:47.611" endtime="20200107 09:49:47.613"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:47.613" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'SiteWebService.svc/sites/' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} | params={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<msg timestamp="20200107 09:49:47.614" level="INFO">GET Request using : uri=SiteWebService.svc/sites/, params={'OrganizationID': 46663, 'IsActive': 'True', 'AsOfDateTime': '01/07/2020'}, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:48.246" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /SiteWebService.svc/sites/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01%2F07%2F2020 HTTP/1.1" 200 733</msg>
<msg timestamp="20200107 09:49:48.247" level="DEBUG">GET Response : status=200, reason=OK
[{"Address":"","ArrivalGeoCodeType":"Circle","ArrivalPolygonPoints":"","ArrivalRadius":500,"City":"Minnetonka","Country":"USA","CreateDate":"\/Date(1578412156069)\/","DeliveryWindows":[],"DepartureGeoCodeType":"Circle","DeparturePolygonPoints":"","DepartureRadius":500,"DepartureSameAsArrival":false,"Latitude":0,"Longitude":0,"Measure":"Feet","ModifiedBy":"","ModifiedDate":"\/Date(1578412159124)\/","Name":"Test SiteModified","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PostalCode":"","ResourceGroupIDs":"","SiteID":"TestSite","SiteType":"Commerce","StateName":"Minnesota","TimeZone":"Central","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""}]</msg>
<msg timestamp="20200107 09:49:48.247" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:48.247" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:47.613" endtime="20200107 09:49:48.247"></status>
</kw>
<msg timestamp="20200107 09:49:48.247" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:48.248" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:47.610" endtime="20200107 09:49:48.248"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:48.248" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:48.248" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:48.248" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:48.248" endtime="20200107 09:49:48.248"></status>
</kw>
<msg timestamp="20200107 09:49:48.249" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:47.608" endtime="20200107 09:49:48.249"></status>
</kw>
<kw name="Verify Get Sites Without Forward Slash Returns 200 OK">
<doc>Verify that not using a '/' in the URI returns 200 OK</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<msg timestamp="20200107 09:49:48.250" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Get Sites" library="Site">
<doc>Call the Get Method on Sites.
This will get Sites that match the provided parameters.
Params can be named individually or within a Dictionary
Param Definitions:
AsOfDateTime
Tells the service to return only the data that changed since the specified date and time.
System Limit: 30 days
Limit
Used in conjunction with the Offset parameter to implement paging.
Limits the number of results to a specified number.
System Limit: 10,000
Offset
Used in conjunction with the Limit parameter to implement paging.
Represents a page number for the starting point of the return set.
OrganizationID
Limits results to sites in one or more organizations.
[No Filter] - Limits results to all sites within organizations that are associated with the Web Service User ID.
[OrganizationID] - Limits results to sites that belong to the specified Organization.
Recurse
True - Limits results to all site objects in the hierarchy of organizations within the specified OrganizationID.
False - Limits results to all site objects within specified OrganizationID.
ResourceGroupID
Limits results to sites in one or more resource groups.
[No Filter] - Limits results to all sites within resource groups that are associated with the Web Service User ID.
[ResourceGroupID] - Limits results to the specified Resource Group ID.
SiteID
Limits results to site object with SiteID equal to that specified.</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:48.251" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Site}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_SITE}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:48.251" level="TRACE">Arguments: [ 'SiteWebService.svc/sites' ]</msg>
<msg timestamp="20200107 09:49:48.251" level="TRACE">Return: 'SiteWebService.svc/sites'</msg>
<msg timestamp="20200107 09:49:48.251" level="INFO">${uri} = SiteWebService.svc/sites</msg>
<status status="PASS" starttime="20200107 09:49:48.251" endtime="20200107 09:49:48.252"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:48.252" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'SiteWebService.svc/sites' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} | params={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<msg timestamp="20200107 09:49:48.252" level="INFO">GET Request using : uri=SiteWebService.svc/sites, params={'OrganizationID': 46663, 'IsActive': 'True', 'AsOfDateTime': '01/07/2020'}, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:49.868" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /SiteWebService.svc/sites?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01%2F07%2F2020 HTTP/1.1" 200 733</msg>
<msg timestamp="20200107 09:49:49.869" level="DEBUG">GET Response : status=200, reason=OK
[{"Address":"","ArrivalGeoCodeType":"Circle","ArrivalPolygonPoints":"","ArrivalRadius":500,"City":"Minnetonka","Country":"USA","CreateDate":"\/Date(1578412156069)\/","DeliveryWindows":[],"DepartureGeoCodeType":"Circle","DeparturePolygonPoints":"","DepartureRadius":500,"DepartureSameAsArrival":false,"Latitude":0,"Longitude":0,"Measure":"Feet","ModifiedBy":"","ModifiedDate":"\/Date(1578412159124)\/","Name":"Test SiteModified","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PostalCode":"","ResourceGroupIDs":"","SiteID":"TestSite","SiteType":"Commerce","StateName":"Minnesota","TimeZone":"Central","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""}]</msg>
<msg timestamp="20200107 09:49:49.869" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:49.870" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:48.252" endtime="20200107 09:49:49.870"></status>
</kw>
<msg timestamp="20200107 09:49:49.870" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:49.870" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:48.250" endtime="20200107 09:49:49.870"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:49.871" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:49.871" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:49.871" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:49.871" endtime="20200107 09:49:49.871"></status>
</kw>
<msg timestamp="20200107 09:49:49.872" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:48.249" endtime="20200107 09:49:49.872"></status>
</kw>
<doc>Get Sites with basic parameters</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrssiterestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:47.600" endtime="20200107 09:49:49.873" critical="yes"></status>
</test>
<test id="s1-s1-s5-t6" name="Validate AWS XRS Get Sites REST Web Services Returns 200 OK With Raw String URI">
<kw name="Verify Get Sites Raw String URI With /? Returns 200 OK">
<doc>Verify that using the given character string in the raw URI string returns 200 OK</doc>
<msg timestamp="20200107 09:49:49.878" level="TRACE">Arguments: [ ${character_string}='/?' ]</msg>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:49:49.879" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:49:49.879" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:49:49.879" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:49:49.880" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:49:49.880" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:49:49.879" endtime="20200107 09:49:49.880"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:49:49.880" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:49:49.881" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20200107 09:49:49.881" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:49:49.880" endtime="20200107 09:49:49.881"></status>
</kw>
<kw name="Create URI String With" library="URIStringBuilderTool">
<doc>Helper Keyword to construct the request uri with different character strings
base_uri = webservice uri
request_type = request extension for the webservice
character_string = final character of the uri. i.e. /, /?, etc ...</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Site}</arg>
<arg>${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_SITE}</arg>
<arg>${character_string}</arg>
</arguments>
<assign>
<var>${uri_string}</var>
</assign>
<msg timestamp="20200107 09:49:49.882" level="TRACE">Arguments: [ ${base_uri}='SiteWebService.svc' | ${request_type}='/sites' | ${character_string}='/?' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${base_uri}${request_type}${character_string}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:49.883" level="TRACE">Arguments: [ 'SiteWebService.svc/sites/?' ]</msg>
<msg timestamp="20200107 09:49:49.883" level="TRACE">Return: 'SiteWebService.svc/sites/?'</msg>
<msg timestamp="20200107 09:49:49.883" level="INFO">${uri} = SiteWebService.svc/sites/?</msg>
<status status="PASS" starttime="20200107 09:49:49.882" endtime="20200107 09:49:49.883"></status>
</kw>
<msg timestamp="20200107 09:49:49.883" level="TRACE">Return: 'SiteWebService.svc/sites/?'</msg>
<msg timestamp="20200107 09:49:49.883" level="INFO">${uri_string} = SiteWebService.svc/sites/?</msg>
<status status="PASS" starttime="20200107 09:49:49.882" endtime="20200107 09:49:49.883"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${uri_string}OrganizationID=${params.OrganizationID}&amp;IsActive=${params.IsActive}&amp;AsOfDateTime=${params.AsOfDateTime}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:49.885" level="TRACE">Arguments: [ 'SiteWebService.svc/sites/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' ]</msg>
<msg timestamp="20200107 09:49:49.885" level="TRACE">Return: 'SiteWebService.svc/sites/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020'</msg>
<msg timestamp="20200107 09:49:49.885" level="INFO">${uri} = SiteWebService.svc/sites/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020</msg>
<status status="PASS" starttime="20200107 09:49:49.884" endtime="20200107 09:49:49.885"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:49.886" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'SiteWebService.svc/sites/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:49.886" level="INFO">GET Request using : uri=SiteWebService.svc/sites/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:50.397" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /SiteWebService.svc/sites/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020 HTTP/1.1" 200 733</msg>
<msg timestamp="20200107 09:49:50.400" level="DEBUG">GET Response : status=200, reason=OK
[{"Address":"","ArrivalGeoCodeType":"Circle","ArrivalPolygonPoints":"","ArrivalRadius":500,"City":"Minnetonka","Country":"USA","CreateDate":"\/Date(1578412156069)\/","DeliveryWindows":[],"DepartureGeoCodeType":"Circle","DeparturePolygonPoints":"","DepartureRadius":500,"DepartureSameAsArrival":false,"Latitude":0,"Longitude":0,"Measure":"Feet","ModifiedBy":"","ModifiedDate":"\/Date(1578412159124)\/","Name":"Test SiteModified","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PostalCode":"","ResourceGroupIDs":"","SiteID":"TestSite","SiteType":"Commerce","StateName":"Minnesota","TimeZone":"Central","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""}]</msg>
<msg timestamp="20200107 09:49:50.400" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:50.401" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:49.885" endtime="20200107 09:49:50.401"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:50.403" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:50.403" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:50.404" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:50.402" endtime="20200107 09:49:50.404"></status>
</kw>
<msg timestamp="20200107 09:49:50.404" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:49.878" endtime="20200107 09:49:50.405"></status>
</kw>
<kw name="Verify Get Sites Raw String URI With ? Returns 200 OK">
<doc>Verify that using the given character string in the raw URI string returns 200 OK</doc>
<msg timestamp="20200107 09:49:50.408" level="TRACE">Arguments: [ ${character_string}='?' ]</msg>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:49:50.409" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:49:50.410" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:49:50.411" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:49:50.411" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:49:50.411" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:49:50.409" endtime="20200107 09:49:50.411"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:49:50.412" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:49:50.413" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20200107 09:49:50.414" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:49:50.412" endtime="20200107 09:49:50.414"></status>
</kw>
<kw name="Create URI String With" library="URIStringBuilderTool">
<doc>Helper Keyword to construct the request uri with different character strings
base_uri = webservice uri
request_type = request extension for the webservice
character_string = final character of the uri. i.e. /, /?, etc ...</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Site}</arg>
<arg>${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_SITE}</arg>
<arg>${character_string}</arg>
</arguments>
<assign>
<var>${uri_string}</var>
</assign>
<msg timestamp="20200107 09:49:50.416" level="TRACE">Arguments: [ ${base_uri}='SiteWebService.svc' | ${request_type}='/sites' | ${character_string}='?' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${base_uri}${request_type}${character_string}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:50.417" level="TRACE">Arguments: [ 'SiteWebService.svc/sites?' ]</msg>
<msg timestamp="20200107 09:49:50.418" level="TRACE">Return: 'SiteWebService.svc/sites?'</msg>
<msg timestamp="20200107 09:49:50.418" level="INFO">${uri} = SiteWebService.svc/sites?</msg>
<status status="PASS" starttime="20200107 09:49:50.417" endtime="20200107 09:49:50.418"></status>
</kw>
<msg timestamp="20200107 09:49:50.418" level="TRACE">Return: 'SiteWebService.svc/sites?'</msg>
<msg timestamp="20200107 09:49:50.418" level="INFO">${uri_string} = SiteWebService.svc/sites?</msg>
<status status="PASS" starttime="20200107 09:49:50.415" endtime="20200107 09:49:50.418"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${uri_string}OrganizationID=${params.OrganizationID}&amp;IsActive=${params.IsActive}&amp;AsOfDateTime=${params.AsOfDateTime}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:50.420" level="TRACE">Arguments: [ 'SiteWebService.svc/sites?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' ]</msg>
<msg timestamp="20200107 09:49:50.420" level="TRACE">Return: 'SiteWebService.svc/sites?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020'</msg>
<msg timestamp="20200107 09:49:50.420" level="INFO">${uri} = SiteWebService.svc/sites?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020</msg>
<status status="PASS" starttime="20200107 09:49:50.418" endtime="20200107 09:49:50.420"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:50.421" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'SiteWebService.svc/sites?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:50.422" level="INFO">GET Request using : uri=SiteWebService.svc/sites?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:50.953" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /SiteWebService.svc/sites?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020 HTTP/1.1" 200 733</msg>
<msg timestamp="20200107 09:49:50.955" level="DEBUG">GET Response : status=200, reason=OK
[{"Address":"","ArrivalGeoCodeType":"Circle","ArrivalPolygonPoints":"","ArrivalRadius":500,"City":"Minnetonka","Country":"USA","CreateDate":"\/Date(1578412156069)\/","DeliveryWindows":[],"DepartureGeoCodeType":"Circle","DeparturePolygonPoints":"","DepartureRadius":500,"DepartureSameAsArrival":false,"Latitude":0,"Longitude":0,"Measure":"Feet","ModifiedBy":"","ModifiedDate":"\/Date(1578412159124)\/","Name":"Test SiteModified","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PostalCode":"","ResourceGroupIDs":"","SiteID":"TestSite","SiteType":"Commerce","StateName":"Minnesota","TimeZone":"Central","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""}]</msg>
<msg timestamp="20200107 09:49:50.956" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:50.956" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:50.421" endtime="20200107 09:49:50.957"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:50.958" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:50.958" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:50.958" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:50.957" endtime="20200107 09:49:50.959"></status>
</kw>
<msg timestamp="20200107 09:49:50.959" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:50.407" endtime="20200107 09:49:50.959"></status>
</kw>
<doc>Get Sites with basic parameters using a raw URI string</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrssiterestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:49.876" endtime="20200107 09:49:50.960" critical="yes"></status>
</test>
<test id="s1-s1-s5-t7" name="Validate AWS XRS Delete Site REST Web Services Returns 200 OK">
<kw name="Delete Sites By Site Id" library="Site">
<doc>Delete Site by Site ID.</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_SITE.SiteID}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:50.966" level="TRACE">Arguments: [ ${site_id}='TestSite' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Site}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_SITE}/${site_id}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:50.966" level="TRACE">Arguments: [ 'SiteWebService.svc/sites/TestSite' ]</msg>
<msg timestamp="20200107 09:49:50.967" level="TRACE">Return: 'SiteWebService.svc/sites/TestSite'</msg>
<msg timestamp="20200107 09:49:50.967" level="INFO">${uri} = SiteWebService.svc/sites/TestSite</msg>
<status status="PASS" starttime="20200107 09:49:50.966" endtime="20200107 09:49:50.967"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:50.967" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'SiteWebService.svc/sites/TestSite' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:50.968" level="INFO">DELETE Request using : uri=SiteWebService.svc/sites/TestSite, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:51.531" level="DEBUG">https://d3ws.xataxrs.com:443 "DELETE /SiteWebService.svc/sites/TestSite HTTP/1.1" 200 175</msg>
<msg timestamp="20200107 09:49:51.533" level="DEBUG">DELETE Response : status=200, reason=OK
{"Caption":"Deleted.","Code":"200","Description":"Geographic Site edited successfully.","Id":"TestSite","ObjectName":"GeographicSite","SID":0,"Title":"GeographicSiteDeleted."}</msg>
<msg timestamp="20200107 09:49:51.534" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:51.534" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:50.967" endtime="20200107 09:49:51.534"></status>
</kw>
<msg timestamp="20200107 09:49:51.535" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:51.536" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:50.965" endtime="20200107 09:49:51.536"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:51.540" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:51.540" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:51.541" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:51.538" endtime="20200107 09:49:51.541"></status>
</kw>
<doc>Verifies that created Site is deleted</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrssiterestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:50.964" endtime="20200107 09:49:51.543" critical="yes"></status>
</test>
<test id="s1-s1-s5-t8" name="Validate AWS XRS Get Sites REST Web Services For All Sites Returns 200 OK">
<kw name="Get All Sites" library="Site">
<doc>Get attributes for all sites.</doc>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:51.555" level="TRACE">Arguments: [  ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Site}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_SITE}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:51.556" level="TRACE">Arguments: [ 'SiteWebService.svc/sites' ]</msg>
<msg timestamp="20200107 09:49:51.557" level="TRACE">Return: 'SiteWebService.svc/sites'</msg>
<msg timestamp="20200107 09:49:51.557" level="INFO">${uri} = SiteWebService.svc/sites</msg>
<status status="PASS" starttime="20200107 09:49:51.556" endtime="20200107 09:49:51.557"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:51.558" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'SiteWebService.svc/sites' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:51.559" level="INFO">GET Request using : uri=SiteWebService.svc/sites, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:52.153" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /SiteWebService.svc/sites HTTP/1.1" 200 2274</msg>
<msg timestamp="20200107 09:49:52.155" level="DEBUG">GET Response : status=200, reason=OK
[{"Address":"8 8th Ave N","ArrivalGeoCodeType":"Circle","ArrivalPolygonPoints":"","ArrivalRadius":500,"City":"Hopkins","Country":"USA","CreateDate":"\/Date(1549387274381)\/","DeliveryWindows":[],"DepartureGeoCodeType":"Circle","DeparturePolygonPoints":"","DepartureRadius":500,"DepartureSameAsArrival":true,"Latitude":44.92466,"Longitude":-93.41031,"Measure":"Feet","ModifiedBy":"","ModifiedDate":"\/Date(1549387274381)\/","Name":"LTD Brewing","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PostalCode":"55343","ResourceGroupIDs":"","SiteID":"LTD","SiteType":"Commerce","StateName":"Minnesota","TimeZone":"Central","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""},{"Address":"14625 Excelsior Blvd","ArrivalGeoCodeType":"Circle","ArrivalPolygonPoints":"","ArrivalRadius":500,"City":"Minnetonka","Country":"USA","CreateDate":"\/Date(1549387220792)\/","DeliveryWindows":[],"DepartureGeoCodeType":"Circle","DeparturePolygonPoints":"","DepartureRadius":500,"DepartureSameAsArrival":true,"Latitude":44.90355,"Longitude":-93.46639,"Measure":"Feet","ModifiedBy":"","ModifiedDate":"\/Date(1549387220792)\/","Name":"Unmapped","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PostalCode":"55345","ResourceGroupIDs":"","SiteID":"Unmapped","SiteType":"Commerce","StateName":"Minnesota","TimeZone":"Central","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""},{"Address":"9 W Wisconsin St","ArrivalGeoCodeType":"Circle","ArrivalPolygonPoints":"","ArrivalRadius":500,"City":"Grand Marais","Country":"USA","CreateDate":"\/Date(1537904719607)\/","DeliveryWindows":[],"DepartureGeoCodeType":"Circle","DeparturePolygonPoints":"","DepartureRadius":500,"DepartureSameAsArrival":true,"Latitude":47.74933,"Longitude":-90.33337,"Measure":"Feet","ModifiedBy":"","ModifiedDate":"\/Date(1537904741149)\/","Name":"Sven &amp; Ole's","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PostalCode":"55604","ResourceGroupIDs":"","SiteID":"SvenOle","SiteType":"Commerce","StateName":"Minnesota","TimeZone":"Central","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":""}]</msg>
<msg timestamp="20200107 09:49:52.156" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:52.156" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:51.557" endtime="20200107 09:49:52.156"></status>
</kw>
<msg timestamp="20200107 09:49:52.157" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:52.157" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:51.555" endtime="20200107 09:49:52.158"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:52.161" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:52.162" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:52.162" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:52.160" endtime="20200107 09:49:52.163"></status>
</kw>
<doc>Gets all the Sites</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrssiterestwebservicevalidation</tag>
<tag>xrsawsperftest</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:51.553" endtime="20200107 09:49:52.165" critical="yes"></status>
</test>
<test id="s1-s1-s5-t9" name="Validate AWS XRS Delete Sites REST Web Services Returns Code 401">
<kw name="Delete Sites By Site Id" library="Site">
<doc>Delete Site by Site ID.</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_SITE_SID}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:52.173" level="TRACE">Arguments: [ ${site_id}='TestSite' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Site}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_SITE}/${site_id}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:52.174" level="TRACE">Arguments: [ 'SiteWebService.svc/sites/TestSite' ]</msg>
<msg timestamp="20200107 09:49:52.174" level="TRACE">Return: 'SiteWebService.svc/sites/TestSite'</msg>
<msg timestamp="20200107 09:49:52.174" level="INFO">${uri} = SiteWebService.svc/sites/TestSite</msg>
<status status="PASS" starttime="20200107 09:49:52.173" endtime="20200107 09:49:52.174"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:52.175" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'SiteWebService.svc/sites/TestSite' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:52.175" level="INFO">DELETE Request using : uri=SiteWebService.svc/sites/TestSite, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:52.583" level="DEBUG">https://d3ws.xataxrs.com:443 "DELETE /SiteWebService.svc/sites/TestSite HTTP/1.1" 200 199</msg>
<msg timestamp="20200107 09:49:52.584" level="DEBUG">DELETE Response : status=200, reason=OK
{"Caption":"Error","Code":"401","Description":"You are not authorized.  Please contact your system administrator.","Id":"TestSite","ObjectName":"Unauthorized User","SID":0,"Title":"UnauthorizedUser"}</msg>
<msg timestamp="20200107 09:49:52.584" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:52.584" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:52.174" endtime="20200107 09:49:52.584"></status>
</kw>
<msg timestamp="20200107 09:49:52.585" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:52.585" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:52.171" endtime="20200107 09:49:52.585"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>Site ${XRS_WEB_SERVICES_TEST_SITE_SID} doesn't exist.</arg>
</arguments>
<assign>
<var>${expected_error_message}</var>
</assign>
<msg timestamp="20200107 09:49:52.587" level="TRACE">Arguments: [ "Site TestSite doesn't exist." ]</msg>
<msg timestamp="20200107 09:49:52.587" level="TRACE">Return: "Site TestSite doesn't exist."</msg>
<msg timestamp="20200107 09:49:52.587" level="INFO">${expected_error_message} = Site TestSite doesn't exist.</msg>
<status status="PASS" starttime="20200107 09:49:52.586" endtime="20200107 09:49:52.587"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20200107 09:49:52.588" level="TRACE">Arguments: [ b'{"Caption":"Error","Code":"401","Description":"You are not authorized.  Please contact your system administrator.","Id":"TestSite","ObjectName":"Unauthorized User","SID":0,"Title":"UnauthorizedUser"}' ]</msg>
<msg timestamp="20200107 09:49:52.588" level="INFO">To JSON using : content={"Caption":"Error","Code":"401","Description":"You are not authorized.  Please contact your system administrator.","Id":"TestSite","ObjectName":"Unauthorized User","SID":0,"Title":"UnauthorizedUser"} </msg>
<msg timestamp="20200107 09:49:52.588" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20200107 09:49:52.588" level="TRACE">Return: {'Caption': 'Error',
 'Code': '401',
 'Description': 'You are not authorized.  Please contact your system administrator.',
 'Id': 'TestSite',
 'ObjectName': 'Unauthorized User',
 'SID': 0,
 'Title': 'UnauthorizedUser'}</msg>
<msg timestamp="20200107 09:49:52.589" level="INFO">${json_response} = {'Caption': 'Error', 'Code': '401', 'Description': 'You are not authorized.  Please contact your system administrator.', 'Id': 'TestSite', 'ObjectName': 'Unauthorized User', 'SID': 0, 'Title': 'Unauth...</msg>
<status status="PASS" starttime="20200107 09:49:52.588" endtime="20200107 09:49:52.589"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_response}[Code]</arg>
<arg>401</arg>
</arguments>
<msg timestamp="20200107 09:49:52.590" level="TRACE">Arguments: [ '401' | '401' ]</msg>
<msg timestamp="20200107 09:49:52.590" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:52.590" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:52.590" endtime="20200107 09:49:52.590"></status>
</kw>
<doc>Attempts to delete a previously deleted Site.</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrssiterestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:52.169" endtime="20200107 09:49:52.591" critical="yes"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary" type="teardown">
<doc>Removes all the session objects</doc>
<msg timestamp="20200107 09:49:52.596" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200107 09:49:52.597" level="INFO">Delete All Sessions</msg>
<msg timestamp="20200107 09:49:52.597" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:52.596" endtime="20200107 09:49:52.597"></status>
</kw>
<doc>Fundamental suite to test XRS AWS Site Entity Management Web Services</doc>
<status status="PASS" starttime="20200107 09:49:42.314" endtime="20200107 09:49:52.597"></status>
</suite>
<suite id="s1-s1-s6" name="ValidateAWSXRSTrailerWebService" source="C:\Users\kstine\git\aws-api-gateway-tests\Tests\AWS_XRS_WebServicesTests\06__ValidateAWSXRSTrailerWebService.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Create AWS XRS Web Services Session</arg>
<arg>AND</arg>
<arg>Test Data Setup For XRS AWS Trailer Web Service Test Suite</arg>
</arguments>
<msg timestamp="20200107 09:49:52.683" level="TRACE">Arguments: [ 'Create AWS XRS Web Services Session' | 'AND' | 'Test Data Setup For XRS AWS Trailer Web Service Test Suite' ]</msg>
<kw name="Create AWS XRS Web Services Session" library="XRSCommonWebService">
<doc>Create a session with aws xrs web services</doc>
<msg timestamp="20200107 09:49:52.683" level="TRACE">Arguments: [  ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${XRS_AWS_WEBSERVICES_URL}[${XRS_HOST_ENVIRONMENT}]</arg>
<arg>verify=True</arg>
<arg>auth=${XRS_WEBSERVICES_AUTHORIZATION}</arg>
</arguments>
<msg timestamp="20200107 09:49:52.684" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'https://d3ws.xataxrs.com' | verify=True | auth=['GnomeShippingD3|admin', 'xrs123'] ]</msg>
<msg timestamp="20200107 09:49:52.684" level="INFO">Creating Session using : alias=xrs_web_service_session, url=https://d3ws.xataxrs.com, headers={},                     cookies={}, auth=&lt;requests.auth.HTTPBasicAuth object at 0x0000018E38C72400&gt;, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<msg timestamp="20200107 09:49:52.684" level="DEBUG">Creating session: xrs_web_service_session</msg>
<msg timestamp="20200107 09:49:52.684" level="DEBUG">Argument types are:
&lt;class 'bool'&gt;</msg>
<msg timestamp="20200107 09:49:52.684" level="TRACE">Return: &lt;requests.sessions.Session object at 0x0000018E38C724F0&gt;</msg>
<status status="PASS" starttime="20200107 09:49:52.684" endtime="20200107 09:49:52.684"></status>
</kw>
<msg timestamp="20200107 09:49:52.684" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:52.683" endtime="20200107 09:49:52.684"></status>
</kw>
<kw name="Test Data Setup For XRS AWS Trailer Web Service Test Suite">
<doc>Keyword for setting up suite variables for AWS Trailer Web Service Tests.</doc>
<msg timestamp="20200107 09:49:52.685" level="TRACE">Arguments: [  ]</msg>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>StateName=${XRS_WEB_SERVICES_TEST_TRAILER.StateName}</arg>
<arg>Status=${XRS_WEB_SERVICES_TEST_TRAILER.Status}</arg>
<arg>TrailerIdentity=${XRS_WEB_SERVICES_TEST_TRAILER.TrailerIdentity}</arg>
</arguments>
<assign>
<var>&amp;{XRS_AWS_WEBSERVICE_POST_TEST_TRAILER_1_DICT}</var>
</assign>
<msg timestamp="20200107 09:49:52.685" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'StateName=${XRS_WEB_SERVICES_TEST_TRAILER.StateName}' | 'Status=${XRS_WEB_SERVICES_TEST_TRAILER.Status}' | 'TrailerIdentity=${XRS_WEB_SERVICES_TEST_TRAILER.TrailerIdentity}' ]</msg>
<msg timestamp="20200107 09:49:52.686" level="TRACE">Return: {'OrganizationID': 46663,
 'StateName': 'Minnesota',
 'Status': 'Active',
 'TrailerIdentity': 'WS_Test_Trailer'}</msg>
<msg timestamp="20200107 09:49:52.686" level="INFO">&amp;{XRS_AWS_WEBSERVICE_POST_TEST_TRAILER_1_DICT} = { OrganizationID=46663 | StateName=Minnesota | Status=Active | TrailerIdentity=WS_Test_Trailer }</msg>
<status status="PASS" starttime="20200107 09:49:52.685" endtime="20200107 09:49:52.686"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${XRS_AWS_WEBSERVICE_POST_TEST_TRAILER_1_DICT}</arg>
</arguments>
<assign>
<var>@{XRS_AWS_WEBSERVICE_POST_TEST_TRAILER_LIST}</var>
</assign>
<msg timestamp="20200107 09:49:52.686" level="TRACE">Arguments: [ {'OrganizationID': 46663,
 'StateName': 'Minnesota',
 'Status': 'Active',
 'TrailerIdentity': 'WS_Test_Trailer'} ]</msg>
<msg timestamp="20200107 09:49:52.686" level="TRACE">Return: [{'OrganizationID': 46663,
  'StateName': 'Minnesota',
  'Status': 'Active',
  'TrailerIdentity': 'WS_Test_Trailer'}]</msg>
<msg timestamp="20200107 09:49:52.686" level="INFO">@{XRS_AWS_WEBSERVICE_POST_TEST_TRAILER_LIST} = [ {'OrganizationID': 46663, 'StateName': 'Minnesota', 'Status': 'Active', 'TrailerIdentity': 'WS_Test_Trailer'} ]</msg>
<status status="PASS" starttime="20200107 09:49:52.686" endtime="20200107 09:49:52.686"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_POST_TEST_TRAILER_LIST}</arg>
</arguments>
<msg timestamp="20200107 09:49:52.687" level="TRACE">Arguments: [ '@{XRS_AWS_WEBSERVICE_POST_TEST_TRAILER_LIST}' ]</msg>
<msg timestamp="20200107 09:49:52.687" level="INFO">@{XRS_AWS_WEBSERVICE_POST_TEST_TRAILER_LIST} = [ {'OrganizationID': 46663, 'StateName': 'Minnesota', 'Status': 'Active', 'TrailerIdentity': 'WS_Test_Trailer'} ]</msg>
<msg timestamp="20200107 09:49:52.687" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:52.686" endtime="20200107 09:49:52.687"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>StateName=${XRS_WEB_SERVICES_TEST_TRAILER.StateName}</arg>
<arg>Status=${XRS_WEB_SERVICES_TEST_TRAILER.Status}</arg>
<arg>TrailerIdentity=${XRS_WEB_SERVICES_TEST_TRAILER.TrailerIdentity}</arg>
</arguments>
<assign>
<var>&amp;{XRS_AWS_WEBSERVICE_PUT_TEST_TRAILER_1_DICT}</var>
</assign>
<msg timestamp="20200107 09:49:52.687" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'StateName=${XRS_WEB_SERVICES_TEST_TRAILER.StateName}' | 'Status=${XRS_WEB_SERVICES_TEST_TRAILER.Status}' | 'TrailerIdentity=${XRS_WEB_SERVICES_TEST_TRAILER.TrailerIdentity}' ]</msg>
<msg timestamp="20200107 09:49:52.688" level="TRACE">Return: {'OrganizationID': 46663,
 'StateName': 'Minnesota',
 'Status': 'Active',
 'TrailerIdentity': 'WS_Test_Trailer'}</msg>
<msg timestamp="20200107 09:49:52.688" level="INFO">&amp;{XRS_AWS_WEBSERVICE_PUT_TEST_TRAILER_1_DICT} = { OrganizationID=46663 | StateName=Minnesota | Status=Active | TrailerIdentity=WS_Test_Trailer }</msg>
<status status="PASS" starttime="20200107 09:49:52.687" endtime="20200107 09:49:52.688"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${XRS_AWS_WEBSERVICE_PUT_TEST_TRAILER_1_DICT}</arg>
</arguments>
<assign>
<var>@{XRS_AWS_WEBSERVICE_PUT_TEST_TRAILER_LIST}</var>
</assign>
<msg timestamp="20200107 09:49:52.688" level="TRACE">Arguments: [ {'OrganizationID': 46663,
 'StateName': 'Minnesota',
 'Status': 'Active',
 'TrailerIdentity': 'WS_Test_Trailer'} ]</msg>
<msg timestamp="20200107 09:49:52.688" level="TRACE">Return: [{'OrganizationID': 46663,
  'StateName': 'Minnesota',
  'Status': 'Active',
  'TrailerIdentity': 'WS_Test_Trailer'}]</msg>
<msg timestamp="20200107 09:49:52.688" level="INFO">@{XRS_AWS_WEBSERVICE_PUT_TEST_TRAILER_LIST} = [ {'OrganizationID': 46663, 'StateName': 'Minnesota', 'Status': 'Active', 'TrailerIdentity': 'WS_Test_Trailer'} ]</msg>
<status status="PASS" starttime="20200107 09:49:52.688" endtime="20200107 09:49:52.688"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_PUT_TEST_TRAILER_LIST}</arg>
</arguments>
<msg timestamp="20200107 09:49:52.689" level="TRACE">Arguments: [ '@{XRS_AWS_WEBSERVICE_PUT_TEST_TRAILER_LIST}' ]</msg>
<msg timestamp="20200107 09:49:52.689" level="INFO">@{XRS_AWS_WEBSERVICE_PUT_TEST_TRAILER_LIST} = [ {'OrganizationID': 46663, 'StateName': 'Minnesota', 'Status': 'Active', 'TrailerIdentity': 'WS_Test_Trailer'} ]</msg>
<msg timestamp="20200107 09:49:52.689" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:52.688" endtime="20200107 09:49:52.689"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>StateName=${XRS_WEB_SERVICES_TEST_TRAILER_V2.StateName}</arg>
<arg>Status=${XRS_WEB_SERVICES_TEST_TRAILER_V2.Status}</arg>
<arg>TrailerIdentity=${XRS_WEB_SERVICES_TEST_TRAILER_V2.TrailerIdentity}</arg>
<arg>Country=${XRS_WEB_SERVICES_TEST_TRAILER_V2.Country}</arg>
</arguments>
<assign>
<var>&amp;{XRS_AWS_WEBSERVICE_POST_TEST_TRAILER_1_V2_DICT}</var>
</assign>
<msg timestamp="20200107 09:49:52.689" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'StateName=${XRS_WEB_SERVICES_TEST_TRAILER_V2.StateName}' | 'Status=${XRS_WEB_SERVICES_TEST_TRAILER_V2.Status}' | 'TrailerIdentity=${XRS_WEB_SERVICES_TEST_TRAILER_V2.TrailerIdentity}' | 'Country=${XRS_WEB_SERVICES_TEST_TRAILER_V2.Country}' ]</msg>
<msg timestamp="20200107 09:49:52.690" level="TRACE">Return: {'Country': 'USA',
 'OrganizationID': 46663,
 'StateName': 'Minnesota',
 'Status': 'Active',
 'TrailerIdentity': 'WS_Test_Trailer_V2'}</msg>
<msg timestamp="20200107 09:49:52.690" level="INFO">&amp;{XRS_AWS_WEBSERVICE_POST_TEST_TRAILER_1_V2_DICT} = { OrganizationID=46663 | StateName=Minnesota | Status=Active | TrailerIdentity=WS_Test_Trailer_V2 | Country=USA }</msg>
<status status="PASS" starttime="20200107 09:49:52.689" endtime="20200107 09:49:52.690"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${XRS_AWS_WEBSERVICE_POST_TEST_TRAILER_1_V2_DICT}</arg>
</arguments>
<assign>
<var>@{XRS_AWS_WEBSERVICE_POST_TEST_TRAILER_LIST_V2}</var>
</assign>
<msg timestamp="20200107 09:49:52.690" level="TRACE">Arguments: [ {'Country': 'USA',
 'OrganizationID': 46663,
 'StateName': 'Minnesota',
 'Status': 'Active',
 'TrailerIdentity': 'WS_Test_Trailer_V2'} ]</msg>
<msg timestamp="20200107 09:49:52.690" level="TRACE">Return: [{'Country': 'USA',
  'OrganizationID': 46663,
  'StateName': 'Minnesota',
  'Status': 'Active',
  'TrailerIdentity': 'WS_Test_Trailer_V2'}]</msg>
<msg timestamp="20200107 09:49:52.690" level="INFO">@{XRS_AWS_WEBSERVICE_POST_TEST_TRAILER_LIST_V2} = [ {'OrganizationID': 46663, 'StateName': 'Minnesota', 'Status': 'Active', 'TrailerIdentity': 'WS_Test_Trailer_V2', 'Country': 'USA'} ]</msg>
<status status="PASS" starttime="20200107 09:49:52.690" endtime="20200107 09:49:52.690"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_POST_TEST_TRAILER_LIST_V2}</arg>
</arguments>
<msg timestamp="20200107 09:49:52.691" level="TRACE">Arguments: [ '@{XRS_AWS_WEBSERVICE_POST_TEST_TRAILER_LIST_V2}' ]</msg>
<msg timestamp="20200107 09:49:52.691" level="INFO">@{XRS_AWS_WEBSERVICE_POST_TEST_TRAILER_LIST_V2} = [ {'OrganizationID': 46663, 'StateName': 'Minnesota', 'Status': 'Active', 'TrailerIdentity': 'WS_Test_Trailer_V2', 'Country': 'USA'} ]</msg>
<msg timestamp="20200107 09:49:52.691" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:52.690" endtime="20200107 09:49:52.691"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>StateName=${XRS_WEB_SERVICES_TEST_TRAILER_V2.StateName}</arg>
<arg>Status=${XRS_WEB_SERVICES_TEST_TRAILER_V2.Status}</arg>
<arg>TrailerIdentity=${XRS_WEB_SERVICES_TEST_TRAILER_V2.TrailerIdentity}</arg>
<arg>Country=${XRS_WEB_SERVICES_TEST_TRAILER_V2.Country}</arg>
</arguments>
<assign>
<var>&amp;{XRS_AWS_WEBSERVICE_PUT_TEST_TRAILER_1_V2_DICT}</var>
</assign>
<msg timestamp="20200107 09:49:52.691" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'StateName=${XRS_WEB_SERVICES_TEST_TRAILER_V2.StateName}' | 'Status=${XRS_WEB_SERVICES_TEST_TRAILER_V2.Status}' | 'TrailerIdentity=${XRS_WEB_SERVICES_TEST_TRAILER_V2.TrailerIdentity}' | 'Country=${XRS_WEB_SERVICES_TEST_TRAILER_V2.Country}' ]</msg>
<msg timestamp="20200107 09:49:52.692" level="TRACE">Return: {'Country': 'USA',
 'OrganizationID': 46663,
 'StateName': 'Minnesota',
 'Status': 'Active',
 'TrailerIdentity': 'WS_Test_Trailer_V2'}</msg>
<msg timestamp="20200107 09:49:52.692" level="INFO">&amp;{XRS_AWS_WEBSERVICE_PUT_TEST_TRAILER_1_V2_DICT} = { OrganizationID=46663 | StateName=Minnesota | Status=Active | TrailerIdentity=WS_Test_Trailer_V2 | Country=USA }</msg>
<status status="PASS" starttime="20200107 09:49:52.691" endtime="20200107 09:49:52.693"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${XRS_AWS_WEBSERVICE_PUT_TEST_TRAILER_1_V2_DICT}</arg>
</arguments>
<assign>
<var>@{XRS_AWS_WEBSERVICE_PUT_TEST_TRAILER_LIST_V2}</var>
</assign>
<msg timestamp="20200107 09:49:52.693" level="TRACE">Arguments: [ {'Country': 'USA',
 'OrganizationID': 46663,
 'StateName': 'Minnesota',
 'Status': 'Active',
 'TrailerIdentity': 'WS_Test_Trailer_V2'} ]</msg>
<msg timestamp="20200107 09:49:52.693" level="TRACE">Return: [{'Country': 'USA',
  'OrganizationID': 46663,
  'StateName': 'Minnesota',
  'Status': 'Active',
  'TrailerIdentity': 'WS_Test_Trailer_V2'}]</msg>
<msg timestamp="20200107 09:49:52.693" level="INFO">@{XRS_AWS_WEBSERVICE_PUT_TEST_TRAILER_LIST_V2} = [ {'OrganizationID': 46663, 'StateName': 'Minnesota', 'Status': 'Active', 'TrailerIdentity': 'WS_Test_Trailer_V2', 'Country': 'USA'} ]</msg>
<status status="PASS" starttime="20200107 09:49:52.693" endtime="20200107 09:49:52.693"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_PUT_TEST_TRAILER_LIST_V2}</arg>
</arguments>
<msg timestamp="20200107 09:49:52.694" level="TRACE">Arguments: [ '@{XRS_AWS_WEBSERVICE_PUT_TEST_TRAILER_LIST_V2}' ]</msg>
<msg timestamp="20200107 09:49:52.694" level="INFO">@{XRS_AWS_WEBSERVICE_PUT_TEST_TRAILER_LIST_V2} = [ {'OrganizationID': 46663, 'StateName': 'Minnesota', 'Status': 'Active', 'TrailerIdentity': 'WS_Test_Trailer_V2', 'Country': 'USA'} ]</msg>
<msg timestamp="20200107 09:49:52.694" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:52.693" endtime="20200107 09:49:52.694"></status>
</kw>
<msg timestamp="20200107 09:49:52.694" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:52.685" endtime="20200107 09:49:52.694"></status>
</kw>
<msg timestamp="20200107 09:49:52.694" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:52.683" endtime="20200107 09:49:52.694"></status>
</kw>
<test id="s1-s1-s6-t1" name="Validate AWS XRS Get Trailer REST Web Services Returns 400 Error">
<kw name="Get Trailer By ID" library="Trailer">
<doc>Get attributes for a specific trailer by specifying a TrailerSID value.</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_TRAILER.TrailerIdentity}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:52.696" level="TRACE">Arguments: [ ${trailer_id}='WS_Test_Trailer' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Trailer}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_GET_DELETE_TRAILER}/${trailer_id}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:52.696" level="TRACE">Arguments: [ 'TrailerWebService.svc/trailer/WS_Test_Trailer' ]</msg>
<msg timestamp="20200107 09:49:52.696" level="TRACE">Return: 'TrailerWebService.svc/trailer/WS_Test_Trailer'</msg>
<msg timestamp="20200107 09:49:52.696" level="INFO">${uri} = TrailerWebService.svc/trailer/WS_Test_Trailer</msg>
<status status="PASS" starttime="20200107 09:49:52.696" endtime="20200107 09:49:52.696"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:52.697" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'TrailerWebService.svc/trailer/WS_Test_Trailer' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:52.697" level="INFO">GET Request using : uri=TrailerWebService.svc/trailer/WS_Test_Trailer, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:52.698" level="DEBUG">Starting new HTTPS connection (1): d3ws.xataxrs.com:443</msg>
<msg timestamp="20200107 09:49:53.486" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /TrailerWebService.svc/trailer/WS_Test_Trailer HTTP/1.1" 400 102</msg>
<msg timestamp="20200107 09:49:53.488" level="DEBUG">GET Response : status=400, reason=Bad Request
{"ErrorMessage":"Trailer not exist.","EventCode":3461297934639824896,"Parameters":["WS_Test_Trailer"]}</msg>
<msg timestamp="20200107 09:49:53.489" level="TRACE">Return: &lt;Response [400]&gt;</msg>
<msg timestamp="20200107 09:49:53.490" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:52.696" endtime="20200107 09:49:53.490"></status>
</kw>
<msg timestamp="20200107 09:49:53.491" level="TRACE">Return: &lt;Response [400]&gt;</msg>
<msg timestamp="20200107 09:49:53.491" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:52.695" endtime="20200107 09:49:53.492"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>400</arg>
</arguments>
<msg timestamp="20200107 09:49:53.495" level="TRACE">Arguments: [ 400 | '400' ]</msg>
<msg timestamp="20200107 09:49:53.496" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:53.496" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:53.494" endtime="20200107 09:49:53.497"></status>
</kw>
<doc>Verifies that a trailer with a specific number does not exist</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrstrailerrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:52.694" endtime="20200107 09:49:53.500" critical="yes"></status>
</test>
<test id="s1-s1-s6-t2" name="Validate AWS XRS Post Trailer REST Web Services Returns Code 201">
<kw name="Post Trailers" library="Trailer">
<doc>Calls the Post Method for Trailers.
Accepts a list of json objects
Json field definitions:
CompanyName
The user defined name of the company.
CreateDate
The date and time the trailer object was created.
The value of this field is Read Only and cannot be modified using PUT or POST commands.
ModifiedBy
The ID of the last person to modify the driver record.
ModifiedDate
Date driver record was last modified.
The value of this field is Read Only and cannot be modified using PUT or POST commands.
OrganizationID
The user-defined ID of the Organization in Omnitracs XRS in which the trailer is located.
OrganizationName
The user-defined name of the organization in which the trailer is located.
StateName
The state, province or territory for the trailer.
Status
The current status of the trailer in the Omnitracs XRS. The value of this field must be Active or Inactive.
TrailerIdentity
The user-defined ID of the trailer.
TrailerResourceGroupIDs
Indicates the set of ResourceGroupIDs to which the trailers should belong.
TrailerType
The type of trailer.
VIN
The registered Vehicle Identification Number (VIN) of the trailer.
NOTE: This non-required field is reserved for future use.
Web Service calls made to retrieve the value of this field will return a null value at this time.</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_POST_TEST_TRAILER_LIST}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:53.508" level="TRACE">Arguments: [ @{list_data}=[{'OrganizationID': 46663,
  'StateName': 'Minnesota',
  'Status': 'Active',
  'TrailerIdentity': 'WS_Test_Trailer'}] ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Trailer}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_TRAILERS}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:53.509" level="TRACE">Arguments: [ 'TrailerWebService.svc/trailers' ]</msg>
<msg timestamp="20200107 09:49:53.510" level="TRACE">Return: 'TrailerWebService.svc/trailers'</msg>
<msg timestamp="20200107 09:49:53.510" level="INFO">${uri} = TrailerWebService.svc/trailers</msg>
<status status="PASS" starttime="20200107 09:49:53.509" endtime="20200107 09:49:53.510"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>json=${list_data}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:53.511" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'TrailerWebService.svc/trailers' | json=[{'OrganizationID': 46663,
  'StateName': 'Minnesota',
  'Status': 'Active',
  'TrailerIdentity': 'WS_Test_Trailer'}] | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:53.511" level="INFO">POST Request using : uri=TrailerWebService.svc/trailers, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=[{'OrganizationID': 46663, 'StateName': 'Minnesota', 'Status': 'Active', 'TrailerIdentity': 'WS_Test_Trailer'}]</msg>
<msg timestamp="20200107 09:49:54.405" level="DEBUG">https://d3ws.xataxrs.com:443 "POST /TrailerWebService.svc/trailers HTTP/1.1" 200 161</msg>
<msg timestamp="20200107 09:49:54.407" level="DEBUG">POST Response : status=200, reason=OK
[{"Caption":"Created","Code":"201","Description":"Trailer added successfully.","Id":"WS_Test_Trailer","ObjectName":"Trailer","SID":5695,"Title":"TrailerAdded."}]</msg>
<msg timestamp="20200107 09:49:54.407" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:54.408" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:53.510" endtime="20200107 09:49:54.408"></status>
</kw>
<msg timestamp="20200107 09:49:54.409" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:54.409" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:53.508" endtime="20200107 09:49:54.410"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20200107 09:49:54.414" level="TRACE">Arguments: [ b'[{"Caption":"Created","Code":"201","Description":"Trailer added successfully.","Id":"WS_Test_Trailer","ObjectName":"Trailer","SID":5695,"Title":"TrailerAdded."}]' ]</msg>
<msg timestamp="20200107 09:49:54.414" level="INFO">To JSON using : content=[{"Caption":"Created","Code":"201","Description":"Trailer added successfully.","Id":"WS_Test_Trailer","ObjectName":"Trailer","SID":5695,"Title":"TrailerAdded."}] </msg>
<msg timestamp="20200107 09:49:54.415" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20200107 09:49:54.415" level="TRACE">Return: [{'Caption': 'Created',
  'Code': '201',
  'Description': 'Trailer added successfully.',
  'Id': 'WS_Test_Trailer',
  'ObjectName': 'Trailer',
  'SID': 5695,
  'Title': 'TrailerAdded.'}]</msg>
<msg timestamp="20200107 09:49:54.416" level="INFO">${json_response} = [{'Caption': 'Created', 'Code': '201', 'Description': 'Trailer added successfully.', 'Id': 'WS_Test_Trailer', 'ObjectName': 'Trailer', 'SID': 5695, 'Title': 'TrailerAdded.'}]</msg>
<status status="PASS" starttime="20200107 09:49:54.412" endtime="20200107 09:49:54.416"></status>
</kw>
<kw name="${r} IN [ @{json_response} ]" type="for">
<kw name="${r} = {'Caption': 'Created', 'Code': '201', 'Description': 'Trailer added successfully.', 'Id': 'WS_Test_Trailer', 'ObjectName': 'Trailer', 'SID': 5695, 'Title': 'TrailerAdded.'}" type="foritem">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${r}[Code]</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20200107 09:49:54.419" level="TRACE">Arguments: [ '201' | '201' ]</msg>
<msg timestamp="20200107 09:49:54.419" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:54.419" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:54.418" endtime="20200107 09:49:54.420"></status>
</kw>
<status status="PASS" starttime="20200107 09:49:54.418" endtime="20200107 09:49:54.420"></status>
</kw>
<status status="PASS" starttime="20200107 09:49:54.418" endtime="20200107 09:49:54.420"></status>
</kw>
<doc>Posts a trailer and expects a Code value of 201</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrstrailerrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:53.505" endtime="20200107 09:49:54.421" critical="yes"></status>
</test>
<test id="s1-s1-s6-t3" name="Validate AWS XRS Get Trailer REST Web Services Returns 200 OK">
<kw name="Get Trailer By ID" library="Trailer">
<doc>Get attributes for a specific trailer by specifying a TrailerSID value.</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_TRAILER.TrailerIdentity}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:54.427" level="TRACE">Arguments: [ ${trailer_id}='WS_Test_Trailer' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Trailer}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_GET_DELETE_TRAILER}/${trailer_id}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:54.428" level="TRACE">Arguments: [ 'TrailerWebService.svc/trailer/WS_Test_Trailer' ]</msg>
<msg timestamp="20200107 09:49:54.428" level="TRACE">Return: 'TrailerWebService.svc/trailer/WS_Test_Trailer'</msg>
<msg timestamp="20200107 09:49:54.428" level="INFO">${uri} = TrailerWebService.svc/trailer/WS_Test_Trailer</msg>
<status status="PASS" starttime="20200107 09:49:54.427" endtime="20200107 09:49:54.428"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:54.429" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'TrailerWebService.svc/trailer/WS_Test_Trailer' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:54.429" level="INFO">GET Request using : uri=TrailerWebService.svc/trailer/WS_Test_Trailer, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:54.884" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /TrailerWebService.svc/trailer/WS_Test_Trailer HTTP/1.1" 200 492</msg>
<msg timestamp="20200107 09:49:54.885" level="DEBUG">GET Response : status=200, reason=OK
{"CompanyName":"Gnome Shipping D3","CreateDate":"\/Date(1578440966254-0800)\/","ModifiedBy":0,"ModifiedDate":"\/Date(-62135568000000-0800)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","StateName":"Minnesota","Status":"Active","TrailerIdentity":"WS_Test_Trailer","TrailerResourceGroupIDs":["Gnome Shipping D3"],"TrailerType":"General","UserDefinedField1":null,"UserDefinedField2":null,"UserDefinedField3":null,"UserDefinedField4":null,"UserDefinedField5":null,"VIN":null}</msg>
<msg timestamp="20200107 09:49:54.885" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:54.886" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:54.428" endtime="20200107 09:49:54.886"></status>
</kw>
<msg timestamp="20200107 09:49:54.886" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:54.886" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:54.426" endtime="20200107 09:49:54.886"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:54.887" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:54.888" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:54.888" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:54.887" endtime="20200107 09:49:54.888"></status>
</kw>
<doc>Verifies that a posted trailer now exists</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrstrailerrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:54.425" endtime="20200107 09:49:54.889" critical="yes"></status>
</test>
<test id="s1-s1-s6-t4" name="Validate AWS XRS Put Trailer REST Web Services Modifies Driver Successfully">
<kw name="Put Trailers" library="Trailer">
<doc>Calls the Post Method for Trailers.
Accepts a list of json objects
See Json field definitions in the "Post Trailers" Keyword</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_PUT_TEST_TRAILER_LIST}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:54.893" level="TRACE">Arguments: [ @{list_data}=[{'OrganizationID': 46663,
  'StateName': 'Minnesota',
  'Status': 'Active',
  'TrailerIdentity': 'WS_Test_Trailer'}] ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Trailer}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_TRAILERS}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:54.894" level="TRACE">Arguments: [ 'TrailerWebService.svc/trailers' ]</msg>
<msg timestamp="20200107 09:49:54.894" level="TRACE">Return: 'TrailerWebService.svc/trailers'</msg>
<msg timestamp="20200107 09:49:54.895" level="INFO">${uri} = TrailerWebService.svc/trailers</msg>
<status status="PASS" starttime="20200107 09:49:54.894" endtime="20200107 09:49:54.895"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary">
<doc>Send a PUT request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>json=${list_data}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:54.895" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'TrailerWebService.svc/trailers' | json=[{'OrganizationID': 46663,
  'StateName': 'Minnesota',
  'Status': 'Active',
  'TrailerIdentity': 'WS_Test_Trailer'}] | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:54.896" level="INFO">PUT Request using : uri=TrailerWebService.svc/trailers, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=[{'OrganizationID': 46663, 'StateName': 'Minnesota', 'Status': 'Active', 'TrailerIdentity': 'WS_Test_Trailer'}]</msg>
<msg timestamp="20200107 09:49:55.482" level="DEBUG">https://d3ws.xataxrs.com:443 "PUT /TrailerWebService.svc/trailers HTTP/1.1" 200 202</msg>
<msg timestamp="20200107 09:49:55.484" level="DEBUG">PUT Response : status=200, reason=OK
[{"Caption":"Trailer edited successfully.","Code":"200","Description":"Trailer edited successfully.","Id":"WS_Test_Trailer","ObjectName":"Trailer edited successfully.","SID":0,"Title":"TrailerEdited."}]</msg>
<msg timestamp="20200107 09:49:55.484" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:55.485" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:54.895" endtime="20200107 09:49:55.485"></status>
</kw>
<msg timestamp="20200107 09:49:55.486" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:55.486" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:54.893" endtime="20200107 09:49:55.486"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20200107 09:49:55.490" level="TRACE">Arguments: [ b'[{"Caption":"Trailer edited successfully.","Code":"200","Description":"Trailer edited successfully.","Id":"WS_Test_Trailer","ObjectName":"Trailer edited successfully.","SID":0,"Title":"TrailerEdited."}]' ]</msg>
<msg timestamp="20200107 09:49:55.490" level="INFO">To JSON using : content=[{"Caption":"Trailer edited successfully.","Code":"200","Description":"Trailer edited successfully.","Id":"WS_Test_Trailer","ObjectName":"Trailer edited successfully.","SID":0,"Title":"TrailerEdited."}] </msg>
<msg timestamp="20200107 09:49:55.490" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20200107 09:49:55.491" level="TRACE">Return: [{'Caption': 'Trailer edited successfully.',
  'Code': '200',
  'Description': 'Trailer edited successfully.',
  'Id': 'WS_Test_Trailer',
  'ObjectName': 'Trailer edited successfully.',
  'SID': 0,
  'Title': 'TrailerEdited.'}]</msg>
<msg timestamp="20200107 09:49:55.492" level="INFO">${json_response} = [{'Caption': 'Trailer edited successfully.', 'Code': '200', 'Description': 'Trailer edited successfully.', 'Id': 'WS_Test_Trailer', 'ObjectName': 'Trailer edited successfully.', 'SID': 0, 'Title': 'Tr...</msg>
<status status="PASS" starttime="20200107 09:49:55.489" endtime="20200107 09:49:55.492"></status>
</kw>
<kw name="${r} IN [ @{json_response} ]" type="for">
<kw name="${r} = {'Caption': 'Trailer edited successfully.', 'Code': '200', 'Description': 'Trailer edited successfully.', 'Id': 'WS_Test_Trailer', 'ObjectName': 'Trailer edited successfully.', 'SID': 0, 'Title': 'Tra..." type="foritem">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${r}[Description]</arg>
<arg>Trailer edited successfully.</arg>
</arguments>
<msg timestamp="20200107 09:49:55.496" level="TRACE">Arguments: [ 'Trailer edited successfully.' | 'Trailer edited successfully.' ]</msg>
<msg timestamp="20200107 09:49:55.496" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:55.496" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:55.495" endtime="20200107 09:49:55.497"></status>
</kw>
<status status="PASS" starttime="20200107 09:49:55.494" endtime="20200107 09:49:55.497"></status>
</kw>
<status status="PASS" starttime="20200107 09:49:55.493" endtime="20200107 09:49:55.497"></status>
</kw>
<doc>Posts a trailer and expects a Code value of 201</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrstrailerrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:54.892" endtime="20200107 09:49:55.498" critical="yes"></status>
</test>
<test id="s1-s1-s6-t5" name="Validate AWS XRS Get Trailers REST Web Services Returns 200 OK">
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:49:55.504" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:49:55.505" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:49:55.505" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:49:55.505" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:49:55.505" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:49:55.504" endtime="20200107 09:49:55.505"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:49:55.507" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:49:55.507" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20200107 09:49:55.508" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:49:55.507" endtime="20200107 09:49:55.508"></status>
</kw>
<kw name="Verify Get Trailers With Forward Slash Returns 200 OK">
<doc>Verify that using a '/' in the URI returns 200 OK</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<msg timestamp="20200107 09:49:55.509" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/</arg>
</arguments>
<assign>
<var>${ending_character}</var>
</assign>
<msg timestamp="20200107 09:49:55.510" level="TRACE">Arguments: [ '/' ]</msg>
<msg timestamp="20200107 09:49:55.511" level="TRACE">Return: '/'</msg>
<msg timestamp="20200107 09:49:55.511" level="INFO">${ending_character} = /</msg>
<status status="PASS" starttime="20200107 09:49:55.510" endtime="20200107 09:49:55.511"></status>
</kw>
<kw name="Get Trailers With URI Ending With ${ending_character} And Parameters &amp;{params}" library="Trailer">
<doc>This Keyword modifies character between the base uri and the parameters
This will get trailers that match the provided parameters.
Params can be named individually or within a Dictionary
See the Get Trailers Keyword for param definitions.</doc>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:55.511" level="TRACE">Arguments: [ ${ending_character}='/' | ${params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Trailer}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_TRAILERS}${ending_character}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:55.512" level="TRACE">Arguments: [ 'TrailerWebService.svc/trailers/' ]</msg>
<msg timestamp="20200107 09:49:55.512" level="TRACE">Return: 'TrailerWebService.svc/trailers/'</msg>
<msg timestamp="20200107 09:49:55.512" level="INFO">${uri} = TrailerWebService.svc/trailers/</msg>
<status status="PASS" starttime="20200107 09:49:55.512" endtime="20200107 09:49:55.512"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:55.513" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'TrailerWebService.svc/trailers/' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} | params={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<msg timestamp="20200107 09:49:55.513" level="INFO">GET Request using : uri=TrailerWebService.svc/trailers/, params={'OrganizationID': 46663, 'IsActive': 'True', 'AsOfDateTime': '01/07/2020'}, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:56.017" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /TrailerWebService.svc/trailers/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01%2F07%2F2020 HTTP/1.1" 200 495</msg>
<msg timestamp="20200107 09:49:56.020" level="DEBUG">GET Response : status=200, reason=OK
[{"CompanyName":"Gnome Shipping D3","CreateDate":"\/Date(1578440966254-0800)\/","ModifiedBy":5412,"ModifiedDate":"\/Date(1578440967399-0800)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","StateName":"Minnesota","Status":"Active","TrailerIdentity":"WS_Test_Trailer","TrailerResourceGroupIDs":["Gnome Shipping D3"],"TrailerType":"General","UserDefinedField1":null,"UserDefinedField2":null,"UserDefinedField3":null,"UserDefinedField4":null,"UserDefinedField5":null,"VIN":null}]</msg>
<msg timestamp="20200107 09:49:56.020" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:56.021" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:55.512" endtime="20200107 09:49:56.021"></status>
</kw>
<msg timestamp="20200107 09:49:56.022" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:56.022" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:55.511" endtime="20200107 09:49:56.022"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:56.024" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:56.025" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:56.025" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:56.023" endtime="20200107 09:49:56.025"></status>
</kw>
<msg timestamp="20200107 09:49:56.026" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:55.508" endtime="20200107 09:49:56.026"></status>
</kw>
<kw name="Verify Get Trailers Without Forward Slash Returns 200 OK">
<doc>Verify that not using a '/' in the URI returns 200 OK</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<msg timestamp="20200107 09:49:56.030" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Get Trailers" library="Trailer">
<doc>Call the Get Method on trailers.
This will get trailers that match the provided parameters.
Params can be named individually or within a Dictionary
Param Definitions:
AsOfDateTime
Tells the service to return only the data that changed since the specified date and time.
IsActive
Filters results to active trailers only.
True, False, Both
Limit
Used in conjunction with the Offset parameter to implement paging.
Limits the number of results to a specified number.
System Limit: 10,000
Offset
Used in conjunction with the Limit parameter to implement paging.
Represents a page number for the starting point of the return set.
OrganizationID
Limits results to trailers in one or more organizations.
Maximum of 20 characters.
Recurse
When True, limits results to all trailer objects in all OrganizationIDs and ResourceGroupIDs in OrganizationID &amp; ResourceGroupID.
ResourceGroupID
Limits results to trailers in one or more resource groups.
ResourceGroupSID
Limits results to Organizations in one or more resource groups.
Maximum of 50 characters.
Status
Limits results to trailers with the selected status. Valid values include:
IsActive - Limits results to all active trailer objects in OrganizationID &amp; ResourceGroupID.
IsInActive - Limits results to all inactive trailer objects within all OrganizationID and ResourceGroupID.
TrailerID
Limits the results to trailer objects with TrailerID in OrganizationID and ResourceGroupID.
Maximum of 20 characters.</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:56.033" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Trailer}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_TRAILERS}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:56.035" level="TRACE">Arguments: [ 'TrailerWebService.svc/trailers' ]</msg>
<msg timestamp="20200107 09:49:56.035" level="TRACE">Return: 'TrailerWebService.svc/trailers'</msg>
<msg timestamp="20200107 09:49:56.036" level="INFO">${uri} = TrailerWebService.svc/trailers</msg>
<status status="PASS" starttime="20200107 09:49:56.034" endtime="20200107 09:49:56.036"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:56.037" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'TrailerWebService.svc/trailers' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} | params={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<msg timestamp="20200107 09:49:56.038" level="INFO">GET Request using : uri=TrailerWebService.svc/trailers, params={'OrganizationID': 46663, 'IsActive': 'True', 'AsOfDateTime': '01/07/2020'}, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:56.526" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /TrailerWebService.svc/trailers?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01%2F07%2F2020 HTTP/1.1" 200 495</msg>
<msg timestamp="20200107 09:49:56.528" level="DEBUG">GET Response : status=200, reason=OK
[{"CompanyName":"Gnome Shipping D3","CreateDate":"\/Date(1578440966254-0800)\/","ModifiedBy":5412,"ModifiedDate":"\/Date(1578440967399-0800)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","StateName":"Minnesota","Status":"Active","TrailerIdentity":"WS_Test_Trailer","TrailerResourceGroupIDs":["Gnome Shipping D3"],"TrailerType":"General","UserDefinedField1":null,"UserDefinedField2":null,"UserDefinedField3":null,"UserDefinedField4":null,"UserDefinedField5":null,"VIN":null}]</msg>
<msg timestamp="20200107 09:49:56.529" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:56.530" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:56.036" endtime="20200107 09:49:56.530"></status>
</kw>
<msg timestamp="20200107 09:49:56.531" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:56.531" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:56.032" endtime="20200107 09:49:56.531"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:56.533" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:56.534" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:56.534" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:56.532" endtime="20200107 09:49:56.534"></status>
</kw>
<msg timestamp="20200107 09:49:56.535" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:56.028" endtime="20200107 09:49:56.535"></status>
</kw>
<doc>Get trailers with basic parameters</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrstrailerrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:55.502" endtime="20200107 09:49:56.537" critical="yes"></status>
</test>
<test id="s1-s1-s6-t6" name="Validate AWS XRS Get Trailers REST Web Services Returns 200 OK With Raw String URI">
<kw name="Verify Get Trailers Raw String URI With /? Returns 200 OK">
<doc>Verify that using the given character string in the raw URI string returns 200 OK</doc>
<msg timestamp="20200107 09:49:56.543" level="TRACE">Arguments: [ ${character_string}='/?' ]</msg>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:49:56.544" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:49:56.544" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:49:56.544" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:49:56.544" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:49:56.545" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:49:56.544" endtime="20200107 09:49:56.545"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:49:56.545" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:49:56.546" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20200107 09:49:56.546" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:49:56.545" endtime="20200107 09:49:56.546"></status>
</kw>
<kw name="Create URI String With" library="URIStringBuilderTool">
<doc>Helper Keyword to construct the request uri with different character strings
base_uri = webservice uri
request_type = request extension for the webservice
character_string = final character of the uri. i.e. /, /?, etc ...</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Trailer}</arg>
<arg>${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_TRAILERS}</arg>
<arg>${character_string}</arg>
</arguments>
<assign>
<var>${uri_string}</var>
</assign>
<msg timestamp="20200107 09:49:56.547" level="TRACE">Arguments: [ ${base_uri}='TrailerWebService.svc' | ${request_type}='/trailers' | ${character_string}='/?' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${base_uri}${request_type}${character_string}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:56.548" level="TRACE">Arguments: [ 'TrailerWebService.svc/trailers/?' ]</msg>
<msg timestamp="20200107 09:49:56.548" level="TRACE">Return: 'TrailerWebService.svc/trailers/?'</msg>
<msg timestamp="20200107 09:49:56.548" level="INFO">${uri} = TrailerWebService.svc/trailers/?</msg>
<status status="PASS" starttime="20200107 09:49:56.547" endtime="20200107 09:49:56.548"></status>
</kw>
<msg timestamp="20200107 09:49:56.548" level="TRACE">Return: 'TrailerWebService.svc/trailers/?'</msg>
<msg timestamp="20200107 09:49:56.548" level="INFO">${uri_string} = TrailerWebService.svc/trailers/?</msg>
<status status="PASS" starttime="20200107 09:49:56.546" endtime="20200107 09:49:56.548"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${uri_string}OrganizationID=${params.OrganizationID}&amp;IsActive=${params.IsActive}&amp;AsOfDateTime=${params.AsOfDateTime}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:56.549" level="TRACE">Arguments: [ 'TrailerWebService.svc/trailers/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' ]</msg>
<msg timestamp="20200107 09:49:56.549" level="TRACE">Return: 'TrailerWebService.svc/trailers/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020'</msg>
<msg timestamp="20200107 09:49:56.549" level="INFO">${uri} = TrailerWebService.svc/trailers/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020</msg>
<status status="PASS" starttime="20200107 09:49:56.548" endtime="20200107 09:49:56.549"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:56.550" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'TrailerWebService.svc/trailers/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:56.550" level="INFO">GET Request using : uri=TrailerWebService.svc/trailers/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:56.981" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /TrailerWebService.svc/trailers/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020 HTTP/1.1" 200 495</msg>
<msg timestamp="20200107 09:49:56.981" level="DEBUG">GET Response : status=200, reason=OK
[{"CompanyName":"Gnome Shipping D3","CreateDate":"\/Date(1578440966254-0800)\/","ModifiedBy":5412,"ModifiedDate":"\/Date(1578440967399-0800)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","StateName":"Minnesota","Status":"Active","TrailerIdentity":"WS_Test_Trailer","TrailerResourceGroupIDs":["Gnome Shipping D3"],"TrailerType":"General","UserDefinedField1":null,"UserDefinedField2":null,"UserDefinedField3":null,"UserDefinedField4":null,"UserDefinedField5":null,"VIN":null}]</msg>
<msg timestamp="20200107 09:49:56.981" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:56.982" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:56.550" endtime="20200107 09:49:56.982"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:56.982" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:56.982" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:56.983" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:56.982" endtime="20200107 09:49:56.983"></status>
</kw>
<msg timestamp="20200107 09:49:56.983" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:56.543" endtime="20200107 09:49:56.983"></status>
</kw>
<kw name="Verify Get Trailers Raw String URI With ? Returns 200 OK">
<doc>Verify that using the given character string in the raw URI string returns 200 OK</doc>
<msg timestamp="20200107 09:49:56.984" level="TRACE">Arguments: [ ${character_string}='?' ]</msg>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:49:56.984" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:49:56.985" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:49:56.985" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:49:56.985" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:49:56.985" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:49:56.984" endtime="20200107 09:49:56.985"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:49:56.985" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:49:56.986" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20200107 09:49:56.986" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:49:56.985" endtime="20200107 09:49:56.987"></status>
</kw>
<kw name="Create URI String With" library="URIStringBuilderTool">
<doc>Helper Keyword to construct the request uri with different character strings
base_uri = webservice uri
request_type = request extension for the webservice
character_string = final character of the uri. i.e. /, /?, etc ...</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Trailer}</arg>
<arg>${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_TRAILERS}</arg>
<arg>${character_string}</arg>
</arguments>
<assign>
<var>${uri_string}</var>
</assign>
<msg timestamp="20200107 09:49:56.987" level="TRACE">Arguments: [ ${base_uri}='TrailerWebService.svc' | ${request_type}='/trailers' | ${character_string}='?' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${base_uri}${request_type}${character_string}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:56.988" level="TRACE">Arguments: [ 'TrailerWebService.svc/trailers?' ]</msg>
<msg timestamp="20200107 09:49:56.988" level="TRACE">Return: 'TrailerWebService.svc/trailers?'</msg>
<msg timestamp="20200107 09:49:56.988" level="INFO">${uri} = TrailerWebService.svc/trailers?</msg>
<status status="PASS" starttime="20200107 09:49:56.988" endtime="20200107 09:49:56.988"></status>
</kw>
<msg timestamp="20200107 09:49:56.988" level="TRACE">Return: 'TrailerWebService.svc/trailers?'</msg>
<msg timestamp="20200107 09:49:56.989" level="INFO">${uri_string} = TrailerWebService.svc/trailers?</msg>
<status status="PASS" starttime="20200107 09:49:56.987" endtime="20200107 09:49:56.989"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${uri_string}OrganizationID=${params.OrganizationID}&amp;IsActive=${params.IsActive}&amp;AsOfDateTime=${params.AsOfDateTime}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:56.990" level="TRACE">Arguments: [ 'TrailerWebService.svc/trailers?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' ]</msg>
<msg timestamp="20200107 09:49:56.990" level="TRACE">Return: 'TrailerWebService.svc/trailers?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020'</msg>
<msg timestamp="20200107 09:49:56.990" level="INFO">${uri} = TrailerWebService.svc/trailers?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020</msg>
<status status="PASS" starttime="20200107 09:49:56.989" endtime="20200107 09:49:56.990"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:56.991" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'TrailerWebService.svc/trailers?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:56.991" level="INFO">GET Request using : uri=TrailerWebService.svc/trailers?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:57.472" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /TrailerWebService.svc/trailers?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020 HTTP/1.1" 200 495</msg>
<msg timestamp="20200107 09:49:57.473" level="DEBUG">GET Response : status=200, reason=OK
[{"CompanyName":"Gnome Shipping D3","CreateDate":"\/Date(1578440966254-0800)\/","ModifiedBy":5412,"ModifiedDate":"\/Date(1578440967399-0800)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","StateName":"Minnesota","Status":"Active","TrailerIdentity":"WS_Test_Trailer","TrailerResourceGroupIDs":["Gnome Shipping D3"],"TrailerType":"General","UserDefinedField1":null,"UserDefinedField2":null,"UserDefinedField3":null,"UserDefinedField4":null,"UserDefinedField5":null,"VIN":null}]</msg>
<msg timestamp="20200107 09:49:57.473" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:57.473" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:56.990" endtime="20200107 09:49:57.473"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:57.474" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:57.474" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:57.474" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:57.474" endtime="20200107 09:49:57.474"></status>
</kw>
<msg timestamp="20200107 09:49:57.474" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:56.984" endtime="20200107 09:49:57.474"></status>
</kw>
<doc>Get trailers with basic parameters using a raw URI string</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrstrailerrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:56.541" endtime="20200107 09:49:57.475" critical="yes"></status>
</test>
<test id="s1-s1-s6-t7" name="Validate AWS XRS Delete Trailer REST Web Services Returns 200 OK">
<kw name="Delete Trailer By ID" library="Trailer">
<doc>Delete a single trailer record in Omnitracs XRS by specifying the TrailerSID.</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_TRAILER.TrailerIdentity}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:57.478" level="TRACE">Arguments: [ ${trailer_id}='WS_Test_Trailer' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Trailer}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_GET_DELETE_TRAILER}/${trailer_id}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:57.478" level="TRACE">Arguments: [ 'TrailerWebService.svc/trailer/WS_Test_Trailer' ]</msg>
<msg timestamp="20200107 09:49:57.478" level="TRACE">Return: 'TrailerWebService.svc/trailer/WS_Test_Trailer'</msg>
<msg timestamp="20200107 09:49:57.478" level="INFO">${uri} = TrailerWebService.svc/trailer/WS_Test_Trailer</msg>
<status status="PASS" starttime="20200107 09:49:57.478" endtime="20200107 09:49:57.478"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:57.479" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'TrailerWebService.svc/trailer/WS_Test_Trailer' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:57.479" level="INFO">DELETE Request using : uri=TrailerWebService.svc/trailer/WS_Test_Trailer, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:57.991" level="DEBUG">https://d3ws.xataxrs.com:443 "DELETE /TrailerWebService.svc/trailer/WS_Test_Trailer HTTP/1.1" 200 161</msg>
<msg timestamp="20200107 09:49:57.992" level="DEBUG">DELETE Response : status=200, reason=OK
{"Caption":"Deleted.","Code":"200","Description":"Trailer Deleted Successfully.","Id":"WS_Test_Trailer","ObjectName":"Trailer","SID":0,"Title":"TrailerDeleted."}</msg>
<msg timestamp="20200107 09:49:57.992" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:57.992" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:57.479" endtime="20200107 09:49:57.992"></status>
</kw>
<msg timestamp="20200107 09:49:57.992" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:57.993" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:57.478" endtime="20200107 09:49:57.993"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:57.994" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:57.994" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:57.994" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:57.993" endtime="20200107 09:49:57.994"></status>
</kw>
<doc>Verifies that created trailer is deleted</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrstrailerrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:57.477" endtime="20200107 09:49:57.995" critical="yes"></status>
</test>
<test id="s1-s1-s6-t8" name="Validate AWS XRS Get Trailers REST Web Services For All Trailers Returns 200 OK">
<kw name="Get All Trailers" library="Trailer">
<doc>Get attributes for all trailers.</doc>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:57.998" level="TRACE">Arguments: [  ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Trailer}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_TRAILERS}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:57.999" level="TRACE">Arguments: [ 'TrailerWebService.svc/trailers' ]</msg>
<msg timestamp="20200107 09:49:57.999" level="TRACE">Return: 'TrailerWebService.svc/trailers'</msg>
<msg timestamp="20200107 09:49:57.999" level="INFO">${uri} = TrailerWebService.svc/trailers</msg>
<status status="PASS" starttime="20200107 09:49:57.998" endtime="20200107 09:49:57.999"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:58.000" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'TrailerWebService.svc/trailers' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:58.000" level="INFO">GET Request using : uri=TrailerWebService.svc/trailers, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:58.443" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /TrailerWebService.svc/trailers HTTP/1.1" 200 948</msg>
<msg timestamp="20200107 09:49:58.445" level="DEBUG">GET Response : status=200, reason=OK
[{"CompanyName":"Gnome Shipping D3","CreateDate":"\/Date(1562792228253-0700)\/","ModifiedBy":5412,"ModifiedDate":"\/Date(1562792228202-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","StateName":"Minnesota","Status":"Active","TrailerIdentity":"Default_Trailer","TrailerResourceGroupIDs":null,"TrailerType":"General","UserDefinedField1":null,"UserDefinedField2":null,"UserDefinedField3":null,"UserDefinedField4":null,"UserDefinedField5":null,"VIN":null},{"CompanyName":"Gnome Shipping D3","CreateDate":"\/Date(1537837317411-0700)\/","ModifiedBy":5412,"ModifiedDate":"\/Date(1537837317396-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","StateName":"Minnesota","Status":"Active","TrailerIdentity":"Troller1","TrailerResourceGroupIDs":null,"TrailerType":"General","UserDefinedField1":null,"UserDefinedField2":null,"UserDefinedField3":null,"UserDefinedField4":null,"UserDefinedField5":null,"VIN":null}]</msg>
<msg timestamp="20200107 09:49:58.446" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:58.446" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:57.999" endtime="20200107 09:49:58.446"></status>
</kw>
<msg timestamp="20200107 09:49:58.447" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:58.447" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:57.997" endtime="20200107 09:49:58.447"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:49:58.450" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:49:58.450" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:58.451" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:58.449" endtime="20200107 09:49:58.451"></status>
</kw>
<doc>Gets all the trailers</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrstrailerrestwebservicevalidation</tag>
<tag>xrsawsperftest</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:57.996" endtime="20200107 09:49:58.452" critical="yes"></status>
</test>
<test id="s1-s1-s6-t9" name="Validate AWS XRS Delete Trailers REST Web Services Returns Error Message">
<kw name="Delete Trailer By ID" library="Trailer">
<doc>Delete a single trailer record in Omnitracs XRS by specifying the TrailerSID.</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_TRAILER.TrailerIdentity}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:58.460" level="TRACE">Arguments: [ ${trailer_id}='WS_Test_Trailer' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Trailer}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_GET_DELETE_TRAILER}/${trailer_id}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:58.461" level="TRACE">Arguments: [ 'TrailerWebService.svc/trailer/WS_Test_Trailer' ]</msg>
<msg timestamp="20200107 09:49:58.461" level="TRACE">Return: 'TrailerWebService.svc/trailer/WS_Test_Trailer'</msg>
<msg timestamp="20200107 09:49:58.461" level="INFO">${uri} = TrailerWebService.svc/trailer/WS_Test_Trailer</msg>
<status status="PASS" starttime="20200107 09:49:58.460" endtime="20200107 09:49:58.461"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:58.462" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'TrailerWebService.svc/trailer/WS_Test_Trailer' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:58.462" level="INFO">DELETE Request using : uri=TrailerWebService.svc/trailer/WS_Test_Trailer, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:58.867" level="DEBUG">https://d3ws.xataxrs.com:443 "DELETE /TrailerWebService.svc/trailer/WS_Test_Trailer HTTP/1.1" 200 150</msg>
<msg timestamp="20200107 09:49:58.871" level="DEBUG">DELETE Response : status=200, reason=OK
{"Caption":"Error","Code":"400","Description":"Trailer not exist.","Id":"WS_Test_Trailer","ObjectName":"Trailer","SID":0,"Title":"Trailer not exist."}</msg>
<msg timestamp="20200107 09:49:58.871" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:58.871" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:58.462" endtime="20200107 09:49:58.872"></status>
</kw>
<msg timestamp="20200107 09:49:58.873" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:58.873" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:58.459" endtime="20200107 09:49:58.874"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>Trailer not exist.</arg>
</arguments>
<assign>
<var>${expected_error_message}</var>
</assign>
<msg timestamp="20200107 09:49:58.877" level="TRACE">Arguments: [ 'Trailer not exist.' ]</msg>
<msg timestamp="20200107 09:49:58.877" level="TRACE">Return: 'Trailer not exist.'</msg>
<msg timestamp="20200107 09:49:58.878" level="INFO">${expected_error_message} = Trailer not exist.</msg>
<status status="PASS" starttime="20200107 09:49:58.876" endtime="20200107 09:49:58.878"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20200107 09:49:58.881" level="TRACE">Arguments: [ b'{"Caption":"Error","Code":"400","Description":"Trailer not exist.","Id":"WS_Test_Trailer","ObjectName":"Trailer","SID":0,"Title":"Trailer not exist."}' ]</msg>
<msg timestamp="20200107 09:49:58.882" level="INFO">To JSON using : content={"Caption":"Error","Code":"400","Description":"Trailer not exist.","Id":"WS_Test_Trailer","ObjectName":"Trailer","SID":0,"Title":"Trailer not exist."} </msg>
<msg timestamp="20200107 09:49:58.882" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20200107 09:49:58.882" level="TRACE">Return: {'Caption': 'Error',
 'Code': '400',
 'Description': 'Trailer not exist.',
 'Id': 'WS_Test_Trailer',
 'ObjectName': 'Trailer',
 'SID': 0,
 'Title': 'Trailer not exist.'}</msg>
<msg timestamp="20200107 09:49:58.883" level="INFO">${json_response} = {'Caption': 'Error', 'Code': '400', 'Description': 'Trailer not exist.', 'Id': 'WS_Test_Trailer', 'ObjectName': 'Trailer', 'SID': 0, 'Title': 'Trailer not exist.'}</msg>
<status status="PASS" starttime="20200107 09:49:58.880" endtime="20200107 09:49:58.883"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_response}[Description]</arg>
<arg>${expected_error_message}</arg>
</arguments>
<msg timestamp="20200107 09:49:58.886" level="TRACE">Arguments: [ 'Trailer not exist.' | 'Trailer not exist.' ]</msg>
<msg timestamp="20200107 09:49:58.886" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:58.887" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:58.885" endtime="20200107 09:49:58.887"></status>
</kw>
<doc>Attempts to delete a previously deleted trailer.</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrstrailerrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:58.457" endtime="20200107 09:49:58.888" critical="yes"></status>
</test>
<test id="s1-s1-s6-t10" name="Validate AWS XRS Get Trailer V2 REST Web Services Returns 400 Error">
<kw name="Get Trailer V2 By ID" library="Trailer">
<doc>Get attributes for a specific trailer by specifying a TrailerSID value.</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_TRAILER_V2.TrailerIdentity}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:58.894" level="TRACE">Arguments: [ ${trailer_id}='WS_Test_Trailer_V2' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Trailer}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_GET_TRAILER_V2}/${trailer_id}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:58.895" level="TRACE">Arguments: [ 'TrailerWebService.svc/v2/trailer/WS_Test_Trailer_V2' ]</msg>
<msg timestamp="20200107 09:49:58.896" level="TRACE">Return: 'TrailerWebService.svc/v2/trailer/WS_Test_Trailer_V2'</msg>
<msg timestamp="20200107 09:49:58.896" level="INFO">${uri} = TrailerWebService.svc/v2/trailer/WS_Test_Trailer_V2</msg>
<status status="PASS" starttime="20200107 09:49:58.895" endtime="20200107 09:49:58.896"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:58.896" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'TrailerWebService.svc/v2/trailer/WS_Test_Trailer_V2' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:58.897" level="INFO">GET Request using : uri=TrailerWebService.svc/v2/trailer/WS_Test_Trailer_V2, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:49:59.318" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /TrailerWebService.svc/v2/trailer/WS_Test_Trailer_V2 HTTP/1.1" 400 105</msg>
<msg timestamp="20200107 09:49:59.319" level="DEBUG">GET Response : status=400, reason=Bad Request
{"ErrorMessage":"Trailer not exist.","EventCode":3461297934639824896,"Parameters":["WS_Test_Trailer_V2"]}</msg>
<msg timestamp="20200107 09:49:59.319" level="TRACE">Return: &lt;Response [400]&gt;</msg>
<msg timestamp="20200107 09:49:59.320" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:58.896" endtime="20200107 09:49:59.320"></status>
</kw>
<msg timestamp="20200107 09:49:59.320" level="TRACE">Return: &lt;Response [400]&gt;</msg>
<msg timestamp="20200107 09:49:59.320" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:58.894" endtime="20200107 09:49:59.320"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>400</arg>
</arguments>
<msg timestamp="20200107 09:49:59.322" level="TRACE">Arguments: [ 400 | '400' ]</msg>
<msg timestamp="20200107 09:49:59.322" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:59.322" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:59.321" endtime="20200107 09:49:59.322"></status>
</kw>
<doc>Verifies that a trailer with a specific number does not exist</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrstrailerrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:58.892" endtime="20200107 09:49:59.323" critical="yes"></status>
</test>
<test id="s1-s1-s6-t11" name="Validate AWS XRS Post Trailer V2 REST Web Services Returns Code 201">
<kw name="Post Trailers V2" library="Trailer">
<doc>Calls the Post Method for Trailers.
Accepts a list of json objects
Json field definitions:
CompanyName
The user defined name of the company.
CreateDate
The date and time the trailer object was created.
The value of this field is Read Only and cannot be modified using PUT or POST commands.
ModifiedBy
The ID of the last person to modify the driver record.
ModifiedDate
Date driver record was last modified.
The value of this field is Read Only and cannot be modified using PUT or POST commands.
OrganizationID
The user-defined ID of the Organization in Omnitracs XRS in which the trailer is located.
OrganizationName
The user-defined name of the organization in which the trailer is located.
StateName
The state, province or territory for the trailer.
Status
The current status of the trailer in the Omnitracs XRS. The value of this field must be Active or Inactive.
TrailerIdentity
The user-defined ID of the trailer.
TrailerResourceGroupIDs
Indicates the set of ResourceGroupIDs to which the trailers should belong.
TrailerType
The type of trailer.
VIN
The registered Vehicle Identification Number (VIN) of the trailer.
NOTE: This non-required field is reserved for future use.
Web Service calls made to retrieve the value of this field will return a null value at this time.
Country
The country where the trailer is based.
NOTE: This field is used only with Version 2 of this Web Service.
LicensePlate
The LicensePlate of the vehicle attached to the trailer.
NOTE: This field is used only with Version 2 of this Web Service.
Odomoter
The last Odometer reading from the trailer.
NOTE: This field is used only with Version 2 of this Web Service.
SerialNumber
The serial number of the trailer, if available.
NOTE: This field is used only with Version 2 of this Web Service.</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_POST_TEST_TRAILER_LIST_V2}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:59.329" level="TRACE">Arguments: [ @{list_data}=[{'Country': 'USA',
  'OrganizationID': 46663,
  'StateName': 'Minnesota',
  'Status': 'Active',
  'TrailerIdentity': 'WS_Test_Trailer_V2'}] ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Trailer}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_TRAILERS}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:59.331" level="TRACE">Arguments: [ 'TrailerWebService.svc/trailers' ]</msg>
<msg timestamp="20200107 09:49:59.331" level="TRACE">Return: 'TrailerWebService.svc/trailers'</msg>
<msg timestamp="20200107 09:49:59.331" level="INFO">${uri} = TrailerWebService.svc/trailers</msg>
<status status="PASS" starttime="20200107 09:49:59.330" endtime="20200107 09:49:59.331"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>json=${list_data}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:59.332" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'TrailerWebService.svc/trailers' | json=[{'Country': 'USA',
  'OrganizationID': 46663,
  'StateName': 'Minnesota',
  'Status': 'Active',
  'TrailerIdentity': 'WS_Test_Trailer_V2'}] | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:59.333" level="INFO">POST Request using : uri=TrailerWebService.svc/trailers, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=[{'OrganizationID': 46663, 'StateName': 'Minnesota', 'Status': 'Active', 'TrailerIdentity': 'WS_Test_Trailer_V2', 'Country': 'USA'}]</msg>
<msg timestamp="20200107 09:49:59.880" level="DEBUG">https://d3ws.xataxrs.com:443 "POST /TrailerWebService.svc/trailers HTTP/1.1" 200 164</msg>
<msg timestamp="20200107 09:49:59.881" level="DEBUG">POST Response : status=200, reason=OK
[{"Caption":"Created","Code":"201","Description":"Trailer added successfully.","Id":"WS_Test_Trailer_V2","ObjectName":"Trailer","SID":5696,"Title":"TrailerAdded."}]</msg>
<msg timestamp="20200107 09:49:59.881" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:59.881" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:59.331" endtime="20200107 09:49:59.881"></status>
</kw>
<msg timestamp="20200107 09:49:59.882" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:49:59.882" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:59.329" endtime="20200107 09:49:59.882"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20200107 09:49:59.884" level="TRACE">Arguments: [ b'[{"Caption":"Created","Code":"201","Description":"Trailer added successfully.","Id":"WS_Test_Trailer_V2","ObjectName":"Trailer","SID":5696,"Title":"TrailerAdded."}]' ]</msg>
<msg timestamp="20200107 09:49:59.884" level="INFO">To JSON using : content=[{"Caption":"Created","Code":"201","Description":"Trailer added successfully.","Id":"WS_Test_Trailer_V2","ObjectName":"Trailer","SID":5696,"Title":"TrailerAdded."}] </msg>
<msg timestamp="20200107 09:49:59.884" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20200107 09:49:59.884" level="TRACE">Return: [{'Caption': 'Created',
  'Code': '201',
  'Description': 'Trailer added successfully.',
  'Id': 'WS_Test_Trailer_V2',
  'ObjectName': 'Trailer',
  'SID': 5696,
  'Title': 'TrailerAdded.'}]</msg>
<msg timestamp="20200107 09:49:59.884" level="INFO">${json_response} = [{'Caption': 'Created', 'Code': '201', 'Description': 'Trailer added successfully.', 'Id': 'WS_Test_Trailer_V2', 'ObjectName': 'Trailer', 'SID': 5696, 'Title': 'TrailerAdded.'}]</msg>
<status status="PASS" starttime="20200107 09:49:59.883" endtime="20200107 09:49:59.885"></status>
</kw>
<kw name="${r} IN [ @{json_response} ]" type="for">
<kw name="${r} = {'Caption': 'Created', 'Code': '201', 'Description': 'Trailer added successfully.', 'Id': 'WS_Test_Trailer_V2', 'ObjectName': 'Trailer', 'SID': 5696, 'Title': 'TrailerAdded.'}" type="foritem">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${r}[Code]</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20200107 09:49:59.886" level="TRACE">Arguments: [ '201' | '201' ]</msg>
<msg timestamp="20200107 09:49:59.886" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:49:59.887" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:49:59.886" endtime="20200107 09:49:59.887"></status>
</kw>
<status status="PASS" starttime="20200107 09:49:59.886" endtime="20200107 09:49:59.887"></status>
</kw>
<status status="PASS" starttime="20200107 09:49:59.885" endtime="20200107 09:49:59.887"></status>
</kw>
<doc>Posts a trailer and expects a Code value of 201</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrstrailerrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:59.327" endtime="20200107 09:49:59.888" critical="yes"></status>
</test>
<test id="s1-s1-s6-t12" name="Validate AWS XRS Get Trailer V2 REST Web Services Returns 200 OK">
<kw name="Get Trailer By ID" library="Trailer">
<doc>Get attributes for a specific trailer by specifying a TrailerSID value.</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_TRAILER_V2.TrailerIdentity}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:59.894" level="TRACE">Arguments: [ ${trailer_id}='WS_Test_Trailer_V2' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Trailer}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_GET_DELETE_TRAILER}/${trailer_id}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:49:59.895" level="TRACE">Arguments: [ 'TrailerWebService.svc/trailer/WS_Test_Trailer_V2' ]</msg>
<msg timestamp="20200107 09:49:59.895" level="TRACE">Return: 'TrailerWebService.svc/trailer/WS_Test_Trailer_V2'</msg>
<msg timestamp="20200107 09:49:59.895" level="INFO">${uri} = TrailerWebService.svc/trailer/WS_Test_Trailer_V2</msg>
<status status="PASS" starttime="20200107 09:49:59.894" endtime="20200107 09:49:59.895"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:49:59.896" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'TrailerWebService.svc/trailer/WS_Test_Trailer_V2' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:49:59.896" level="INFO">GET Request using : uri=TrailerWebService.svc/trailer/WS_Test_Trailer_V2, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:50:00.311" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /TrailerWebService.svc/trailer/WS_Test_Trailer_V2 HTTP/1.1" 200 495</msg>
<msg timestamp="20200107 09:50:00.313" level="DEBUG">GET Response : status=200, reason=OK
{"CompanyName":"Gnome Shipping D3","CreateDate":"\/Date(1578440971897-0800)\/","ModifiedBy":0,"ModifiedDate":"\/Date(-62135568000000-0800)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","StateName":"Minnesota","Status":"Active","TrailerIdentity":"WS_Test_Trailer_V2","TrailerResourceGroupIDs":["Gnome Shipping D3"],"TrailerType":"General","UserDefinedField1":null,"UserDefinedField2":null,"UserDefinedField3":null,"UserDefinedField4":null,"UserDefinedField5":null,"VIN":null}</msg>
<msg timestamp="20200107 09:50:00.314" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:00.314" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:59.895" endtime="20200107 09:50:00.314"></status>
</kw>
<msg timestamp="20200107 09:50:00.315" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:00.315" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:49:59.893" endtime="20200107 09:50:00.316"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:50:00.318" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:50:00.319" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:00.319" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:00.318" endtime="20200107 09:50:00.319"></status>
</kw>
<doc>Verifies that a posted trailer now exists</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrstrailerrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:49:59.891" endtime="20200107 09:50:00.320" critical="yes"></status>
</test>
<test id="s1-s1-s6-t13" name="Validate AWS XRS Put Trailer V2 REST Web Services Modifies Driver Successfully">
<kw name="Put Trailers V2" library="Trailer">
<doc>Calls the Post Method for Trailers.
Accepts a list of json objects
See Json field definitions in the "Post Trailers" Keyword</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_PUT_TEST_TRAILER_LIST_V2}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:00.326" level="TRACE">Arguments: [ @{list_data}=[{'Country': 'USA',
  'OrganizationID': 46663,
  'StateName': 'Minnesota',
  'Status': 'Active',
  'TrailerIdentity': 'WS_Test_Trailer_V2'}] ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Trailer}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_TRAILERS}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:00.327" level="TRACE">Arguments: [ 'TrailerWebService.svc/trailers' ]</msg>
<msg timestamp="20200107 09:50:00.327" level="TRACE">Return: 'TrailerWebService.svc/trailers'</msg>
<msg timestamp="20200107 09:50:00.328" level="INFO">${uri} = TrailerWebService.svc/trailers</msg>
<status status="PASS" starttime="20200107 09:50:00.327" endtime="20200107 09:50:00.328"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary">
<doc>Send a PUT request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>json=${list_data}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:00.328" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'TrailerWebService.svc/trailers' | json=[{'Country': 'USA',
  'OrganizationID': 46663,
  'StateName': 'Minnesota',
  'Status': 'Active',
  'TrailerIdentity': 'WS_Test_Trailer_V2'}] | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:50:00.329" level="INFO">PUT Request using : uri=TrailerWebService.svc/trailers, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=[{'OrganizationID': 46663, 'StateName': 'Minnesota', 'Status': 'Active', 'TrailerIdentity': 'WS_Test_Trailer_V2', 'Country': 'USA'}]</msg>
<msg timestamp="20200107 09:50:00.898" level="DEBUG">https://d3ws.xataxrs.com:443 "PUT /TrailerWebService.svc/trailers HTTP/1.1" 200 205</msg>
<msg timestamp="20200107 09:50:00.900" level="DEBUG">PUT Response : status=200, reason=OK
[{"Caption":"Trailer edited successfully.","Code":"200","Description":"Trailer edited successfully.","Id":"WS_Test_Trailer_V2","ObjectName":"Trailer edited successfully.","SID":0,"Title":"TrailerEdited."}]</msg>
<msg timestamp="20200107 09:50:00.901" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:00.901" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:00.328" endtime="20200107 09:50:00.901"></status>
</kw>
<msg timestamp="20200107 09:50:00.902" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:00.903" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:00.325" endtime="20200107 09:50:00.903"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20200107 09:50:00.907" level="TRACE">Arguments: [ b'[{"Caption":"Trailer edited successfully.","Code":"200","Description":"Trailer edited successfully.","Id":"WS_Test_Trailer_V2","ObjectName":"Trailer edited successfully.","SID":0,"Title":"TrailerEdited."}]' ]</msg>
<msg timestamp="20200107 09:50:00.907" level="INFO">To JSON using : content=[{"Caption":"Trailer edited successfully.","Code":"200","Description":"Trailer edited successfully.","Id":"WS_Test_Trailer_V2","ObjectName":"Trailer edited successfully.","SID":0,"Title":"TrailerEdited."}] </msg>
<msg timestamp="20200107 09:50:00.907" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20200107 09:50:00.907" level="TRACE">Return: [{'Caption': 'Trailer edited successfully.',
  'Code': '200',
  'Description': 'Trailer edited successfully.',
  'Id': 'WS_Test_Trailer_V2',
  'ObjectName': 'Trailer edited successfully.',
  'SID': 0,
  'Title': 'TrailerEdited.'}]</msg>
<msg timestamp="20200107 09:50:00.908" level="INFO">${json_response} = [{'Caption': 'Trailer edited successfully.', 'Code': '200', 'Description': 'Trailer edited successfully.', 'Id': 'WS_Test_Trailer_V2', 'ObjectName': 'Trailer edited successfully.', 'SID': 0, 'Title': ...</msg>
<status status="PASS" starttime="20200107 09:50:00.906" endtime="20200107 09:50:00.908"></status>
</kw>
<kw name="${r} IN [ @{json_response} ]" type="for">
<kw name="${r} = {'Caption': 'Trailer edited successfully.', 'Code': '200', 'Description': 'Trailer edited successfully.', 'Id': 'WS_Test_Trailer_V2', 'ObjectName': 'Trailer edited successfully.', 'SID': 0, 'Title': '..." type="foritem">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${r}[Description]</arg>
<arg>Trailer edited successfully.</arg>
</arguments>
<msg timestamp="20200107 09:50:00.910" level="TRACE">Arguments: [ 'Trailer edited successfully.' | 'Trailer edited successfully.' ]</msg>
<msg timestamp="20200107 09:50:00.910" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:00.911" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:00.910" endtime="20200107 09:50:00.911"></status>
</kw>
<status status="PASS" starttime="20200107 09:50:00.909" endtime="20200107 09:50:00.911"></status>
</kw>
<status status="PASS" starttime="20200107 09:50:00.909" endtime="20200107 09:50:00.911"></status>
</kw>
<doc>Posts a trailer and expects a Code value of 201</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrstrailerrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:50:00.324" endtime="20200107 09:50:00.912" critical="yes"></status>
</test>
<test id="s1-s1-s6-t14" name="Validate AWS XRS Get Trailers V2 REST Web Services Returns 200 OK">
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:50:00.917" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:50:00.917" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:50:00.917" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:50:00.918" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:50:00.918" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:50:00.917" endtime="20200107 09:50:00.918"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:50:00.919" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:50:00.920" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20200107 09:50:00.920" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:50:00.919" endtime="20200107 09:50:00.920"></status>
</kw>
<kw name="Verify Get Trailers V2 With Forward Slash Returns 200 OK">
<doc>Verify that using a '/' in the URI returns 200 OK</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<msg timestamp="20200107 09:50:00.921" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/</arg>
</arguments>
<assign>
<var>${ending_character}</var>
</assign>
<msg timestamp="20200107 09:50:00.922" level="TRACE">Arguments: [ '/' ]</msg>
<msg timestamp="20200107 09:50:00.922" level="TRACE">Return: '/'</msg>
<msg timestamp="20200107 09:50:00.922" level="INFO">${ending_character} = /</msg>
<status status="PASS" starttime="20200107 09:50:00.922" endtime="20200107 09:50:00.922"></status>
</kw>
<kw name="Get Trailers With URI Ending With ${ending_character} And Parameters &amp;{params}" library="Trailer">
<doc>This Keyword modifies character between the base uri and the parameters
This will get trailers that match the provided parameters.
Params can be named individually or within a Dictionary
See the Get Trailers Keyword for param definitions.</doc>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:00.923" level="TRACE">Arguments: [ ${ending_character}='/' | ${params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Trailer}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_TRAILERS}${ending_character}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:00.923" level="TRACE">Arguments: [ 'TrailerWebService.svc/trailers/' ]</msg>
<msg timestamp="20200107 09:50:00.923" level="TRACE">Return: 'TrailerWebService.svc/trailers/'</msg>
<msg timestamp="20200107 09:50:00.923" level="INFO">${uri} = TrailerWebService.svc/trailers/</msg>
<status status="PASS" starttime="20200107 09:50:00.923" endtime="20200107 09:50:00.924"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:00.924" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'TrailerWebService.svc/trailers/' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} | params={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<msg timestamp="20200107 09:50:00.924" level="INFO">GET Request using : uri=TrailerWebService.svc/trailers/, params={'OrganizationID': 46663, 'IsActive': 'True', 'AsOfDateTime': '01/07/2020'}, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:50:01.411" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /TrailerWebService.svc/trailers/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01%2F07%2F2020 HTTP/1.1" 200 498</msg>
<msg timestamp="20200107 09:50:01.413" level="DEBUG">GET Response : status=200, reason=OK
[{"CompanyName":"Gnome Shipping D3","CreateDate":"\/Date(1578440971897-0800)\/","ModifiedBy":5412,"ModifiedDate":"\/Date(1578440972846-0800)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","StateName":"Minnesota","Status":"Active","TrailerIdentity":"WS_Test_Trailer_V2","TrailerResourceGroupIDs":["Gnome Shipping D3"],"TrailerType":"General","UserDefinedField1":null,"UserDefinedField2":null,"UserDefinedField3":null,"UserDefinedField4":null,"UserDefinedField5":null,"VIN":null}]</msg>
<msg timestamp="20200107 09:50:01.414" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:01.414" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:00.924" endtime="20200107 09:50:01.414"></status>
</kw>
<msg timestamp="20200107 09:50:01.415" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:01.416" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:00.922" endtime="20200107 09:50:01.416"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:50:01.417" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:50:01.417" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:01.417" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:01.416" endtime="20200107 09:50:01.418"></status>
</kw>
<msg timestamp="20200107 09:50:01.418" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:00.921" endtime="20200107 09:50:01.418"></status>
</kw>
<kw name="Verify Get Trailers V2 Without Forward Slash Returns 200 OK">
<doc>Verify that not using a '/' in the URI returns 200 OK</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<msg timestamp="20200107 09:50:01.420" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Get Trailers V2" library="Trailer">
<doc>Call the Get Method on trailers v2.
This will get trailers that match the provided parameters.
Params can be named individually or within a Dictionary
Param Definitions:
AsOfDateTime
Tells the service to return only the data that changed since the specified date and time.
IsActive
Filters results to active trailers only.
True, False, Both
Limit
Used in conjunction with the Offset parameter to implement paging.
Limits the number of results to a specified number.
System Limit: 10,000
Offset
Used in conjunction with the Limit parameter to implement paging.
Represents a page number for the starting point of the return set.
OrganizationID
Limits results to trailers in one or more organizations.
Maximum of 20 characters.
Recurse
When True, limits results to all trailer objects in all OrganizationIDs and ResourceGroupIDs in OrganizationID &amp; ResourceGroupID.
ResourceGroupID
Limits results to trailers in one or more resource groups.
ResourceGroupSID
Limits results to Organizations in one or more resource groups.
Maximum of 50 characters.
Status
Limits results to trailers with the selected status. Valid values include:
IsActive - Limits results to all active trailer objects in OrganizationID &amp; ResourceGroupID.
IsInActive - Limits results to all inactive trailer objects within all OrganizationID and ResourceGroupID.
TrailerID
Limits the results to trailer objects with TrailerID in OrganizationID and ResourceGroupID.
Maximum of 20 characters.</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:01.422" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Trailer}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_TRAILERS_V2}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:01.423" level="TRACE">Arguments: [ 'TrailerWebService.svc/v2/trailers' ]</msg>
<msg timestamp="20200107 09:50:01.423" level="TRACE">Return: 'TrailerWebService.svc/v2/trailers'</msg>
<msg timestamp="20200107 09:50:01.424" level="INFO">${uri} = TrailerWebService.svc/v2/trailers</msg>
<status status="PASS" starttime="20200107 09:50:01.422" endtime="20200107 09:50:01.424"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:01.425" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'TrailerWebService.svc/v2/trailers' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} | params={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<msg timestamp="20200107 09:50:01.426" level="INFO">GET Request using : uri=TrailerWebService.svc/v2/trailers, params={'OrganizationID': 46663, 'IsActive': 'True', 'AsOfDateTime': '01/07/2020'}, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:50:01.879" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /TrailerWebService.svc/v2/trailers?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01%2F07%2F2020 HTTP/1.1" 200 555</msg>
<msg timestamp="20200107 09:50:01.881" level="DEBUG">GET Response : status=200, reason=OK
[{"CompanyName":"Gnome Shipping D3","CreateDate":"\/Date(1578440971897-0800)\/","ModifiedBy":5412,"ModifiedDate":"\/Date(1578440972846-0800)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","StateName":"Minnesota","Status":"Active","TrailerIdentity":"WS_Test_Trailer_V2","TrailerResourceGroupIDs":["Gnome Shipping D3"],"TrailerType":"General","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","VIN":null,"Country":"USA","LicensePlate":"","Odometer":0,"SerialNumber":null}]</msg>
<msg timestamp="20200107 09:50:01.881" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:01.882" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:01.424" endtime="20200107 09:50:01.882"></status>
</kw>
<msg timestamp="20200107 09:50:01.883" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:01.883" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:01.421" endtime="20200107 09:50:01.884"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:50:01.886" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:50:01.886" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:01.886" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:01.884" endtime="20200107 09:50:01.887"></status>
</kw>
<msg timestamp="20200107 09:50:01.887" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:01.419" endtime="20200107 09:50:01.887"></status>
</kw>
<doc>Get trailers with basic parameters</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrstrailerrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:50:00.915" endtime="20200107 09:50:01.890" critical="yes"></status>
</test>
<test id="s1-s1-s6-t15" name="Validate AWS XRS Get Trailers V2 REST Web Services Returns 200 OK With Raw String URI">
<kw name="Verify Get Trailers V2 Raw String URI With /? Returns 200 OK">
<doc>Verify that using the given character string in the raw URI string returns 200 OK</doc>
<msg timestamp="20200107 09:50:01.897" level="TRACE">Arguments: [ ${character_string}='/?' ]</msg>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:50:01.898" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:50:01.898" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:50:01.899" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:50:01.899" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:50:01.899" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:50:01.897" endtime="20200107 09:50:01.899"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:50:01.899" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:50:01.900" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20200107 09:50:01.901" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:50:01.899" endtime="20200107 09:50:01.901"></status>
</kw>
<kw name="Create URI String With" library="URIStringBuilderTool">
<doc>Helper Keyword to construct the request uri with different character strings
base_uri = webservice uri
request_type = request extension for the webservice
character_string = final character of the uri. i.e. /, /?, etc ...</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Trailer}</arg>
<arg>${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_TRAILERS_V2}</arg>
<arg>${character_string}</arg>
</arguments>
<assign>
<var>${uri_string}</var>
</assign>
<msg timestamp="20200107 09:50:01.902" level="TRACE">Arguments: [ ${base_uri}='TrailerWebService.svc' | ${request_type}='/v2/trailers' | ${character_string}='/?' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${base_uri}${request_type}${character_string}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:01.902" level="TRACE">Arguments: [ 'TrailerWebService.svc/v2/trailers/?' ]</msg>
<msg timestamp="20200107 09:50:01.902" level="TRACE">Return: 'TrailerWebService.svc/v2/trailers/?'</msg>
<msg timestamp="20200107 09:50:01.902" level="INFO">${uri} = TrailerWebService.svc/v2/trailers/?</msg>
<status status="PASS" starttime="20200107 09:50:01.902" endtime="20200107 09:50:01.903"></status>
</kw>
<msg timestamp="20200107 09:50:01.903" level="TRACE">Return: 'TrailerWebService.svc/v2/trailers/?'</msg>
<msg timestamp="20200107 09:50:01.903" level="INFO">${uri_string} = TrailerWebService.svc/v2/trailers/?</msg>
<status status="PASS" starttime="20200107 09:50:01.901" endtime="20200107 09:50:01.903"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${uri_string}OrganizationID=${params.OrganizationID}&amp;IsActive=${params.IsActive}&amp;AsOfDateTime=${params.AsOfDateTime}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:01.904" level="TRACE">Arguments: [ 'TrailerWebService.svc/v2/trailers/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' ]</msg>
<msg timestamp="20200107 09:50:01.904" level="TRACE">Return: 'TrailerWebService.svc/v2/trailers/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020'</msg>
<msg timestamp="20200107 09:50:01.904" level="INFO">${uri} = TrailerWebService.svc/v2/trailers/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020</msg>
<status status="PASS" starttime="20200107 09:50:01.903" endtime="20200107 09:50:01.904"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:01.905" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'TrailerWebService.svc/v2/trailers/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:50:01.905" level="INFO">GET Request using : uri=TrailerWebService.svc/v2/trailers/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:50:02.402" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /TrailerWebService.svc/v2/trailers/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020 HTTP/1.1" 200 555</msg>
<msg timestamp="20200107 09:50:02.404" level="DEBUG">GET Response : status=200, reason=OK
[{"CompanyName":"Gnome Shipping D3","CreateDate":"\/Date(1578440971897-0800)\/","ModifiedBy":5412,"ModifiedDate":"\/Date(1578440972846-0800)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","StateName":"Minnesota","Status":"Active","TrailerIdentity":"WS_Test_Trailer_V2","TrailerResourceGroupIDs":["Gnome Shipping D3"],"TrailerType":"General","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","VIN":null,"Country":"USA","LicensePlate":"","Odometer":0,"SerialNumber":null}]</msg>
<msg timestamp="20200107 09:50:02.404" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:02.405" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:01.904" endtime="20200107 09:50:02.405"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:50:02.407" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:50:02.407" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:02.407" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:02.406" endtime="20200107 09:50:02.408"></status>
</kw>
<msg timestamp="20200107 09:50:02.408" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:01.897" endtime="20200107 09:50:02.408"></status>
</kw>
<kw name="Verify Get Trailers V2 Raw String URI With ? Returns 200 OK">
<doc>Verify that using the given character string in the raw URI string returns 200 OK</doc>
<msg timestamp="20200107 09:50:02.410" level="TRACE">Arguments: [ ${character_string}='?' ]</msg>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:50:02.411" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:50:02.411" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:50:02.411" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:50:02.411" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:50:02.411" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:50:02.410" endtime="20200107 09:50:02.412"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:50:02.412" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:50:02.413" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20200107 09:50:02.413" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:50:02.412" endtime="20200107 09:50:02.413"></status>
</kw>
<kw name="Create URI String With" library="URIStringBuilderTool">
<doc>Helper Keyword to construct the request uri with different character strings
base_uri = webservice uri
request_type = request extension for the webservice
character_string = final character of the uri. i.e. /, /?, etc ...</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Trailer}</arg>
<arg>${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_TRAILERS_V2}</arg>
<arg>${character_string}</arg>
</arguments>
<assign>
<var>${uri_string}</var>
</assign>
<msg timestamp="20200107 09:50:02.414" level="TRACE">Arguments: [ ${base_uri}='TrailerWebService.svc' | ${request_type}='/v2/trailers' | ${character_string}='?' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${base_uri}${request_type}${character_string}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:02.415" level="TRACE">Arguments: [ 'TrailerWebService.svc/v2/trailers?' ]</msg>
<msg timestamp="20200107 09:50:02.415" level="TRACE">Return: 'TrailerWebService.svc/v2/trailers?'</msg>
<msg timestamp="20200107 09:50:02.415" level="INFO">${uri} = TrailerWebService.svc/v2/trailers?</msg>
<status status="PASS" starttime="20200107 09:50:02.415" endtime="20200107 09:50:02.415"></status>
</kw>
<msg timestamp="20200107 09:50:02.416" level="TRACE">Return: 'TrailerWebService.svc/v2/trailers?'</msg>
<msg timestamp="20200107 09:50:02.416" level="INFO">${uri_string} = TrailerWebService.svc/v2/trailers?</msg>
<status status="PASS" starttime="20200107 09:50:02.413" endtime="20200107 09:50:02.416"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${uri_string}OrganizationID=${params.OrganizationID}&amp;IsActive=${params.IsActive}&amp;AsOfDateTime=${params.AsOfDateTime}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:02.417" level="TRACE">Arguments: [ 'TrailerWebService.svc/v2/trailers?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' ]</msg>
<msg timestamp="20200107 09:50:02.417" level="TRACE">Return: 'TrailerWebService.svc/v2/trailers?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020'</msg>
<msg timestamp="20200107 09:50:02.417" level="INFO">${uri} = TrailerWebService.svc/v2/trailers?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020</msg>
<status status="PASS" starttime="20200107 09:50:02.416" endtime="20200107 09:50:02.417"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:02.418" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'TrailerWebService.svc/v2/trailers?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:50:02.418" level="INFO">GET Request using : uri=TrailerWebService.svc/v2/trailers?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:50:02.937" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /TrailerWebService.svc/v2/trailers?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020 HTTP/1.1" 200 555</msg>
<msg timestamp="20200107 09:50:02.938" level="DEBUG">GET Response : status=200, reason=OK
[{"CompanyName":"Gnome Shipping D3","CreateDate":"\/Date(1578440971897-0800)\/","ModifiedBy":5412,"ModifiedDate":"\/Date(1578440972846-0800)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","StateName":"Minnesota","Status":"Active","TrailerIdentity":"WS_Test_Trailer_V2","TrailerResourceGroupIDs":["Gnome Shipping D3"],"TrailerType":"General","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","VIN":null,"Country":"USA","LicensePlate":"","Odometer":0,"SerialNumber":null}]</msg>
<msg timestamp="20200107 09:50:02.939" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:02.939" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:02.417" endtime="20200107 09:50:02.939"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:50:02.940" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:50:02.941" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:02.941" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:02.940" endtime="20200107 09:50:02.942"></status>
</kw>
<msg timestamp="20200107 09:50:02.942" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:02.409" endtime="20200107 09:50:02.942"></status>
</kw>
<doc>Get trailers with basic parameters using a raw URI string</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrstrailerrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:50:01.896" endtime="20200107 09:50:02.944" critical="yes"></status>
</test>
<test id="s1-s1-s6-t16" name="Validate AWS XRS Delete Trailer V2 REST Web Services Returns 200 OK">
<kw name="Delete Trailer By ID" library="Trailer">
<doc>Delete a single trailer record in Omnitracs XRS by specifying the TrailerSID.</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_TRAILER_V2.TrailerIdentity}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:02.953" level="TRACE">Arguments: [ ${trailer_id}='WS_Test_Trailer_V2' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Trailer}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_GET_DELETE_TRAILER}/${trailer_id}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:02.955" level="TRACE">Arguments: [ 'TrailerWebService.svc/trailer/WS_Test_Trailer_V2' ]</msg>
<msg timestamp="20200107 09:50:02.955" level="TRACE">Return: 'TrailerWebService.svc/trailer/WS_Test_Trailer_V2'</msg>
<msg timestamp="20200107 09:50:02.956" level="INFO">${uri} = TrailerWebService.svc/trailer/WS_Test_Trailer_V2</msg>
<status status="PASS" starttime="20200107 09:50:02.954" endtime="20200107 09:50:02.956"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:02.956" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'TrailerWebService.svc/trailer/WS_Test_Trailer_V2' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:50:02.957" level="INFO">DELETE Request using : uri=TrailerWebService.svc/trailer/WS_Test_Trailer_V2, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:50:03.487" level="DEBUG">https://d3ws.xataxrs.com:443 "DELETE /TrailerWebService.svc/trailer/WS_Test_Trailer_V2 HTTP/1.1" 200 164</msg>
<msg timestamp="20200107 09:50:03.488" level="DEBUG">DELETE Response : status=200, reason=OK
{"Caption":"Deleted.","Code":"200","Description":"Trailer Deleted Successfully.","Id":"WS_Test_Trailer_V2","ObjectName":"Trailer","SID":0,"Title":"TrailerDeleted."}</msg>
<msg timestamp="20200107 09:50:03.488" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:03.489" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:02.956" endtime="20200107 09:50:03.489"></status>
</kw>
<msg timestamp="20200107 09:50:03.489" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:03.489" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:02.952" endtime="20200107 09:50:03.489"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:50:03.492" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:50:03.493" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:03.493" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:03.492" endtime="20200107 09:50:03.493"></status>
</kw>
<doc>Verifies that created trailer is deleted</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrstrailerrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:50:02.949" endtime="20200107 09:50:03.494" critical="yes"></status>
</test>
<test id="s1-s1-s6-t17" name="Validate AWS XRS Get Trailers V2 REST Web Services For All Trailers Returns 200 OK">
<kw name="Get All Trailers V2" library="Trailer">
<doc>Get attributes for all trailers v2.</doc>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:03.498" level="TRACE">Arguments: [  ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Trailer}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_TRAILERS_V2}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:03.500" level="TRACE">Arguments: [ 'TrailerWebService.svc/v2/trailers' ]</msg>
<msg timestamp="20200107 09:50:03.500" level="TRACE">Return: 'TrailerWebService.svc/v2/trailers'</msg>
<msg timestamp="20200107 09:50:03.500" level="INFO">${uri} = TrailerWebService.svc/v2/trailers</msg>
<status status="PASS" starttime="20200107 09:50:03.498" endtime="20200107 09:50:03.500"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:03.501" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'TrailerWebService.svc/v2/trailers' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:50:03.501" level="INFO">GET Request using : uri=TrailerWebService.svc/v2/trailers, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:50:03.971" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /TrailerWebService.svc/v2/trailers HTTP/1.1" 200 1078</msg>
<msg timestamp="20200107 09:50:03.973" level="DEBUG">GET Response : status=200, reason=OK
[{"CompanyName":"Gnome Shipping D3","CreateDate":"\/Date(1562792228253-0700)\/","ModifiedBy":5412,"ModifiedDate":"\/Date(1562792228202-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","StateName":"Minnesota","Status":"Active","TrailerIdentity":"Default_Trailer","TrailerResourceGroupIDs":null,"TrailerType":"General","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","VIN":null,"Country":"USA","LicensePlate":"DEFTR123","Odometer":0,"SerialNumber":null},{"CompanyName":"Gnome Shipping D3","CreateDate":"\/Date(1537837317411-0700)\/","ModifiedBy":5412,"ModifiedDate":"\/Date(1537837317396-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","StateName":"Minnesota","Status":"Active","TrailerIdentity":"Troller1","TrailerResourceGroupIDs":null,"TrailerType":"General","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","VIN":null,"Country":"USA","LicensePlate":"Troller1","Odometer":0,"SerialNumber":null}]</msg>
<msg timestamp="20200107 09:50:03.974" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:03.974" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:03.500" endtime="20200107 09:50:03.974"></status>
</kw>
<msg timestamp="20200107 09:50:03.975" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:03.975" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:03.497" endtime="20200107 09:50:03.976"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:50:03.977" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:50:03.978" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:03.978" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:03.977" endtime="20200107 09:50:03.978"></status>
</kw>
<doc>Gets all the trailers</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrstrailerrestwebservicevalidation</tag>
<tag>xrsawsperftest</tag>
</tags>
<status status="PASS" starttime="20200107 09:50:03.496" endtime="20200107 09:50:03.979" critical="yes"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary" type="teardown">
<doc>Removes all the session objects</doc>
<msg timestamp="20200107 09:50:03.985" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200107 09:50:03.985" level="INFO">Delete All Sessions</msg>
<msg timestamp="20200107 09:50:03.985" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:03.985" endtime="20200107 09:50:03.986"></status>
</kw>
<doc>Fundamental suite to test XRS AWS Trailer Entity Management Web Services</doc>
<status status="PASS" starttime="20200107 09:49:52.602" endtime="20200107 09:50:03.986"></status>
</suite>
<suite id="s1-s1-s7" name="ValidateAWSXRSUserWebService" source="C:\Users\kstine\git\aws-api-gateway-tests\Tests\AWS_XRS_WebServicesTests\07__ValidateAWSXRSUserWebService.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Create AWS XRS Web Services Session</arg>
<arg>AND</arg>
<arg>Test Data Setup For XRS AWS User Web Service Test Suite</arg>
</arguments>
<msg timestamp="20200107 09:50:04.061" level="TRACE">Arguments: [ 'Create AWS XRS Web Services Session' | 'AND' | 'Test Data Setup For XRS AWS User Web Service Test Suite' ]</msg>
<kw name="Create AWS XRS Web Services Session" library="XRSCommonWebService">
<doc>Create a session with aws xrs web services</doc>
<msg timestamp="20200107 09:50:04.062" level="TRACE">Arguments: [  ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${XRS_AWS_WEBSERVICES_URL}[${XRS_HOST_ENVIRONMENT}]</arg>
<arg>verify=True</arg>
<arg>auth=${XRS_WEBSERVICES_AUTHORIZATION}</arg>
</arguments>
<msg timestamp="20200107 09:50:04.062" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'https://d3ws.xataxrs.com' | verify=True | auth=['GnomeShippingD3|admin', 'xrs123'] ]</msg>
<msg timestamp="20200107 09:50:04.063" level="INFO">Creating Session using : alias=xrs_web_service_session, url=https://d3ws.xataxrs.com, headers={},                     cookies={}, auth=&lt;requests.auth.HTTPBasicAuth object at 0x0000018E38C830A0&gt;, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<msg timestamp="20200107 09:50:04.063" level="DEBUG">Creating session: xrs_web_service_session</msg>
<msg timestamp="20200107 09:50:04.063" level="DEBUG">Argument types are:
&lt;class 'bool'&gt;</msg>
<msg timestamp="20200107 09:50:04.063" level="TRACE">Return: &lt;requests.sessions.Session object at 0x0000018E38C83D00&gt;</msg>
<status status="PASS" starttime="20200107 09:50:04.062" endtime="20200107 09:50:04.063"></status>
</kw>
<msg timestamp="20200107 09:50:04.063" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:04.062" endtime="20200107 09:50:04.063"></status>
</kw>
<kw name="Test Data Setup For XRS AWS User Web Service Test Suite">
<doc>Keyword for setting up suite variables for AWS User Web Service Tests.</doc>
<msg timestamp="20200107 09:50:04.063" level="TRACE">Arguments: [  ]</msg>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>AccountLocked=${XRS_WEB_SERVICES_TEST_USER.AccountLocked}</arg>
<arg>DashboardName=${XRS_WEB_SERVICES_TEST_USER.DashboardName}</arg>
<arg>Email=${XRS_WEB_SERVICES_TEST_USER.Email}</arg>
<arg>EncryptedPassword=${XRS_WEB_SERVICES_TEST_USER.EncryptedPassword}</arg>
<arg>FirstName=${XRS_WEB_SERVICES_TEST_USER.FirstName}</arg>
<arg>Language=${XRS_WEB_SERVICES_TEST_USER.Language}</arg>
<arg>LastName=${XRS_WEB_SERVICES_TEST_USER.LastName}</arg>
<arg>MiddleName=${XRS_WEB_SERVICES_TEST_USER.MiddleName}</arg>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>PasswordNeverExpires=${XRS_WEB_SERVICES_TEST_USER.PasswordNeverExpires}</arg>
<arg>Status=${XRS_WEB_SERVICES_TEST_USER.Status}</arg>
<arg>UserName=${XRS_WEB_SERVICES_TEST_USER.UserName}</arg>
<arg>UserRole=${XRS_WEB_SERVICES_TEST_USER.UserRole}</arg>
</arguments>
<assign>
<var>&amp;{XRS_AWS_WEBSERVICE_POST_TEST_USER_1_DICT}</var>
</assign>
<msg timestamp="20200107 09:50:04.063" level="TRACE">Arguments: [ 'AccountLocked=${XRS_WEB_SERVICES_TEST_USER.AccountLocked}' | 'DashboardName=${XRS_WEB_SERVICES_TEST_USER.DashboardName}' | 'Email=${XRS_WEB_SERVICES_TEST_USER.Email}' | 'EncryptedPassword=${XRS_WEB_SERVICES_TEST_USER.EncryptedPassword}' | 'FirstName=${XRS_WEB_SERVICES_TEST_USER.FirstName}' | 'Language=${XRS_WEB_SERVICES_TEST_USER.Language}' | 'LastName=${XRS_WEB_SERVICES_TEST_USER.LastName}' | 'MiddleName=${XRS_WEB_SERVICES_TEST_USER.MiddleName}' | 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'PasswordNeverExpires=${XRS_WEB_SERVICES_TEST_USER.PasswordNeverExpires}' | 'Status=${XRS_WEB_SERVICES_TEST_USER.Status}' | 'UserName=${XRS_WEB_SERVICES_TEST_USER.UserName}' | 'UserRole=${XRS_WEB_SERVICES_TEST_USER.UserRole}' ]</msg>
<msg timestamp="20200107 09:50:04.065" level="TRACE">Return: {'AccountLocked': False,
 'DashboardName': 'Fleet Performance Dashboard',
 'Email': 'xrsqatest+awsxrswstestuser@gmail.com',
 'EncryptedPassword': 'xrs123',
 'FirstName': 'AWSXRS',
 'Language': 'English',
 'LastName': 'Testuser1',
 'MiddleName': 'AWSXRSTest',
 'OrganizationID': 46663,
 'PasswordNeverExpires': False,
 'Status': 'Active',
 'UserName': 'awsxrstestuser1',
 'UserRole': 'Operations'}</msg>
<msg timestamp="20200107 09:50:04.065" level="INFO">&amp;{XRS_AWS_WEBSERVICE_POST_TEST_USER_1_DICT} = { AccountLocked=False | DashboardName=Fleet Performance Dashboard | Email=xrsqatest+awsxrswstestuser@gmail.com | EncryptedPassword=xrs123 | FirstName=AWSXRS | Language=English | LastName=Testuser1 | M...</msg>
<status status="PASS" starttime="20200107 09:50:04.063" endtime="20200107 09:50:04.065"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${XRS_AWS_WEBSERVICE_POST_TEST_USER_1_DICT}</arg>
</arguments>
<assign>
<var>@{XRS_AWS_WEBSERVICE_POST_TEST_USER_LIST}</var>
</assign>
<msg timestamp="20200107 09:50:04.065" level="TRACE">Arguments: [ {'AccountLocked': False,
 'DashboardName': 'Fleet Performance Dashboard',
 'Email': 'xrsqatest+awsxrswstestuser@gmail.com',
 'EncryptedPassword': 'xrs123',
 'FirstName': 'AWSXRS',
 'Language': 'English',
 'LastName': 'Testuser1',
 'MiddleName': 'AWSXRSTest',
 'OrganizationID': 46663,
 'PasswordNeverExpires': False,
 'Status': 'Active',
 'UserName': 'awsxrstestuser1',
 'UserRole': 'Operations'} ]</msg>
<msg timestamp="20200107 09:50:04.066" level="TRACE">Return: [{'AccountLocked': False,
  'DashboardName': 'Fleet Performance Dashboard',
  'Email': 'xrsqatest+awsxrswstestuser@gmail.com',
  'EncryptedPassword': 'xrs123',
  'FirstName': 'AWSXRS',
  'Language': 'English',
  'LastName': 'Testuser1',
  'MiddleName': 'AWSXRSTest',
  'OrganizationID': 46663,
  'PasswordNeverExpires': False,
  'Status': 'Active',
  'UserName': 'awsxrstestuser1',
  'UserRole': 'Operations'}]</msg>
<msg timestamp="20200107 09:50:04.066" level="INFO">@{XRS_AWS_WEBSERVICE_POST_TEST_USER_LIST} = [ {'AccountLocked': False, 'DashboardName': 'Fleet Performance Dashboard', 'Email': 'xrsqatest+awsxrswstestuser@gmail.com', 'EncryptedPassword': 'xrs123', 'FirstName': 'AWSXRS', 'Language': 'English',...</msg>
<status status="PASS" starttime="20200107 09:50:04.065" endtime="20200107 09:50:04.066"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_POST_TEST_USER_LIST}</arg>
</arguments>
<msg timestamp="20200107 09:50:04.066" level="TRACE">Arguments: [ '@{XRS_AWS_WEBSERVICE_POST_TEST_USER_LIST}' ]</msg>
<msg timestamp="20200107 09:50:04.066" level="INFO">@{XRS_AWS_WEBSERVICE_POST_TEST_USER_LIST} = [ {'AccountLocked': False, 'DashboardName': 'Fleet Performance Dashboard', 'Email': 'xrsqatest+awsxrswstestuser@gmail.com', 'EncryptedPassword': 'xrs123', 'FirstName': 'AWSXRS', 'Language': 'English',...</msg>
<msg timestamp="20200107 09:50:04.066" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:04.066" endtime="20200107 09:50:04.066"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>AccountLocked=${XRS_WEB_SERVICES_TEST_USER.AccountLocked}</arg>
<arg>DashboardName=${XRS_WEB_SERVICES_TEST_USER.DashboardName}</arg>
<arg>Email=${XRS_WEB_SERVICES_TEST_USER.Email}</arg>
<arg>EncryptedPassword=${XRS_WEB_SERVICES_TEST_USER.EncryptedPassword}</arg>
<arg>FirstName=${XRS_WEB_SERVICES_TEST_USER.FirstName}</arg>
<arg>Language=${XRS_WEB_SERVICES_TEST_USER.Language}</arg>
<arg>LastName=${XRS_WEB_SERVICES_TEST_USER.LastName}</arg>
<arg>MiddleName=${XRS_WEB_SERVICES_TEST_USER.MiddleName}modified</arg>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>PasswordNeverExpires=${XRS_WEB_SERVICES_TEST_USER.PasswordNeverExpires}</arg>
<arg>Status=${XRS_WEB_SERVICES_TEST_USER.Status}</arg>
<arg>UserName=${XRS_WEB_SERVICES_TEST_USER.UserName}</arg>
<arg>UserRole=${XRS_WEB_SERVICES_TEST_USER.UserRole}</arg>
</arguments>
<assign>
<var>&amp;{XRS_AWS_WEBSERVICE_PUT_TEST_USER_1_DICT}</var>
</assign>
<msg timestamp="20200107 09:50:04.066" level="TRACE">Arguments: [ 'AccountLocked=${XRS_WEB_SERVICES_TEST_USER.AccountLocked}' | 'DashboardName=${XRS_WEB_SERVICES_TEST_USER.DashboardName}' | 'Email=${XRS_WEB_SERVICES_TEST_USER.Email}' | 'EncryptedPassword=${XRS_WEB_SERVICES_TEST_USER.EncryptedPassword}' | 'FirstName=${XRS_WEB_SERVICES_TEST_USER.FirstName}' | 'Language=${XRS_WEB_SERVICES_TEST_USER.Language}' | 'LastName=${XRS_WEB_SERVICES_TEST_USER.LastName}' | 'MiddleName=${XRS_WEB_SERVICES_TEST_USER.MiddleName}modified' | 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'PasswordNeverExpires=${XRS_WEB_SERVICES_TEST_USER.PasswordNeverExpires}' | 'Status=${XRS_WEB_SERVICES_TEST_USER.Status}' | 'UserName=${XRS_WEB_SERVICES_TEST_USER.UserName}' | 'UserRole=${XRS_WEB_SERVICES_TEST_USER.UserRole}' ]</msg>
<msg timestamp="20200107 09:50:04.068" level="TRACE">Return: {'AccountLocked': False,
 'DashboardName': 'Fleet Performance Dashboard',
 'Email': 'xrsqatest+awsxrswstestuser@gmail.com',
 'EncryptedPassword': 'xrs123',
 'FirstName': 'AWSXRS',
 'Language': 'English',
 'LastName': 'Testuser1',
 'MiddleName': 'AWSXRSTestmodified',
 'OrganizationID': 46663,
 'PasswordNeverExpires': False,
 'Status': 'Active',
 'UserName': 'awsxrstestuser1',
 'UserRole': 'Operations'}</msg>
<msg timestamp="20200107 09:50:04.068" level="INFO">&amp;{XRS_AWS_WEBSERVICE_PUT_TEST_USER_1_DICT} = { AccountLocked=False | DashboardName=Fleet Performance Dashboard | Email=xrsqatest+awsxrswstestuser@gmail.com | EncryptedPassword=xrs123 | FirstName=AWSXRS | Language=English | LastName=Testuser1 | M...</msg>
<status status="PASS" starttime="20200107 09:50:04.066" endtime="20200107 09:50:04.068"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${XRS_AWS_WEBSERVICE_PUT_TEST_USER_1_DICT}</arg>
</arguments>
<assign>
<var>@{XRS_AWS_WEBSERVICE_PUT_TEST_USER_LIST}</var>
</assign>
<msg timestamp="20200107 09:50:04.068" level="TRACE">Arguments: [ {'AccountLocked': False,
 'DashboardName': 'Fleet Performance Dashboard',
 'Email': 'xrsqatest+awsxrswstestuser@gmail.com',
 'EncryptedPassword': 'xrs123',
 'FirstName': 'AWSXRS',
 'Language': 'English',
 'LastName': 'Testuser1',
 'MiddleName': 'AWSXRSTestmodified',
 'OrganizationID': 46663,
 'PasswordNeverExpires': False,
 'Status': 'Active',
 'UserName': 'awsxrstestuser1',
 'UserRole': 'Operations'} ]</msg>
<msg timestamp="20200107 09:50:04.069" level="TRACE">Return: [{'AccountLocked': False,
  'DashboardName': 'Fleet Performance Dashboard',
  'Email': 'xrsqatest+awsxrswstestuser@gmail.com',
  'EncryptedPassword': 'xrs123',
  'FirstName': 'AWSXRS',
  'Language': 'English',
  'LastName': 'Testuser1',
  'MiddleName': 'AWSXRSTestmodified',
  'OrganizationID': 46663,
  'PasswordNeverExpires': False,
  'Status': 'Active',
  'UserName': 'awsxrstestuser1',
  'UserRole': 'Operations'}]</msg>
<msg timestamp="20200107 09:50:04.069" level="INFO">@{XRS_AWS_WEBSERVICE_PUT_TEST_USER_LIST} = [ {'AccountLocked': False, 'DashboardName': 'Fleet Performance Dashboard', 'Email': 'xrsqatest+awsxrswstestuser@gmail.com', 'EncryptedPassword': 'xrs123', 'FirstName': 'AWSXRS', 'Language': 'English',...</msg>
<status status="PASS" starttime="20200107 09:50:04.068" endtime="20200107 09:50:04.069"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_PUT_TEST_USER_LIST}</arg>
</arguments>
<msg timestamp="20200107 09:50:04.069" level="TRACE">Arguments: [ '@{XRS_AWS_WEBSERVICE_PUT_TEST_USER_LIST}' ]</msg>
<msg timestamp="20200107 09:50:04.069" level="INFO">@{XRS_AWS_WEBSERVICE_PUT_TEST_USER_LIST} = [ {'AccountLocked': False, 'DashboardName': 'Fleet Performance Dashboard', 'Email': 'xrsqatest+awsxrswstestuser@gmail.com', 'EncryptedPassword': 'xrs123', 'FirstName': 'AWSXRS', 'Language': 'English',...</msg>
<msg timestamp="20200107 09:50:04.069" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:04.069" endtime="20200107 09:50:04.069"></status>
</kw>
<msg timestamp="20200107 09:50:04.069" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:04.063" endtime="20200107 09:50:04.069"></status>
</kw>
<msg timestamp="20200107 09:50:04.069" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:04.061" endtime="20200107 09:50:04.069"></status>
</kw>
<test id="s1-s1-s7-t1" name="Validate AWS XRS Get User REST Web Services Returns Geographic &quot;User does not exist.&quot; Error Message">
<kw name="Get User By ID" library="User">
<doc>Get attributes for a specific user by specifying a user id value.</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_USER.UserName}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:04.071" level="TRACE">Arguments: [ ${user_id}='awsxrstestuser1' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.User}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_USERS}/${user_id}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:04.071" level="TRACE">Arguments: [ 'UserWebService.svc/users/awsxrstestuser1' ]</msg>
<msg timestamp="20200107 09:50:04.071" level="TRACE">Return: 'UserWebService.svc/users/awsxrstestuser1'</msg>
<msg timestamp="20200107 09:50:04.071" level="INFO">${uri} = UserWebService.svc/users/awsxrstestuser1</msg>
<status status="PASS" starttime="20200107 09:50:04.071" endtime="20200107 09:50:04.071"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:04.071" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'UserWebService.svc/users/awsxrstestuser1' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:50:04.072" level="INFO">GET Request using : uri=UserWebService.svc/users/awsxrstestuser1, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:50:04.073" level="DEBUG">Starting new HTTPS connection (1): d3ws.xataxrs.com:443</msg>
<msg timestamp="20200107 09:50:05.037" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /UserWebService.svc/users/awsxrstestuser1 HTTP/1.1" 400 105</msg>
<msg timestamp="20200107 09:50:05.038" level="DEBUG">GET Response : status=400, reason=Bad Request
{"ErrorMessage":"User 'awsxrstestuser1' does not exist.","EventCode":3459890559756271616,"Parameters":[]}</msg>
<msg timestamp="20200107 09:50:05.038" level="TRACE">Return: &lt;Response [400]&gt;</msg>
<msg timestamp="20200107 09:50:05.038" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:04.071" endtime="20200107 09:50:05.038"></status>
</kw>
<msg timestamp="20200107 09:50:05.038" level="TRACE">Return: &lt;Response [400]&gt;</msg>
<msg timestamp="20200107 09:50:05.039" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:04.070" endtime="20200107 09:50:05.039"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20200107 09:50:05.040" level="TRACE">Arguments: [ b'{"ErrorMessage":"User \'awsxrstestuser1\' does not exist.","EventCode":3459890559756271616,"Parameters":[]}' ]</msg>
<msg timestamp="20200107 09:50:05.040" level="INFO">To JSON using : content={"ErrorMessage":"User 'awsxrstestuser1' does not exist.","EventCode":3459890559756271616,"Parameters":[]} </msg>
<msg timestamp="20200107 09:50:05.041" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20200107 09:50:05.041" level="TRACE">Return: {'ErrorMessage': "User 'awsxrstestuser1' does not exist.",
 'EventCode': 3459890559756271616,
 'Parameters': []}</msg>
<msg timestamp="20200107 09:50:05.041" level="INFO">${json_response} = {'ErrorMessage': "User 'awsxrstestuser1' does not exist.", 'EventCode': 3459890559756271616, 'Parameters': []}</msg>
<status status="PASS" starttime="20200107 09:50:05.040" endtime="20200107 09:50:05.041"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_response}[ErrorMessage]</arg>
<arg>User '${XRS_WEB_SERVICES_TEST_USER.UserName}' does not exist.</arg>
</arguments>
<msg timestamp="20200107 09:50:05.042" level="TRACE">Arguments: [ "User 'awsxrstestuser1' does not exist." | "User 'awsxrstestuser1' does not exist." ]</msg>
<msg timestamp="20200107 09:50:05.043" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:05.043" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:05.042" endtime="20200107 09:50:05.043"></status>
</kw>
<doc>Verifies that a User with a specific number does not exist</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrsuserrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:50:04.069" endtime="20200107 09:50:05.044" critical="yes"></status>
</test>
<test id="s1-s1-s7-t2" name="Validate AWS XRS Post User REST Web Services Returns Code 201">
<kw name="Post Users" library="User">
<doc>Calls the Post Method for Users.
Accepts a list of json objects
Json field definitions:
AccountLocked
Indicates if this user account is currently locked or unlocked.
AlertSubscriptionIDs
The list of Alerts to which this user is to be subscribed.
Changing this value is not allowed in the Put method call until a future release – it must be changed manually on the host website.
AlertSubscriptionsChanged
A read-only field indicating if the Alert Subscription field has changed since the AsOfDateTime query parameter value.
AllowedSingleSignOn
Indicates if single sign on is enable for this user.
BelongsToResourceGroups
Indicates the set of ResourceGroupIDs to which the user should belong.
NOTE: If a resource group is not provided in a Post call,
the new User is to be placed in the default resource group for the organization to which the new User is being added.
Changing this value is not allowed in the Put method call until a future release – it must be changed manuall on the host website.
BelongsToResourceGroupsChanged
A read-only field indicating if the BelongsToResourceGroup field has changed since the AsOfDateTime query parameter value.
CompanyName
The user defined name of the company.
CreateDate
A read-only field indicating the date and time the user object was created.
DashboardName
Inidicates which dashboard display will be presented to the user on the Omnitracs XRS dashboard when a user logs in.
Email
The email address for the user.
EmailIncomingDriverMessages
Indicates if messages from driver destined for this user will be emailed to the users email address.
EmailPassword
Indicates if the password provided in the Password field will be emailed to the user upon creation of the user.
EmailRejectedCount
A read-only field indicating the count of the number of unsuccessful attempts to email the password
to the user at the specified email address in the Email field.
EmailVerificationExpirationDate
A read-only field indicating
EmailVerificationKey
Is this needed to decrypt provided password when calling Get method?
EmailVerified
Indicates the email address has been verified by Omnitracs XRS.
EncryptedPassword
This field does not need to be encrypted by the caller in a post or put.
The Omnitracs XRS system encrypts it for the user as a part of the post/put method execution.
This field IS is encrypted in the returns from the Get method.
FirstName
The first name of the user.
Language
The language used to present information to the user in the Omnitracs XRS.
LastLogin
The date and time of the last time this user logged in to Omnitracs XRS.
LastName
The last name of the user.
MiddleName
The middle name of the user.
ModifiedBy
A read-only field indicating the user ID of the last person to modify the user record.
ModifiedDate
A read-only field indicating the date the user record was last modified.
OrganizationID
The user-defined ID of the organization in which the user is located.
OrganizationName
The user defined name of the organization in which the user is located.
PasswordNeverExpires
Indicates if the password can expire.
ScheduleReportSubscriptions
A comman separated list of Schedule Report IDs to which the user is subscribed.
Changing this value is not allowed in the Put method call until a future release – it must be changed manually on the Omnitracs XRS website.
ScheduledReportSubscriptionsChanged
A read-only field indicating if the ScheduledReportSubscriptions field has changed since the AsOfDateTime query parameter value.
SendAlertsToEmail
Indicates if alerts to which the user has subscribed will be sent to that users email address.
SendAlertsToMessageInbox
Indicates if alerts to which the user has subscribed will be sent to that users message inbox.
Status
Identifies if a user is active or inactive in Omnitracs XRS. The value of this field must be Active or Inactive.
UserDefinedField1
User-defined field #1
UserDefinedField2
User-defined field #2
UserDefinedField3
User-defined field #3
UserDefinedField4
User-defined field #4
UserDefinedField5
User-defined field #5
UserName
The name the user will use to log into Omnitracs XRS.
UserRole
The role to which the user has been assigned.</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_POST_TEST_USER_LIST}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:05.050" level="TRACE">Arguments: [ @{list_data}=[{'AccountLocked': False,
  'DashboardName': 'Fleet Performance Dashboard',
  'Email': 'xrsqatest+awsxrswstestuser@gmail.com',
  'EncryptedPassword': 'xrs123',
  'FirstName': 'AWSXRS',
  'Language': 'English',
  'LastName': 'Testuser1',
  'MiddleName': 'AWSXRSTest',
  'OrganizationID': 46663,
  'PasswordNeverExpires': False,
  'Status': 'Active',
  'UserName': 'awsxrstestuser1',
  'UserRole': 'Operations'}] ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.User}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_USERS}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:05.052" level="TRACE">Arguments: [ 'UserWebService.svc/users' ]</msg>
<msg timestamp="20200107 09:50:05.052" level="TRACE">Return: 'UserWebService.svc/users'</msg>
<msg timestamp="20200107 09:50:05.052" level="INFO">${uri} = UserWebService.svc/users</msg>
<status status="PASS" starttime="20200107 09:50:05.051" endtime="20200107 09:50:05.052"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>json=${list_data}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:05.053" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'UserWebService.svc/users' | json=[{'AccountLocked': False,
  'DashboardName': 'Fleet Performance Dashboard',
  'Email': 'xrsqatest+awsxrswstestuser@gmail.com',
  'EncryptedPassword': 'xrs123',
  'FirstName': 'AWSXRS',
  'Language': 'English',
  'LastName': 'Testuser1',
  'MiddleName': 'AWSXRSTest',
  'OrganizationID': 46663,
  'PasswordNeverExpires': False,
  'Status': 'Active',
  'UserName': 'awsxrstestuser1',
  'UserRole': 'Operations'}] | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:50:05.054" level="INFO">POST Request using : uri=UserWebService.svc/users, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=[{'AccountLocked': False, 'DashboardName': 'Fleet Performance Dashboard', 'Email': 'xrsqatest+awsxrswstestuser@gmail.com', 'EncryptedPassword': 'xrs123', 'FirstName': 'AWSXRS', 'Language': 'English', 'LastName': 'Testuser1', 'MiddleName': 'AWSXRSTest', 'OrganizationID': 46663, 'PasswordNeverExpires': False, 'Status': 'Active', 'UserName': 'awsxrstestuser1', 'UserRole': 'Operations'}]</msg>
<msg timestamp="20200107 09:50:05.874" level="DEBUG">https://d3ws.xataxrs.com:443 "POST /UserWebService.svc/users HTTP/1.1" 200 168</msg>
<msg timestamp="20200107 09:50:05.875" level="DEBUG">POST Response : status=200, reason=OK
[{"Caption":"Created","Code":"201","Description":"User Added Successfully.","Id":"awsxrstestuser1","ObjectName":"CustomerUser","SID":5742,"Title":"CustomerUserAdded."}]</msg>
<msg timestamp="20200107 09:50:05.875" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:05.877" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:05.052" endtime="20200107 09:50:05.877"></status>
</kw>
<msg timestamp="20200107 09:50:05.877" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:05.877" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:05.050" endtime="20200107 09:50:05.877"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20200107 09:50:05.878" level="TRACE">Arguments: [ b'[{"Caption":"Created","Code":"201","Description":"User Added Successfully.","Id":"awsxrstestuser1","ObjectName":"CustomerUser","SID":5742,"Title":"CustomerUserAdded."}]' ]</msg>
<msg timestamp="20200107 09:50:05.878" level="INFO">To JSON using : content=[{"Caption":"Created","Code":"201","Description":"User Added Successfully.","Id":"awsxrstestuser1","ObjectName":"CustomerUser","SID":5742,"Title":"CustomerUserAdded."}] </msg>
<msg timestamp="20200107 09:50:05.878" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20200107 09:50:05.878" level="TRACE">Return: [{'Caption': 'Created',
  'Code': '201',
  'Description': 'User Added Successfully.',
  'Id': 'awsxrstestuser1',
  'ObjectName': 'CustomerUser',
  'SID': 5742,
  'Title': 'CustomerUserAdded.'}]</msg>
<msg timestamp="20200107 09:50:05.879" level="INFO">${json_response} = [{'Caption': 'Created', 'Code': '201', 'Description': 'User Added Successfully.', 'Id': 'awsxrstestuser1', 'ObjectName': 'CustomerUser', 'SID': 5742, 'Title': 'CustomerUserAdded.'}]</msg>
<status status="PASS" starttime="20200107 09:50:05.877" endtime="20200107 09:50:05.879"></status>
</kw>
<kw name="${r} IN [ @{json_response} ]" type="for">
<kw name="${r} = {'Caption': 'Created', 'Code': '201', 'Description': 'User Added Successfully.', 'Id': 'awsxrstestuser1', 'ObjectName': 'CustomerUser', 'SID': 5742, 'Title': 'CustomerUserAdded.'}" type="foritem">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${r}[Code]</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20200107 09:50:05.881" level="TRACE">Arguments: [ '201' | '201' ]</msg>
<msg timestamp="20200107 09:50:05.881" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:05.881" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:05.881" endtime="20200107 09:50:05.881"></status>
</kw>
<status status="PASS" starttime="20200107 09:50:05.880" endtime="20200107 09:50:05.881"></status>
</kw>
<status status="PASS" starttime="20200107 09:50:05.880" endtime="20200107 09:50:05.882"></status>
</kw>
<doc>Posts a User and expects a Code value of 201</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrsuserrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:50:05.047" endtime="20200107 09:50:05.883" critical="yes"></status>
</test>
<test id="s1-s1-s7-t3" name="Validate AWS XRS Get User REST Web Services Returns 200 OK">
<kw name="Get User By ID" library="User">
<doc>Get attributes for a specific user by specifying a user id value.</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_USER.UserName}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:05.889" level="TRACE">Arguments: [ ${user_id}='awsxrstestuser1' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.User}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_USERS}/${user_id}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:05.890" level="TRACE">Arguments: [ 'UserWebService.svc/users/awsxrstestuser1' ]</msg>
<msg timestamp="20200107 09:50:05.890" level="TRACE">Return: 'UserWebService.svc/users/awsxrstestuser1'</msg>
<msg timestamp="20200107 09:50:05.890" level="INFO">${uri} = UserWebService.svc/users/awsxrstestuser1</msg>
<status status="PASS" starttime="20200107 09:50:05.889" endtime="20200107 09:50:05.890"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:05.891" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'UserWebService.svc/users/awsxrstestuser1' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:50:05.891" level="INFO">GET Request using : uri=UserWebService.svc/users/awsxrstestuser1, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:50:06.385" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /UserWebService.svc/users/awsxrstestuser1 HTTP/1.1" 200 1238</msg>
<msg timestamp="20200107 09:50:06.387" level="DEBUG">GET Response : status=200, reason=OK
{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"1\/7\/2020 3:49:37 PM","DashboardName":"Fleet Performance Dashboard","Email":"xrsqatest+awsxrswstestuser@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"2\/7\/2020 3:49:37 PM","EmailVerificationKey":"81877d93-3da1-4f22-ad59-4c9fee779fce","EmailVerified":"False","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"AWSXRS","Language":"English","LastLogin":"","LastName":"Testuser1","MiddleName":"AWSXRSTest","ModifiedBy":"5412","ModifiedDate":"1\/7\/2020 3:50:06 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"False","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"False","SendAlertsToMessageInbox":"False","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"awsxrstestuser1","UserRole":"Operations"}</msg>
<msg timestamp="20200107 09:50:06.387" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:06.388" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:05.890" endtime="20200107 09:50:06.388"></status>
</kw>
<msg timestamp="20200107 09:50:06.389" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:06.389" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:05.888" endtime="20200107 09:50:06.389"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:50:06.392" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:50:06.393" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:06.393" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:06.391" endtime="20200107 09:50:06.394"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20200107 09:50:06.403" level="TRACE">Arguments: [ b'{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"1\\/7\\/2020 3:49:37 PM","DashboardName":"Fleet Performance Dashboard","Email":"xrsqatest+awsxrswstestuser@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"2\\/7\\/2020 3:49:37 PM","EmailVerificationKey":"81877d93-3da1-4f22-ad59-4c9fee779fce","EmailVerified":"False","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"AWSXRS","Language":"English","LastLogin":"","LastName":"Testuser1","MiddleName":"AWSXRSTest","ModifiedBy":"5412","ModifiedDate":"1\\/7\\/2020 3:50:06 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"False","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"False","SendAlertsToMessageInbox":"False","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"awsxrstestuser1","UserRole":"Operations"}' ]</msg>
<msg timestamp="20200107 09:50:06.403" level="INFO">To JSON using : content={"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"1\/7\/2020 3:49:37 PM","DashboardName":"Fleet Performance Dashboard","Email":"xrsqatest+awsxrswstestuser@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"2\/7\/2020 3:49:37 PM","EmailVerificationKey":"81877d93-3da1-4f22-ad59-4c9fee779fce","EmailVerified":"False","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"AWSXRS","Language":"English","LastLogin":"","LastName":"Testuser1","MiddleName":"AWSXRSTest","ModifiedBy":"5412","ModifiedDate":"1\/7\/2020 3:50:06 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"False","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"False","SendAlertsToMessageInbox":"False","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"awsxrstestuser1","UserRole":"Operations"} </msg>
<msg timestamp="20200107 09:50:06.404" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20200107 09:50:06.404" level="TRACE">Return: {'AccountLocked': 'False',
 'AlertSubscriptionIds': [],
 'AlertSubscriptionsChanged': 'False',
 'AllowedSingleSignOn': 'False',
 'BelongsToResourceGroups': ['Gnome Shipping D3'],
 'BelongsToResourceGroupsChanged': 'False',
 'CompanyName': 'Gnome Shipping D3',
 'CreateDate': '1/7/2020 3:49:37 PM',
 'DashboardName': 'Fleet Performance Dashboard',
 'Email': 'xrsqatest+awsxrswstestuser@gmail.com',
 'EmailIncomingDriverMessages': 'False',
 'EmailPassword': '',
 'EmailRejectedCount': '0',
 'EmailVerificationExpirationDate': '2/7/2020 3:49:37 PM',
 'EmailVerificationKey': '81877d93-3da1-4f22-ad59-4c9fee779fce',
 'EmailVerified': 'False',
 'EncryptedPassword': '1AC41640A3A216BA585C739601A923D',
 'FirstName': 'AWSXRS',
 'Language': 'English',
 'LastLogin': '',
 'LastName': 'Testuser1',
 'MiddleName': 'AWSXRSTest',
 'ModifiedBy': '5412',
 'ModifiedDate': '1/7/2020 3:50:06 PM',
 'OrganizationID': '46663',
 'OrganizationName': 'Gnome Shipping D3',
 'PasswordNeverExpires': 'False',
 'ScheduleReportSubscriptions': [],
 'ScheduledReportSubscriptionsChanged': 'False',
 'SendAlertsToEmail': 'False',
 'SendAlertsToMessageInbox': 'False',
 'Status': 'Active',
 'UserDefinedField1': '',
 'UserDefinedField2': '',
 'UserDefinedField3': '',
 'UserDefinedField4': '',
 'UserDefinedField5': '',
 'UserName': 'awsxrstestuser1',
 'UserRole': 'Operations'}</msg>
<msg timestamp="20200107 09:50:06.405" level="INFO">${json_response} = {'AccountLocked': 'False', 'AlertSubscriptionIds': [], 'AlertSubscriptionsChanged': 'False', 'AllowedSingleSignOn': 'False', 'BelongsToResourceGroups': ['Gnome Shipping D3'], 'BelongsToResourceGroupsC...</msg>
<status status="PASS" starttime="20200107 09:50:06.402" endtime="20200107 09:50:06.405"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${json_response}[UserName]</arg>
</arguments>
<assign>
<var>${XRS_WEB_SERVICES_TEST_USER_SID}</var>
</assign>
<msg timestamp="20200107 09:50:06.407" level="TRACE">Arguments: [ 'awsxrstestuser1' ]</msg>
<msg timestamp="20200107 09:50:06.407" level="TRACE">Return: 'awsxrstestuser1'</msg>
<msg timestamp="20200107 09:50:06.407" level="INFO">${XRS_WEB_SERVICES_TEST_USER_SID} = awsxrstestuser1</msg>
<status status="PASS" starttime="20200107 09:50:06.406" endtime="20200107 09:50:06.407"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_USER_SID}</arg>
</arguments>
<msg timestamp="20200107 09:50:06.408" level="TRACE">Arguments: [ '${XRS_WEB_SERVICES_TEST_USER_SID}' ]</msg>
<msg timestamp="20200107 09:50:06.409" level="INFO">${XRS_WEB_SERVICES_TEST_USER_SID} = awsxrstestuser1</msg>
<msg timestamp="20200107 09:50:06.409" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:06.408" endtime="20200107 09:50:06.409"></status>
</kw>
<doc>Verifies that a posted User now exists</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrsuserrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:50:05.886" endtime="20200107 09:50:06.410" critical="yes"></status>
</test>
<test id="s1-s1-s7-t4" name="Validate AWS XRS Put User REST Web Services Modifies User Successfully">
<kw name="Put Users" library="User">
<doc>Calls the Post Method for Userss.
Accepts a list of json objects
See Json field definitions in the "Post Users" Keyword</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_PUT_TEST_USER_LIST}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:06.415" level="TRACE">Arguments: [ @{list_data}=[{'AccountLocked': False,
  'DashboardName': 'Fleet Performance Dashboard',
  'Email': 'xrsqatest+awsxrswstestuser@gmail.com',
  'EncryptedPassword': 'xrs123',
  'FirstName': 'AWSXRS',
  'Language': 'English',
  'LastName': 'Testuser1',
  'MiddleName': 'AWSXRSTestmodified',
  'OrganizationID': 46663,
  'PasswordNeverExpires': False,
  'Status': 'Active',
  'UserName': 'awsxrstestuser1',
  'UserRole': 'Operations'}] ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.User}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_USERS}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:06.416" level="TRACE">Arguments: [ 'UserWebService.svc/users' ]</msg>
<msg timestamp="20200107 09:50:06.416" level="TRACE">Return: 'UserWebService.svc/users'</msg>
<msg timestamp="20200107 09:50:06.416" level="INFO">${uri} = UserWebService.svc/users</msg>
<status status="PASS" starttime="20200107 09:50:06.415" endtime="20200107 09:50:06.416"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary">
<doc>Send a PUT request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>json=${list_data}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:06.417" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'UserWebService.svc/users' | json=[{'AccountLocked': False,
  'DashboardName': 'Fleet Performance Dashboard',
  'Email': 'xrsqatest+awsxrswstestuser@gmail.com',
  'EncryptedPassword': 'xrs123',
  'FirstName': 'AWSXRS',
  'Language': 'English',
  'LastName': 'Testuser1',
  'MiddleName': 'AWSXRSTestmodified',
  'OrganizationID': 46663,
  'PasswordNeverExpires': False,
  'Status': 'Active',
  'UserName': 'awsxrstestuser1',
  'UserRole': 'Operations'}] | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:50:06.417" level="INFO">PUT Request using : uri=UserWebService.svc/users, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=[{'AccountLocked': False, 'DashboardName': 'Fleet Performance Dashboard', 'Email': 'xrsqatest+awsxrswstestuser@gmail.com', 'EncryptedPassword': 'xrs123', 'FirstName': 'AWSXRS', 'Language': 'English', 'LastName': 'Testuser1', 'MiddleName': 'AWSXRSTestmodified', 'OrganizationID': 46663, 'PasswordNeverExpires': False, 'Status': 'Active', 'UserName': 'awsxrstestuser1', 'UserRole': 'Operations'}]</msg>
<msg timestamp="20200107 09:50:06.862" level="DEBUG">https://d3ws.xataxrs.com:443 "PUT /UserWebService.svc/users HTTP/1.1" 500 87</msg>
<msg timestamp="20200107 09:50:06.864" level="DEBUG">PUT Response : status=500, reason=Internal Server Error
{"ErrorMessage":"InternalServerError","EventCode":283797282975907840,"Parameters":null}</msg>
<msg timestamp="20200107 09:50:06.864" level="TRACE">Return: &lt;Response [500]&gt;</msg>
<msg timestamp="20200107 09:50:06.864" level="INFO">${response} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:06.416" endtime="20200107 09:50:06.865"></status>
</kw>
<msg timestamp="20200107 09:50:06.865" level="TRACE">Return: &lt;Response [500]&gt;</msg>
<msg timestamp="20200107 09:50:06.866" level="INFO">${response} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:06.414" endtime="20200107 09:50:06.866"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20200107 09:50:06.870" level="TRACE">Arguments: [ b'{"ErrorMessage":"InternalServerError","EventCode":283797282975907840,"Parameters":null}' ]</msg>
<msg timestamp="20200107 09:50:06.871" level="INFO">To JSON using : content={"ErrorMessage":"InternalServerError","EventCode":283797282975907840,"Parameters":null} </msg>
<msg timestamp="20200107 09:50:06.871" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20200107 09:50:06.871" level="TRACE">Return: {'ErrorMessage': 'InternalServerError',
 'EventCode': 283797282975907840,
 'Parameters': None}</msg>
<msg timestamp="20200107 09:50:06.872" level="INFO">${json_response} = {'ErrorMessage': 'InternalServerError', 'EventCode': 283797282975907840, 'Parameters': None}</msg>
<status status="PASS" starttime="20200107 09:50:06.869" endtime="20200107 09:50:06.872"></status>
</kw>
<kw name="${r} IN [ @{json_response} ]" type="for">
<kw name="${r} = ErrorMessage" type="foritem">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${r}[Description]</arg>
<arg>Geographic User edited successfully.</arg>
</arguments>
<msg timestamp="20200107 09:50:06.875" level="FAIL">Variable '${r}' is string, not list or dictionary, and thus accessing item 'Description' from it is not possible.</msg>
<status status="FAIL" starttime="20200107 09:50:06.874" endtime="20200107 09:50:06.875"></status>
</kw>
<status status="FAIL" starttime="20200107 09:50:06.874" endtime="20200107 09:50:06.875"></status>
</kw>
<status status="FAIL" starttime="20200107 09:50:06.873" endtime="20200107 09:50:06.876"></status>
</kw>
<doc>Posts a User and expects a Code value of 201</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrsuserrestwebservicevalidation</tag>
</tags>
<status status="FAIL" starttime="20200107 09:50:06.413" endtime="20200107 09:50:06.877" critical="yes">Variable '${r}' is string, not list or dictionary, and thus accessing item 'Description' from it is not possible.</status>
</test>
<test id="s1-s1-s7-t5" name="Validate AWS XRS Get Users REST Web Services Returns 200 OK">
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:50:06.883" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:50:06.883" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:50:06.883" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:50:06.883" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:50:06.883" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:50:06.883" endtime="20200107 09:50:06.883"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:50:06.885" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:50:06.886" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20200107 09:50:06.886" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:50:06.884" endtime="20200107 09:50:06.886"></status>
</kw>
<kw name="Verify Get Users With Forward Slash Returns 200 OK">
<doc>Verify that using a '/' in the URI returns 200 OK</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<msg timestamp="20200107 09:50:06.888" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/</arg>
</arguments>
<assign>
<var>${ending_character}</var>
</assign>
<msg timestamp="20200107 09:50:06.889" level="TRACE">Arguments: [ '/' ]</msg>
<msg timestamp="20200107 09:50:06.889" level="TRACE">Return: '/'</msg>
<msg timestamp="20200107 09:50:06.889" level="INFO">${ending_character} = /</msg>
<status status="PASS" starttime="20200107 09:50:06.889" endtime="20200107 09:50:06.889"></status>
</kw>
<kw name="Get Users With URI Ending With ${ending_character} And Parameters &amp;{params}" library="User">
<doc>This Keyword modifies character between the base uri and the parameters
This will get users that match the provided parameters.
Params can be named individually or within a Dictionary
See the Get Users Keyword for param definitions.</doc>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:06.889" level="TRACE">Arguments: [ ${ending_character}='/' | ${params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.User}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_USERS}${ending_character}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:06.890" level="TRACE">Arguments: [ 'UserWebService.svc/users/' ]</msg>
<msg timestamp="20200107 09:50:06.890" level="TRACE">Return: 'UserWebService.svc/users/'</msg>
<msg timestamp="20200107 09:50:06.890" level="INFO">${uri} = UserWebService.svc/users/</msg>
<status status="PASS" starttime="20200107 09:50:06.890" endtime="20200107 09:50:06.890"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:06.891" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'UserWebService.svc/users/' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} | params={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<msg timestamp="20200107 09:50:06.891" level="INFO">GET Request using : uri=UserWebService.svc/users/, params={'OrganizationID': 46663, 'IsActive': 'True', 'AsOfDateTime': '01/07/2020'}, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:50:08.085" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /UserWebService.svc/users/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01%2F07%2F2020 HTTP/1.1" 200 12258</msg>
<msg timestamp="20200107 09:50:08.088" level="DEBUG">GET Response : status=200, reason=OK
[{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"1\/2\/2020 8:04:29 PM","DashboardName":"None","Email":"beer@xata.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"2\/2\/2020 8:04:29 PM","EmailVerificationKey":"c5b1fd3b-b2dd-4e3f-81ab-c2d8d27920b2","EmailVerified":"False","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"super","Language":"English","LastLogin":"","LastName":"beer","MiddleName":"book","ModifiedBy":"5412","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"False","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"False","SendAlertsToMessageInbox":"False","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"beer","UserRole":"Operations"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:00:25 PM","DashboardName":"Fleet Performance Dashboard","Email":"kstine@omnitracs.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:07:40 PM","EmailVerificationKey":"74960095-87c9-4d6c-8c6c-574f22f23c28","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"Kelby","Language":"English","LastLogin":"12\/11\/2019 4:31:57 PM","LastName":"Stine","MiddleName":"","ModifiedBy":"5685","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"kstine","UserRole":"Admin"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:14:32 PM","DashboardName":"Fleet Performance Dashboard","Email":"xrsqatest+readOnlyUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:14:32 PM","EmailVerificationKey":"70ad7b46-9515-4d9f-9b86-96275a78441e","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"ReadOnly","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5686","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"readOnlyUser","UserRole":"Read Only"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:19:01 PM","DashboardName":"Fleet Performance Dashboard","Email":"xrsqatest+maintenanceUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:19:01 PM","EmailVerificationKey":"8d13d3ae-8c1f-46ec-8439-c971e65d8656","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"Maintenance","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5689","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"maintenanceUser","UserRole":"Maintenance"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:17:27 PM","DashboardName":"Fleet Performance Dashboard","Email":"xrsqatest+operationsUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:17:27 PM","EmailVerificationKey":"ac79b4fe-a939-4df8-ad1a-38334e3ac3c4","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"Operations","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5688","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"operationsUser","UserRole":"Operations"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:26:11 PM","DashboardName":"Fleet Performance Dashboard","Email":"xrsqatest+mobileInstUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:27:31 PM","EmailVerificationKey":"0d47d688-442f-423d-886c-2d5b521673b2","EmailVerified":"False","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"MobileInstaller","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5685","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"mobileInstallerUser","UserRole":"Admin"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:16:01 PM","DashboardName":"Fleet Performance Dashboard","Email":"xrsqatest+dispatchUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:16:01 PM","EmailVerificationKey":"73d32aad-bcf3-4fbd-8c42-21b10ab209fd","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"Dispatch","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5687","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"dispatchUser","UserRole":"Dispatch"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:20:39 PM","DashboardName":"None","Email":"xrsqatest+fleetviewUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:20:39 PM","EmailVerificationKey":"0513d7fa-debc-4eb6-8188-30f0c07da3e0","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"Fleetview","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5690","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"fleetviewUser","UserRole":"FleetView"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"9\/24\/2018 3:35:34 PM","DashboardName":"None","Email":"xrsqatest+adminGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"1\/19\/2020 3:58:09 PM","EmailVerificationKey":"2147eb81-f470-492e-8204-c3a0f3aa2db3","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"admin","Language":"English","LastLogin":"1\/7\/2020 3:35:37 PM","LastName":"admin","MiddleName":"Automation","ModifiedBy":"5412","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"admin","UserRole":"Admin"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"2\/12\/2019 10:12:27 PM","DashboardName":"None","Email":"ann2344@xata.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"3\/12\/2019 10:12:27 PM","EmailVerificationKey":"034b4ad6-41ca-4ff1-b57c-04b07ff914b3","EmailVerified":"False","EncryptedPassword":"6B7330782B2FEB49242CC4A57782A9","FirstName":"ann","Language":"English","LastLogin":"2\/12\/2019 10:12:53 PM","LastName":"j","MiddleName":"","ModifiedBy":"5522","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"False","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"annj","UserRole":"Admin"}]</msg>
<msg timestamp="20200107 09:50:08.089" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:08.089" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:06.891" endtime="20200107 09:50:08.090"></status>
</kw>
<msg timestamp="20200107 09:50:08.090" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:08.091" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:06.889" endtime="20200107 09:50:08.091"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:50:08.093" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:50:08.094" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:08.095" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:08.092" endtime="20200107 09:50:08.095"></status>
</kw>
<msg timestamp="20200107 09:50:08.095" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:06.888" endtime="20200107 09:50:08.096"></status>
</kw>
<kw name="Verify Get Users Without Forward Slash Returns 200 OK">
<doc>Verify that not using a '/' in the URI returns 200 OK</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<msg timestamp="20200107 09:50:08.097" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Get Users" library="User">
<doc>Call the Get Method on users.
This will get users that match the provided parameters.
Params can be named individually or within a Dictionary
Param Definitions:
AsOfDateTime
Tells the service to return only the data that changed since the specified date and time.
IsActive
Filters results to active users only.
True, False, Both
Limit
Used in conjunction with the Offset parameter to implement paging.
Limits the number of results to a specified number.
System Limit: 10,000
Offset
Used in conjunction with the Limit parameter to implement paging.
Represents a page number for the starting point of the return set.
OrganizationID
Limits results to users in one or more organizations.
Maximum of 20 characters.
PhoneNumber
The following values can be specified:
[No Filter] - Limits results to all user records within the Web Service users' OrganizationID and ResourceGroupID.
10 character phone number - Limits results to the user record within the Web Service users' OrganizationID and ResourceGroupID
Example value: 1234567890
ResourceGroupID
Limits results to users in one or more resource groups.
UserID
Limits the results to the user object with the specified userID in the Web Service user's OrganizationID and ResourceGroupID.
Maximum of 20 characters.</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:08.099" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.User}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_USERS}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:08.100" level="TRACE">Arguments: [ 'UserWebService.svc/users' ]</msg>
<msg timestamp="20200107 09:50:08.100" level="TRACE">Return: 'UserWebService.svc/users'</msg>
<msg timestamp="20200107 09:50:08.101" level="INFO">${uri} = UserWebService.svc/users</msg>
<status status="PASS" starttime="20200107 09:50:08.100" endtime="20200107 09:50:08.101"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:08.101" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'UserWebService.svc/users' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} | params={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<msg timestamp="20200107 09:50:08.102" level="INFO">GET Request using : uri=UserWebService.svc/users, params={'OrganizationID': 46663, 'IsActive': 'True', 'AsOfDateTime': '01/07/2020'}, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:50:09.140" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /UserWebService.svc/users?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01%2F07%2F2020 HTTP/1.1" 200 12258</msg>
<msg timestamp="20200107 09:50:09.141" level="DEBUG">GET Response : status=200, reason=OK
[{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"1\/2\/2020 8:04:29 PM","DashboardName":"None","Email":"beer@xata.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"2\/2\/2020 8:04:29 PM","EmailVerificationKey":"c5b1fd3b-b2dd-4e3f-81ab-c2d8d27920b2","EmailVerified":"False","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"super","Language":"English","LastLogin":"","LastName":"beer","MiddleName":"book","ModifiedBy":"5412","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"False","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"False","SendAlertsToMessageInbox":"False","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"beer","UserRole":"Operations"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:00:25 PM","DashboardName":"Fleet Performance Dashboard","Email":"kstine@omnitracs.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:07:40 PM","EmailVerificationKey":"74960095-87c9-4d6c-8c6c-574f22f23c28","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"Kelby","Language":"English","LastLogin":"12\/11\/2019 4:31:57 PM","LastName":"Stine","MiddleName":"","ModifiedBy":"5685","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"kstine","UserRole":"Admin"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:14:32 PM","DashboardName":"Fleet Performance Dashboard","Email":"xrsqatest+readOnlyUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:14:32 PM","EmailVerificationKey":"70ad7b46-9515-4d9f-9b86-96275a78441e","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"ReadOnly","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5686","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"readOnlyUser","UserRole":"Read Only"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:19:01 PM","DashboardName":"Fleet Performance Dashboard","Email":"xrsqatest+maintenanceUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:19:01 PM","EmailVerificationKey":"8d13d3ae-8c1f-46ec-8439-c971e65d8656","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"Maintenance","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5689","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"maintenanceUser","UserRole":"Maintenance"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:17:27 PM","DashboardName":"Fleet Performance Dashboard","Email":"xrsqatest+operationsUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:17:27 PM","EmailVerificationKey":"ac79b4fe-a939-4df8-ad1a-38334e3ac3c4","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"Operations","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5688","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"operationsUser","UserRole":"Operations"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:26:11 PM","DashboardName":"Fleet Performance Dashboard","Email":"xrsqatest+mobileInstUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:27:31 PM","EmailVerificationKey":"0d47d688-442f-423d-886c-2d5b521673b2","EmailVerified":"False","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"MobileInstaller","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5685","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"mobileInstallerUser","UserRole":"Admin"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:16:01 PM","DashboardName":"Fleet Performance Dashboard","Email":"xrsqatest+dispatchUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:16:01 PM","EmailVerificationKey":"73d32aad-bcf3-4fbd-8c42-21b10ab209fd","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"Dispatch","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5687","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"dispatchUser","UserRole":"Dispatch"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:20:39 PM","DashboardName":"None","Email":"xrsqatest+fleetviewUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:20:39 PM","EmailVerificationKey":"0513d7fa-debc-4eb6-8188-30f0c07da3e0","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"Fleetview","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5690","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"fleetviewUser","UserRole":"FleetView"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"9\/24\/2018 3:35:34 PM","DashboardName":"None","Email":"xrsqatest+adminGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"1\/19\/2020 3:58:09 PM","EmailVerificationKey":"2147eb81-f470-492e-8204-c3a0f3aa2db3","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"admin","Language":"English","LastLogin":"1\/7\/2020 3:35:37 PM","LastName":"admin","MiddleName":"Automation","ModifiedBy":"5412","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"admin","UserRole":"Admin"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"2\/12\/2019 10:12:27 PM","DashboardName":"None","Email":"ann2344@xata.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"3\/12\/2019 10:12:27 PM","EmailVerificationKey":"034b4ad6-41ca-4ff1-b57c-04b07ff914b3","EmailVerified":"False","EncryptedPassword":"6B7330782B2FEB49242CC4A57782A9","FirstName":"ann","Language":"English","LastLogin":"2\/12\/2019 10:12:53 PM","LastName":"j","MiddleName":"","ModifiedBy":"5522","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"False","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"annj","UserRole":"Admin"}]</msg>
<msg timestamp="20200107 09:50:09.141" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:09.141" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:08.101" endtime="20200107 09:50:09.141"></status>
</kw>
<msg timestamp="20200107 09:50:09.141" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:09.141" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:08.098" endtime="20200107 09:50:09.141"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:50:09.142" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:50:09.142" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:09.142" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:09.142" endtime="20200107 09:50:09.142"></status>
</kw>
<msg timestamp="20200107 09:50:09.142" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:08.096" endtime="20200107 09:50:09.142"></status>
</kw>
<doc>Get Users with basic parameters</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrsuserrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:50:06.881" endtime="20200107 09:50:09.143" critical="yes"></status>
</test>
<test id="s1-s1-s7-t6" name="Validate AWS XRS Get Users REST Web Services Returns 200 OK With Raw String URI">
<kw name="Verify Get Users Raw String URI With /? Returns 200 OK">
<doc>Verify that using the given character string in the raw URI string returns 200 OK</doc>
<msg timestamp="20200107 09:50:09.146" level="TRACE">Arguments: [ ${character_string}='/?' ]</msg>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:50:09.146" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:50:09.146" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:50:09.146" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:50:09.146" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:50:09.146" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:50:09.146" endtime="20200107 09:50:09.147"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:50:09.147" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:50:09.147" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20200107 09:50:09.147" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:50:09.147" endtime="20200107 09:50:09.147"></status>
</kw>
<kw name="Create URI String With" library="URIStringBuilderTool">
<doc>Helper Keyword to construct the request uri with different character strings
base_uri = webservice uri
request_type = request extension for the webservice
character_string = final character of the uri. i.e. /, /?, etc ...</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.User}</arg>
<arg>${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_USERS}</arg>
<arg>${character_string}</arg>
</arguments>
<assign>
<var>${uri_string}</var>
</assign>
<msg timestamp="20200107 09:50:09.148" level="TRACE">Arguments: [ ${base_uri}='UserWebService.svc' | ${request_type}='/users' | ${character_string}='/?' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${base_uri}${request_type}${character_string}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:09.148" level="TRACE">Arguments: [ 'UserWebService.svc/users/?' ]</msg>
<msg timestamp="20200107 09:50:09.148" level="TRACE">Return: 'UserWebService.svc/users/?'</msg>
<msg timestamp="20200107 09:50:09.148" level="INFO">${uri} = UserWebService.svc/users/?</msg>
<status status="PASS" starttime="20200107 09:50:09.148" endtime="20200107 09:50:09.149"></status>
</kw>
<msg timestamp="20200107 09:50:09.149" level="TRACE">Return: 'UserWebService.svc/users/?'</msg>
<msg timestamp="20200107 09:50:09.149" level="INFO">${uri_string} = UserWebService.svc/users/?</msg>
<status status="PASS" starttime="20200107 09:50:09.147" endtime="20200107 09:50:09.149"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${uri_string}OrganizationID=${params.OrganizationID}&amp;IsActive=${params.IsActive}&amp;AsOfDateTime=${params.AsOfDateTime}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:09.149" level="TRACE">Arguments: [ 'UserWebService.svc/users/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' ]</msg>
<msg timestamp="20200107 09:50:09.149" level="TRACE">Return: 'UserWebService.svc/users/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020'</msg>
<msg timestamp="20200107 09:50:09.149" level="INFO">${uri} = UserWebService.svc/users/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020</msg>
<status status="PASS" starttime="20200107 09:50:09.149" endtime="20200107 09:50:09.149"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:09.150" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'UserWebService.svc/users/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:50:09.150" level="INFO">GET Request using : uri=UserWebService.svc/users/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:50:10.090" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /UserWebService.svc/users/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020 HTTP/1.1" 200 12258</msg>
<msg timestamp="20200107 09:50:10.093" level="DEBUG">GET Response : status=200, reason=OK
[{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"1\/2\/2020 8:04:29 PM","DashboardName":"None","Email":"beer@xata.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"2\/2\/2020 8:04:29 PM","EmailVerificationKey":"c5b1fd3b-b2dd-4e3f-81ab-c2d8d27920b2","EmailVerified":"False","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"super","Language":"English","LastLogin":"","LastName":"beer","MiddleName":"book","ModifiedBy":"5412","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"False","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"False","SendAlertsToMessageInbox":"False","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"beer","UserRole":"Operations"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:00:25 PM","DashboardName":"Fleet Performance Dashboard","Email":"kstine@omnitracs.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:07:40 PM","EmailVerificationKey":"74960095-87c9-4d6c-8c6c-574f22f23c28","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"Kelby","Language":"English","LastLogin":"12\/11\/2019 4:31:57 PM","LastName":"Stine","MiddleName":"","ModifiedBy":"5685","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"kstine","UserRole":"Admin"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:14:32 PM","DashboardName":"Fleet Performance Dashboard","Email":"xrsqatest+readOnlyUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:14:32 PM","EmailVerificationKey":"70ad7b46-9515-4d9f-9b86-96275a78441e","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"ReadOnly","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5686","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"readOnlyUser","UserRole":"Read Only"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:19:01 PM","DashboardName":"Fleet Performance Dashboard","Email":"xrsqatest+maintenanceUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:19:01 PM","EmailVerificationKey":"8d13d3ae-8c1f-46ec-8439-c971e65d8656","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"Maintenance","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5689","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"maintenanceUser","UserRole":"Maintenance"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:17:27 PM","DashboardName":"Fleet Performance Dashboard","Email":"xrsqatest+operationsUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:17:27 PM","EmailVerificationKey":"ac79b4fe-a939-4df8-ad1a-38334e3ac3c4","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"Operations","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5688","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"operationsUser","UserRole":"Operations"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:26:11 PM","DashboardName":"Fleet Performance Dashboard","Email":"xrsqatest+mobileInstUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:27:31 PM","EmailVerificationKey":"0d47d688-442f-423d-886c-2d5b521673b2","EmailVerified":"False","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"MobileInstaller","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5685","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"mobileInstallerUser","UserRole":"Admin"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:16:01 PM","DashboardName":"Fleet Performance Dashboard","Email":"xrsqatest+dispatchUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:16:01 PM","EmailVerificationKey":"73d32aad-bcf3-4fbd-8c42-21b10ab209fd","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"Dispatch","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5687","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"dispatchUser","UserRole":"Dispatch"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:20:39 PM","DashboardName":"None","Email":"xrsqatest+fleetviewUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:20:39 PM","EmailVerificationKey":"0513d7fa-debc-4eb6-8188-30f0c07da3e0","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"Fleetview","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5690","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"fleetviewUser","UserRole":"FleetView"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"9\/24\/2018 3:35:34 PM","DashboardName":"None","Email":"xrsqatest+adminGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"1\/19\/2020 3:58:09 PM","EmailVerificationKey":"2147eb81-f470-492e-8204-c3a0f3aa2db3","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"admin","Language":"English","LastLogin":"1\/7\/2020 3:35:37 PM","LastName":"admin","MiddleName":"Automation","ModifiedBy":"5412","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"admin","UserRole":"Admin"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"2\/12\/2019 10:12:27 PM","DashboardName":"None","Email":"ann2344@xata.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"3\/12\/2019 10:12:27 PM","EmailVerificationKey":"034b4ad6-41ca-4ff1-b57c-04b07ff914b3","EmailVerified":"False","EncryptedPassword":"6B7330782B2FEB49242CC4A57782A9","FirstName":"ann","Language":"English","LastLogin":"2\/12\/2019 10:12:53 PM","LastName":"j","MiddleName":"","ModifiedBy":"5522","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"False","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"annj","UserRole":"Admin"}]</msg>
<msg timestamp="20200107 09:50:10.094" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:10.094" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:09.150" endtime="20200107 09:50:10.095"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:50:10.097" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:50:10.097" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:10.098" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:10.095" endtime="20200107 09:50:10.098"></status>
</kw>
<msg timestamp="20200107 09:50:10.098" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:09.145" endtime="20200107 09:50:10.099"></status>
</kw>
<kw name="Verify Get Users Raw String URI With ? Returns 200 OK">
<doc>Verify that using the given character string in the raw URI string returns 200 OK</doc>
<msg timestamp="20200107 09:50:10.102" level="TRACE">Arguments: [ ${character_string}='?' ]</msg>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:50:10.104" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:50:10.105" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:50:10.105" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:50:10.105" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:50:10.105" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:50:10.103" endtime="20200107 09:50:10.106"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:50:10.107" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:50:10.109" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20200107 09:50:10.110" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:50:10.106" endtime="20200107 09:50:10.110"></status>
</kw>
<kw name="Create URI String With" library="URIStringBuilderTool">
<doc>Helper Keyword to construct the request uri with different character strings
base_uri = webservice uri
request_type = request extension for the webservice
character_string = final character of the uri. i.e. /, /?, etc ...</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.User}</arg>
<arg>${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_USERS}</arg>
<arg>${character_string}</arg>
</arguments>
<assign>
<var>${uri_string}</var>
</assign>
<msg timestamp="20200107 09:50:10.112" level="TRACE">Arguments: [ ${base_uri}='UserWebService.svc' | ${request_type}='/users' | ${character_string}='?' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${base_uri}${request_type}${character_string}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:10.113" level="TRACE">Arguments: [ 'UserWebService.svc/users?' ]</msg>
<msg timestamp="20200107 09:50:10.113" level="TRACE">Return: 'UserWebService.svc/users?'</msg>
<msg timestamp="20200107 09:50:10.113" level="INFO">${uri} = UserWebService.svc/users?</msg>
<status status="PASS" starttime="20200107 09:50:10.112" endtime="20200107 09:50:10.113"></status>
</kw>
<msg timestamp="20200107 09:50:10.114" level="TRACE">Return: 'UserWebService.svc/users?'</msg>
<msg timestamp="20200107 09:50:10.114" level="INFO">${uri_string} = UserWebService.svc/users?</msg>
<status status="PASS" starttime="20200107 09:50:10.111" endtime="20200107 09:50:10.114"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${uri_string}OrganizationID=${params.OrganizationID}&amp;IsActive=${params.IsActive}&amp;AsOfDateTime=${params.AsOfDateTime}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:10.115" level="TRACE">Arguments: [ 'UserWebService.svc/users?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' ]</msg>
<msg timestamp="20200107 09:50:10.116" level="TRACE">Return: 'UserWebService.svc/users?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020'</msg>
<msg timestamp="20200107 09:50:10.116" level="INFO">${uri} = UserWebService.svc/users?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020</msg>
<status status="PASS" starttime="20200107 09:50:10.114" endtime="20200107 09:50:10.116"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:10.117" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'UserWebService.svc/users?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:50:10.118" level="INFO">GET Request using : uri=UserWebService.svc/users?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:50:11.125" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /UserWebService.svc/users?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020 HTTP/1.1" 200 12258</msg>
<msg timestamp="20200107 09:50:11.127" level="DEBUG">GET Response : status=200, reason=OK
[{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"1\/2\/2020 8:04:29 PM","DashboardName":"None","Email":"beer@xata.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"2\/2\/2020 8:04:29 PM","EmailVerificationKey":"c5b1fd3b-b2dd-4e3f-81ab-c2d8d27920b2","EmailVerified":"False","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"super","Language":"English","LastLogin":"","LastName":"beer","MiddleName":"book","ModifiedBy":"5412","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"False","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"False","SendAlertsToMessageInbox":"False","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"beer","UserRole":"Operations"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:00:25 PM","DashboardName":"Fleet Performance Dashboard","Email":"kstine@omnitracs.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:07:40 PM","EmailVerificationKey":"74960095-87c9-4d6c-8c6c-574f22f23c28","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"Kelby","Language":"English","LastLogin":"12\/11\/2019 4:31:57 PM","LastName":"Stine","MiddleName":"","ModifiedBy":"5685","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"kstine","UserRole":"Admin"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:14:32 PM","DashboardName":"Fleet Performance Dashboard","Email":"xrsqatest+readOnlyUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:14:32 PM","EmailVerificationKey":"70ad7b46-9515-4d9f-9b86-96275a78441e","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"ReadOnly","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5686","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"readOnlyUser","UserRole":"Read Only"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:19:01 PM","DashboardName":"Fleet Performance Dashboard","Email":"xrsqatest+maintenanceUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:19:01 PM","EmailVerificationKey":"8d13d3ae-8c1f-46ec-8439-c971e65d8656","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"Maintenance","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5689","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"maintenanceUser","UserRole":"Maintenance"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:17:27 PM","DashboardName":"Fleet Performance Dashboard","Email":"xrsqatest+operationsUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:17:27 PM","EmailVerificationKey":"ac79b4fe-a939-4df8-ad1a-38334e3ac3c4","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"Operations","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5688","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"operationsUser","UserRole":"Operations"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:26:11 PM","DashboardName":"Fleet Performance Dashboard","Email":"xrsqatest+mobileInstUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:27:31 PM","EmailVerificationKey":"0d47d688-442f-423d-886c-2d5b521673b2","EmailVerified":"False","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"MobileInstaller","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5685","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"mobileInstallerUser","UserRole":"Admin"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:16:01 PM","DashboardName":"Fleet Performance Dashboard","Email":"xrsqatest+dispatchUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:16:01 PM","EmailVerificationKey":"73d32aad-bcf3-4fbd-8c42-21b10ab209fd","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"Dispatch","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5687","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"dispatchUser","UserRole":"Dispatch"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:20:39 PM","DashboardName":"None","Email":"xrsqatest+fleetviewUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:20:39 PM","EmailVerificationKey":"0513d7fa-debc-4eb6-8188-30f0c07da3e0","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"Fleetview","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5690","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"fleetviewUser","UserRole":"FleetView"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"9\/24\/2018 3:35:34 PM","DashboardName":"None","Email":"xrsqatest+adminGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"1\/19\/2020 3:58:09 PM","EmailVerificationKey":"2147eb81-f470-492e-8204-c3a0f3aa2db3","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"admin","Language":"English","LastLogin":"1\/7\/2020 3:35:37 PM","LastName":"admin","MiddleName":"Automation","ModifiedBy":"5412","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"admin","UserRole":"Admin"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"2\/12\/2019 10:12:27 PM","DashboardName":"None","Email":"ann2344@xata.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"3\/12\/2019 10:12:27 PM","EmailVerificationKey":"034b4ad6-41ca-4ff1-b57c-04b07ff914b3","EmailVerified":"False","EncryptedPassword":"6B7330782B2FEB49242CC4A57782A9","FirstName":"ann","Language":"English","LastLogin":"2\/12\/2019 10:12:53 PM","LastName":"j","MiddleName":"","ModifiedBy":"5522","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"False","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"annj","UserRole":"Admin"}]</msg>
<msg timestamp="20200107 09:50:11.128" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:11.129" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:10.116" endtime="20200107 09:50:11.129"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:50:11.132" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:50:11.132" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:11.133" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:11.130" endtime="20200107 09:50:11.133"></status>
</kw>
<msg timestamp="20200107 09:50:11.133" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:10.101" endtime="20200107 09:50:11.134"></status>
</kw>
<doc>Get Users with basic parameters using a raw URI string</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrsuserrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:50:09.145" endtime="20200107 09:50:11.136" critical="yes"></status>
</test>
<test id="s1-s1-s7-t7" name="Validate AWS XRS Delete User REST Web Services Returns 200 OK">
<kw name="Delete User By ID" library="User">
<doc>Delete a single user record in Omnitracs XRS by specifying the user id.</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_USER.UserName}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:11.143" level="TRACE">Arguments: [ ${user_id}='awsxrstestuser1' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.User}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_USERS}/${user_id}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:11.143" level="TRACE">Arguments: [ 'UserWebService.svc/users/awsxrstestuser1' ]</msg>
<msg timestamp="20200107 09:50:11.144" level="TRACE">Return: 'UserWebService.svc/users/awsxrstestuser1'</msg>
<msg timestamp="20200107 09:50:11.144" level="INFO">${uri} = UserWebService.svc/users/awsxrstestuser1</msg>
<status status="PASS" starttime="20200107 09:50:11.143" endtime="20200107 09:50:11.144"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:11.145" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'UserWebService.svc/users/awsxrstestuser1' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:50:11.145" level="INFO">DELETE Request using : uri=UserWebService.svc/users/awsxrstestuser1, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:50:11.700" level="DEBUG">https://d3ws.xataxrs.com:443 "DELETE /UserWebService.svc/users/awsxrstestuser1 HTTP/1.1" 200 171</msg>
<msg timestamp="20200107 09:50:11.701" level="DEBUG">DELETE Response : status=200, reason=OK
{"Caption":"Deleted.","Code":"200","Description":"User Deleted Successfully.","Id":"awsxrstestuser1","ObjectName":"CustomerUser","SID":5742,"Title":"CustomerUserDeleted."}</msg>
<msg timestamp="20200107 09:50:11.701" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:11.702" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:11.144" endtime="20200107 09:50:11.702"></status>
</kw>
<msg timestamp="20200107 09:50:11.702" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:11.702" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:11.142" endtime="20200107 09:50:11.702"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:50:11.704" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:50:11.704" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:11.704" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:11.703" endtime="20200107 09:50:11.704"></status>
</kw>
<doc>Verifies that created User is deleted</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrsuserrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:50:11.140" endtime="20200107 09:50:11.705" critical="yes"></status>
</test>
<test id="s1-s1-s7-t8" name="Validate AWS XRS Get Users REST Web Services For All Users Returns 200 OK">
<kw name="Get All Users" library="User">
<doc>Get attributes for all userss.</doc>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:11.712" level="TRACE">Arguments: [  ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.User}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_USERS}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:11.713" level="TRACE">Arguments: [ 'UserWebService.svc/users' ]</msg>
<msg timestamp="20200107 09:50:11.713" level="TRACE">Return: 'UserWebService.svc/users'</msg>
<msg timestamp="20200107 09:50:11.713" level="INFO">${uri} = UserWebService.svc/users</msg>
<status status="PASS" starttime="20200107 09:50:11.712" endtime="20200107 09:50:11.713"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:11.714" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'UserWebService.svc/users' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:50:11.714" level="INFO">GET Request using : uri=UserWebService.svc/users, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:50:12.721" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /UserWebService.svc/users HTTP/1.1" 200 12258</msg>
<msg timestamp="20200107 09:50:12.723" level="DEBUG">GET Response : status=200, reason=OK
[{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"1\/2\/2020 8:04:29 PM","DashboardName":"None","Email":"beer@xata.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"2\/2\/2020 8:04:29 PM","EmailVerificationKey":"c5b1fd3b-b2dd-4e3f-81ab-c2d8d27920b2","EmailVerified":"False","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"super","Language":"English","LastLogin":"","LastName":"beer","MiddleName":"book","ModifiedBy":"5412","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"False","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"False","SendAlertsToMessageInbox":"False","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"beer","UserRole":"Operations"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:00:25 PM","DashboardName":"Fleet Performance Dashboard","Email":"kstine@omnitracs.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:07:40 PM","EmailVerificationKey":"74960095-87c9-4d6c-8c6c-574f22f23c28","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"Kelby","Language":"English","LastLogin":"12\/11\/2019 4:31:57 PM","LastName":"Stine","MiddleName":"","ModifiedBy":"5685","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"kstine","UserRole":"Admin"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:14:32 PM","DashboardName":"Fleet Performance Dashboard","Email":"xrsqatest+readOnlyUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:14:32 PM","EmailVerificationKey":"70ad7b46-9515-4d9f-9b86-96275a78441e","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"ReadOnly","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5686","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"readOnlyUser","UserRole":"Read Only"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:19:01 PM","DashboardName":"Fleet Performance Dashboard","Email":"xrsqatest+maintenanceUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:19:01 PM","EmailVerificationKey":"8d13d3ae-8c1f-46ec-8439-c971e65d8656","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"Maintenance","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5689","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"maintenanceUser","UserRole":"Maintenance"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:17:27 PM","DashboardName":"Fleet Performance Dashboard","Email":"xrsqatest+operationsUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:17:27 PM","EmailVerificationKey":"ac79b4fe-a939-4df8-ad1a-38334e3ac3c4","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"Operations","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5688","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"operationsUser","UserRole":"Operations"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:26:11 PM","DashboardName":"Fleet Performance Dashboard","Email":"xrsqatest+mobileInstUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:27:31 PM","EmailVerificationKey":"0d47d688-442f-423d-886c-2d5b521673b2","EmailVerified":"False","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"MobileInstaller","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5685","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"mobileInstallerUser","UserRole":"Admin"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:16:01 PM","DashboardName":"Fleet Performance Dashboard","Email":"xrsqatest+dispatchUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:16:01 PM","EmailVerificationKey":"73d32aad-bcf3-4fbd-8c42-21b10ab209fd","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"Dispatch","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5687","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"dispatchUser","UserRole":"Dispatch"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"11\/26\/2019 5:20:39 PM","DashboardName":"None","Email":"xrsqatest+fleetviewUserGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"12\/26\/2019 5:20:39 PM","EmailVerificationKey":"0513d7fa-debc-4eb6-8188-30f0c07da3e0","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"Fleetview","Language":"English","LastLogin":"","LastName":"User","MiddleName":"Automation","ModifiedBy":"5690","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"fleetviewUser","UserRole":"FleetView"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"9\/24\/2018 3:35:34 PM","DashboardName":"None","Email":"xrsqatest+adminGnomeShippingD3@gmail.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"1\/19\/2020 3:58:09 PM","EmailVerificationKey":"2147eb81-f470-492e-8204-c3a0f3aa2db3","EmailVerified":"True","EncryptedPassword":"1AC41640A3A216BA585C739601A923D","FirstName":"admin","Language":"English","LastLogin":"1\/7\/2020 3:35:37 PM","LastName":"admin","MiddleName":"Automation","ModifiedBy":"5412","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"True","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"admin","UserRole":"Admin"},{"AccountLocked":"False","AlertSubscriptionIds":[],"AlertSubscriptionsChanged":"False","AllowedSingleSignOn":"False","BelongsToResourceGroups":["Gnome Shipping D3"],"BelongsToResourceGroupsChanged":"False","CompanyName":"Gnome Shipping D3","CreateDate":"2\/12\/2019 10:12:27 PM","DashboardName":"None","Email":"ann2344@xata.com","EmailIncomingDriverMessages":"False","EmailPassword":"","EmailRejectedCount":"0","EmailVerificationExpirationDate":"3\/12\/2019 10:12:27 PM","EmailVerificationKey":"034b4ad6-41ca-4ff1-b57c-04b07ff914b3","EmailVerified":"False","EncryptedPassword":"6B7330782B2FEB49242CC4A57782A9","FirstName":"ann","Language":"English","LastLogin":"2\/12\/2019 10:12:53 PM","LastName":"j","MiddleName":"","ModifiedBy":"5522","ModifiedDate":"1\/7\/2020 3:49:25 PM","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","PasswordNeverExpires":"False","ScheduleReportSubscriptions":[],"ScheduledReportSubscriptionsChanged":"False","SendAlertsToEmail":"True","SendAlertsToMessageInbox":"True","Status":"Active","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","UserName":"annj","UserRole":"Admin"}]</msg>
<msg timestamp="20200107 09:50:12.725" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:12.725" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:11.713" endtime="20200107 09:50:12.725"></status>
</kw>
<msg timestamp="20200107 09:50:12.726" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:12.727" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:11.711" endtime="20200107 09:50:12.727"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:50:12.731" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:50:12.731" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:12.731" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:12.729" endtime="20200107 09:50:12.731"></status>
</kw>
<doc>Gets all the Users</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrsuserrestwebservicevalidation</tag>
<tag>xrsawsperftest</tag>
</tags>
<status status="PASS" starttime="20200107 09:50:11.709" endtime="20200107 09:50:12.732" critical="yes"></status>
</test>
<test id="s1-s1-s7-t9" name="Validate AWS XRS Delete User REST Web Services Returns Description &quot;User ID does not exist.&quot;">
<kw name="Delete User By ID" library="User">
<doc>Delete a single user record in Omnitracs XRS by specifying the user id.</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_USER_SID}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:12.738" level="TRACE">Arguments: [ ${user_id}='awsxrstestuser1' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.User}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_USERS}/${user_id}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:12.739" level="TRACE">Arguments: [ 'UserWebService.svc/users/awsxrstestuser1' ]</msg>
<msg timestamp="20200107 09:50:12.739" level="TRACE">Return: 'UserWebService.svc/users/awsxrstestuser1'</msg>
<msg timestamp="20200107 09:50:12.739" level="INFO">${uri} = UserWebService.svc/users/awsxrstestuser1</msg>
<status status="PASS" starttime="20200107 09:50:12.738" endtime="20200107 09:50:12.740"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:12.740" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'UserWebService.svc/users/awsxrstestuser1' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:50:12.741" level="INFO">DELETE Request using : uri=UserWebService.svc/users/awsxrstestuser1, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:50:13.165" level="DEBUG">https://d3ws.xataxrs.com:443 "DELETE /UserWebService.svc/users/awsxrstestuser1 HTTP/1.1" 200 154</msg>
<msg timestamp="20200107 09:50:13.167" level="DEBUG">DELETE Response : status=200, reason=OK
{"Caption":"Error","Code":"34","Description":"User ID does not exist.","Id":null,"ObjectName":"awsxrstestuser1","SID":0,"Title":"User ID does not exist."}</msg>
<msg timestamp="20200107 09:50:13.167" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:13.168" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:12.740" endtime="20200107 09:50:13.168"></status>
</kw>
<msg timestamp="20200107 09:50:13.169" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:13.169" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:12.738" endtime="20200107 09:50:13.170"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20200107 09:50:13.172" level="TRACE">Arguments: [ b'{"Caption":"Error","Code":"34","Description":"User ID does not exist.","Id":null,"ObjectName":"awsxrstestuser1","SID":0,"Title":"User ID does not exist."}' ]</msg>
<msg timestamp="20200107 09:50:13.172" level="INFO">To JSON using : content={"Caption":"Error","Code":"34","Description":"User ID does not exist.","Id":null,"ObjectName":"awsxrstestuser1","SID":0,"Title":"User ID does not exist."} </msg>
<msg timestamp="20200107 09:50:13.172" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20200107 09:50:13.172" level="TRACE">Return: {'Caption': 'Error',
 'Code': '34',
 'Description': 'User ID does not exist.',
 'Id': None,
 'ObjectName': 'awsxrstestuser1',
 'SID': 0,
 'Title': 'User ID does not exist.'}</msg>
<msg timestamp="20200107 09:50:13.173" level="INFO">${json_response} = {'Caption': 'Error', 'Code': '34', 'Description': 'User ID does not exist.', 'Id': None, 'ObjectName': 'awsxrstestuser1', 'SID': 0, 'Title': 'User ID does not exist.'}</msg>
<status status="PASS" starttime="20200107 09:50:13.171" endtime="20200107 09:50:13.173"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_response}[Description]</arg>
<arg>User ID does not exist.</arg>
</arguments>
<msg timestamp="20200107 09:50:13.175" level="TRACE">Arguments: [ 'User ID does not exist.' | 'User ID does not exist.' ]</msg>
<msg timestamp="20200107 09:50:13.175" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:13.175" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:13.174" endtime="20200107 09:50:13.176"></status>
</kw>
<doc>Attempts to delete a previously deleted User.</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrsuserrestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:50:12.736" endtime="20200107 09:50:13.177" critical="yes"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary" type="teardown">
<doc>Removes all the session objects</doc>
<msg timestamp="20200107 09:50:13.184" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200107 09:50:13.185" level="INFO">Delete All Sessions</msg>
<msg timestamp="20200107 09:50:13.185" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:13.184" endtime="20200107 09:50:13.185"></status>
</kw>
<doc>Fundamental suite to test XRS AWS User Entity Management Web Services</doc>
<status status="FAIL" starttime="20200107 09:50:03.993" endtime="20200107 09:50:13.185"></status>
</suite>
<suite id="s1-s1-s8" name="ValidateAWSXRSVehicleWebService" source="C:\Users\kstine\git\aws-api-gateway-tests\Tests\AWS_XRS_WebServicesTests\08__ValidateAWSXRSVehicleWebService.robot">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Create AWS XRS Web Services Session</arg>
<arg>AND</arg>
<arg>Test Data Setup For XRS AWS Vehicle Web Service Test Suite</arg>
</arguments>
<msg timestamp="20200107 09:50:13.280" level="TRACE">Arguments: [ 'Create AWS XRS Web Services Session' | 'AND' | 'Test Data Setup For XRS AWS Vehicle Web Service Test Suite' ]</msg>
<kw name="Create AWS XRS Web Services Session" library="XRSCommonWebService">
<doc>Create a session with aws xrs web services</doc>
<msg timestamp="20200107 09:50:13.280" level="TRACE">Arguments: [  ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${XRS_AWS_WEBSERVICES_URL}[${XRS_HOST_ENVIRONMENT}]</arg>
<arg>verify=True</arg>
<arg>auth=${XRS_WEBSERVICES_AUTHORIZATION}</arg>
</arguments>
<msg timestamp="20200107 09:50:13.281" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'https://d3ws.xataxrs.com' | verify=True | auth=['GnomeShippingD3|admin', 'xrs123'] ]</msg>
<msg timestamp="20200107 09:50:13.281" level="INFO">Creating Session using : alias=xrs_web_service_session, url=https://d3ws.xataxrs.com, headers={},                     cookies={}, auth=&lt;requests.auth.HTTPBasicAuth object at 0x0000018E38C77C70&gt;, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<msg timestamp="20200107 09:50:13.281" level="DEBUG">Creating session: xrs_web_service_session</msg>
<msg timestamp="20200107 09:50:13.281" level="DEBUG">Argument types are:
&lt;class 'bool'&gt;</msg>
<msg timestamp="20200107 09:50:13.281" level="TRACE">Return: &lt;requests.sessions.Session object at 0x0000018E38C77D60&gt;</msg>
<status status="PASS" starttime="20200107 09:50:13.281" endtime="20200107 09:50:13.281"></status>
</kw>
<msg timestamp="20200107 09:50:13.281" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:13.280" endtime="20200107 09:50:13.281"></status>
</kw>
<kw name="Test Data Setup For XRS AWS Vehicle Web Service Test Suite">
<doc>Keyword for setting up suite variables for AWS Vehicle Web Service Tests.</doc>
<msg timestamp="20200107 09:50:13.281" level="TRACE">Arguments: [  ]</msg>
<kw name="Get Random Valid VIN From randomvin.com" library="RandomVIN">
<doc>Get a random valid fake VIN from random VIN</doc>
<assign>
<var>${random_vin}</var>
</assign>
<msg timestamp="20200107 09:50:13.282" level="TRACE">Arguments: [  ]</msg>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>type=fake</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:50:13.282" level="TRACE">Arguments: [ 'type=fake' ]</msg>
<msg timestamp="20200107 09:50:13.282" level="TRACE">Return: {'type': 'fake'}</msg>
<msg timestamp="20200107 09:50:13.282" level="INFO">&amp;{params} = { type=fake }</msg>
<status status="PASS" starttime="20200107 09:50:13.282" endtime="20200107 09:50:13.282"></status>
</kw>
<kw name="Create Session For randomvin.com" library="RandomVIN">
<doc>Create a session with Random VIN</doc>
<msg timestamp="20200107 09:50:13.282" level="TRACE">Arguments: [  ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${RANDOM_VIN_ORG_ALIAS}</arg>
<arg>${RANDOM_VIN_ORG_BASE_URI}</arg>
<arg>verify=True</arg>
</arguments>
<msg timestamp="20200107 09:50:13.283" level="TRACE">Arguments: [ 'random_vin_session_alias' | 'https://randomvin.com' | verify=True ]</msg>
<msg timestamp="20200107 09:50:13.283" level="INFO">Creating Session using : alias=random_vin_session_alias, url=https://randomvin.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<msg timestamp="20200107 09:50:13.283" level="DEBUG">Creating session: random_vin_session_alias</msg>
<msg timestamp="20200107 09:50:13.283" level="DEBUG">Argument types are:
&lt;class 'bool'&gt;</msg>
<msg timestamp="20200107 09:50:13.283" level="TRACE">Return: &lt;requests.sessions.Session object at 0x0000018E38C7C460&gt;</msg>
<status status="PASS" starttime="20200107 09:50:13.282" endtime="20200107 09:50:13.283"></status>
</kw>
<msg timestamp="20200107 09:50:13.283" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:13.282" endtime="20200107 09:50:13.283"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${RANDOM_VIN_ORG_ALIAS}</arg>
<arg>${RANDOM_VIN_ORG_GET_VIN}</arg>
<arg>headers=${RANDOM_VIN_ORG_HEADER}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:13.284" level="TRACE">Arguments: [ 'random_vin_session_alias' | '/getvin.php' | headers={'Accept': '*/*',
 'Accept-Encoding': 'gzip, deflate, br',
 'Content-Type': 'text/html'} | params={'type': 'fake'} ]</msg>
<msg timestamp="20200107 09:50:13.284" level="INFO">GET Request using : uri=/getvin.php, params={'type': 'fake'}, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate, br', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'text/html'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:50:13.287" level="DEBUG">Starting new HTTPS connection (1): randomvin.com:443</msg>
<msg timestamp="20200107 09:50:13.591" level="DEBUG">https://randomvin.com:443 "GET /getvin.php?type=fake HTTP/1.1" 200 None</msg>
<msg timestamp="20200107 09:50:13.597" level="DEBUG">GET Response : status=200, reason=OK

KNAGE124165094596</msg>
<msg timestamp="20200107 09:50:13.597" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:13.598" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:13.283" endtime="20200107 09:50:13.598"></status>
</kw>
<kw name="Decode Bytes To String" library="String">
<doc>Decodes the given ``bytes`` to a Unicode string using the given ``encoding``.</doc>
<arguments>
<arg>${response.content}</arg>
<arg>UTF-8</arg>
</arguments>
<assign>
<var>${decoded_response}</var>
</assign>
<msg timestamp="20200107 09:50:13.600" level="TRACE">Arguments: [ b'\nKNAGE124165094596' | 'UTF-8' ]</msg>
<msg timestamp="20200107 09:50:13.600" level="TRACE">Return: '\nKNAGE124165094596'</msg>
<msg timestamp="20200107 09:50:13.601" level="INFO">${decoded_response} = 
KNAGE124165094596</msg>
<status status="PASS" starttime="20200107 09:50:13.599" endtime="20200107 09:50:13.601"></status>
</kw>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${decoded_response}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${edited_response}</var>
</assign>
<msg timestamp="20200107 09:50:13.602" level="TRACE">Arguments: [ '\nKNAGE124165094596' | '1' ]</msg>
<msg timestamp="20200107 09:50:13.603" level="TRACE">Return: 'KNAGE124165094596'</msg>
<msg timestamp="20200107 09:50:13.603" level="INFO">${edited_response} = KNAGE124165094596</msg>
<status status="PASS" starttime="20200107 09:50:13.602" endtime="20200107 09:50:13.603"></status>
</kw>
<msg timestamp="20200107 09:50:13.604" level="TRACE">Return: 'KNAGE124165094596'</msg>
<msg timestamp="20200107 09:50:13.604" level="INFO">${random_vin} = KNAGE124165094596</msg>
<status status="PASS" starttime="20200107 09:50:13.282" endtime="20200107 09:50:13.605"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>CompanyName=${XRS_GENERAL_INFORMATION.Company.Company_Name}</arg>
<arg>CompanySID=${XRS_GENERAL_INFORMATION.Company.Company_SID}</arg>
<arg>LicensePlate=${XRS_WEB_SERVICES_TEST_VEHICLE.LicensePlate}</arg>
<arg>OBCType=${XRS_WEB_SERVICES_TEST_VEHICLE.OBCType}</arg>
<arg>Odometer=${XRS_WEB_SERVICES_TEST_VEHICLE.Odometer}</arg>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>OrganizationName=${XRS_GENERAL_INFORMATION.Company.Company_Name}</arg>
<arg>OrganizationSID=${XRS_GENERAL_INFORMATION.Company.ParentOrganizationSid}</arg>
<arg>Status=${XRS_WEB_SERVICES_TEST_VEHICLE.Status}</arg>
<arg>TGTNumber=${XRS_WEB_SERVICES_TEST_VEHICLE.TGTNumber}</arg>
<arg>Type=${XRS_WEB_SERVICES_TEST_VEHICLE.Type}</arg>
<arg>VIN=${random_vin}</arg>
<arg>VehicleName=${XRS_WEB_SERVICES_TEST_VEHICLE.VehicleName}</arg>
<arg>Year=${XRS_WEB_SERVICES_TEST_VEHICLE.Year}</arg>
</arguments>
<assign>
<var>&amp;{XRS_AWS_WEBSERVICE_POST_TEST_VEHICLE_1_DICT}</var>
</assign>
<msg timestamp="20200107 09:50:13.606" level="TRACE">Arguments: [ 'CompanyName=${XRS_GENERAL_INFORMATION.Company.Company_Name}' | 'CompanySID=${XRS_GENERAL_INFORMATION.Company.Company_SID}' | 'LicensePlate=${XRS_WEB_SERVICES_TEST_VEHICLE.LicensePlate}' | 'OBCType=${XRS_WEB_SERVICES_TEST_VEHICLE.OBCType}' | 'Odometer=${XRS_WEB_SERVICES_TEST_VEHICLE.Odometer}' | 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'OrganizationName=${XRS_GENERAL_INFORMATION.Company.Company_Name}' | 'OrganizationSID=${XRS_GENERAL_INFORMATION.Company.ParentOrganizationSid}' | 'Status=${XRS_WEB_SERVICES_TEST_VEHICLE.Status}' | 'TGTNumber=${XRS_WEB_SERVICES_TEST_VEHICLE.TGTNumber}' | 'Type=${XRS_WEB_SERVICES_TEST_VEHICLE.Type}' | 'VIN=${random_vin}' | 'VehicleName=${XRS_WEB_SERVICES_TEST_VEHICLE.VehicleName}' | 'Year=${XRS_WEB_SERVICES_TEST_VEHICLE.Year}' ]</msg>
<msg timestamp="20200107 09:50:13.611" level="TRACE">Return: {'CompanyName': 'Gnome Shipping D3',
 'CompanySID': 37,
 'LicensePlate': 'AWSXRS123',
 'OBCType': 'None',
 'Odometer': 123000,
 'OrganizationID': 46663,
 'OrganizationName': 'Gnome Shipping D3',
 'OrganizationSID': 414,
 'Status': 'Active',
 'TGTNumber': 0,
 'Type': 'Tractor',
 'VIN': 'KNAGE124165094596',
 'VehicleName': 'AWSXRSAutoHauler',
 'Year': 2020}</msg>
<msg timestamp="20200107 09:50:13.612" level="INFO">&amp;{XRS_AWS_WEBSERVICE_POST_TEST_VEHICLE_1_DICT} = { CompanyName=Gnome Shipping D3 | CompanySID=37 | LicensePlate=AWSXRS123 | OBCType=None | Odometer=123000 | OrganizationID=46663 | OrganizationName=Gnome Shipping D3 | OrganizationSID=414 | Status=Act...</msg>
<status status="PASS" starttime="20200107 09:50:13.605" endtime="20200107 09:50:13.612"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${XRS_AWS_WEBSERVICE_POST_TEST_VEHICLE_1_DICT}</arg>
</arguments>
<assign>
<var>@{XRS_AWS_WEBSERVICE_POST_TEST_VEHICLE_LIST}</var>
</assign>
<msg timestamp="20200107 09:50:13.613" level="TRACE">Arguments: [ {'CompanyName': 'Gnome Shipping D3',
 'CompanySID': 37,
 'LicensePlate': 'AWSXRS123',
 'OBCType': 'None',
 'Odometer': 123000,
 'OrganizationID': 46663,
 'OrganizationName': 'Gnome Shipping D3',
 'OrganizationSID': 414,
 'Status': 'Active',
 'TGTNumber': 0,
 'Type': 'Tractor',
 'VIN': 'KNAGE124165094596',
 'VehicleName': 'AWSXRSAutoHauler',
 'Year': 2020} ]</msg>
<msg timestamp="20200107 09:50:13.613" level="TRACE">Return: [{'CompanyName': 'Gnome Shipping D3',
  'CompanySID': 37,
  'LicensePlate': 'AWSXRS123',
  'OBCType': 'None',
  'Odometer': 123000,
  'OrganizationID': 46663,
  'OrganizationName': 'Gnome Shipping D3',
  'OrganizationSID': 414,
  'Status': 'Active',
  'TGTNumber': 0,
  'Type': 'Tractor',
  'VIN': 'KNAGE124165094596',
  'VehicleName': 'AWSXRSAutoHauler',
  'Year': 2020}]</msg>
<msg timestamp="20200107 09:50:13.614" level="INFO">@{XRS_AWS_WEBSERVICE_POST_TEST_VEHICLE_LIST} = [ {'CompanyName': 'Gnome Shipping D3', 'CompanySID': 37, 'LicensePlate': 'AWSXRS123', 'OBCType': 'None', 'Odometer': 123000, 'OrganizationID': 46663, 'OrganizationName': 'Gnome Shipping D3', 'Organiza...</msg>
<status status="PASS" starttime="20200107 09:50:13.612" endtime="20200107 09:50:13.614"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_POST_TEST_VEHICLE_LIST}</arg>
</arguments>
<msg timestamp="20200107 09:50:13.615" level="TRACE">Arguments: [ '@{XRS_AWS_WEBSERVICE_POST_TEST_VEHICLE_LIST}' ]</msg>
<msg timestamp="20200107 09:50:13.615" level="INFO">@{XRS_AWS_WEBSERVICE_POST_TEST_VEHICLE_LIST} = [ {'CompanyName': 'Gnome Shipping D3', 'CompanySID': 37, 'LicensePlate': 'AWSXRS123', 'OBCType': 'None', 'Odometer': 123000, 'OrganizationID': 46663, 'OrganizationName': 'Gnome Shipping D3', 'Organiza...</msg>
<msg timestamp="20200107 09:50:13.615" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:13.614" endtime="20200107 09:50:13.615"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationSID=${XRS_GENERAL_INFORMATION.Company.Company_SID}</arg>
<arg>VIN=${random_vin}</arg>
<arg>VehicleName=${XRS_WEB_SERVICES_TEST_VEHICLE.VehicleName}</arg>
</arguments>
<assign>
<var>&amp;{XRS_AWS_WEBSERVICE_PUT_TEST_VEHICLE_1_DICT}</var>
</assign>
<msg timestamp="20200107 09:50:13.616" level="TRACE">Arguments: [ 'OrganizationSID=${XRS_GENERAL_INFORMATION.Company.Company_SID}' | 'VIN=${random_vin}' | 'VehicleName=${XRS_WEB_SERVICES_TEST_VEHICLE.VehicleName}' ]</msg>
<msg timestamp="20200107 09:50:13.617" level="TRACE">Return: {'OrganizationSID': 37,
 'VIN': 'KNAGE124165094596',
 'VehicleName': 'AWSXRSAutoHauler'}</msg>
<msg timestamp="20200107 09:50:13.618" level="INFO">&amp;{XRS_AWS_WEBSERVICE_PUT_TEST_VEHICLE_1_DICT} = { OrganizationSID=37 | VIN=KNAGE124165094596 | VehicleName=AWSXRSAutoHauler }</msg>
<status status="PASS" starttime="20200107 09:50:13.616" endtime="20200107 09:50:13.618"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${XRS_AWS_WEBSERVICE_PUT_TEST_VEHICLE_1_DICT}</arg>
</arguments>
<assign>
<var>@{XRS_AWS_WEBSERVICE_PUT_TEST_VEHICLE_LIST}</var>
</assign>
<msg timestamp="20200107 09:50:13.618" level="TRACE">Arguments: [ {'OrganizationSID': 37,
 'VIN': 'KNAGE124165094596',
 'VehicleName': 'AWSXRSAutoHauler'} ]</msg>
<msg timestamp="20200107 09:50:13.618" level="TRACE">Return: [{'OrganizationSID': 37,
  'VIN': 'KNAGE124165094596',
  'VehicleName': 'AWSXRSAutoHauler'}]</msg>
<msg timestamp="20200107 09:50:13.619" level="INFO">@{XRS_AWS_WEBSERVICE_PUT_TEST_VEHICLE_LIST} = [ {'OrganizationSID': 37, 'VIN': 'KNAGE124165094596', 'VehicleName': 'AWSXRSAutoHauler'} ]</msg>
<status status="PASS" starttime="20200107 09:50:13.618" endtime="20200107 09:50:13.619"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_PUT_TEST_VEHICLE_LIST}</arg>
</arguments>
<msg timestamp="20200107 09:50:13.619" level="TRACE">Arguments: [ '@{XRS_AWS_WEBSERVICE_PUT_TEST_VEHICLE_LIST}' ]</msg>
<msg timestamp="20200107 09:50:13.619" level="INFO">@{XRS_AWS_WEBSERVICE_PUT_TEST_VEHICLE_LIST} = [ {'OrganizationSID': 37, 'VIN': 'KNAGE124165094596', 'VehicleName': 'AWSXRSAutoHauler'} ]</msg>
<msg timestamp="20200107 09:50:13.619" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:13.619" endtime="20200107 09:50:13.620"></status>
</kw>
<msg timestamp="20200107 09:50:13.620" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:13.281" endtime="20200107 09:50:13.620"></status>
</kw>
<msg timestamp="20200107 09:50:13.620" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:13.280" endtime="20200107 09:50:13.620"></status>
</kw>
<test id="s1-s1-s8-t1" name="Validate AWS XRS Get Vehicle REST Web Services Returns Geographic &quot;Vehicle identity does not exist.&quot; Error Message">
<kw name="Get Vehicle By ID" library="Vehicle">
<doc>Get vehicle information for a particular vehicle using the vehicle id</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_VEHICLE.VehicleName}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:13.621" level="TRACE">Arguments: [ ${vehicle_id}='AWSXRSAutoHauler' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Vehicle}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_GET_DELETE_VEHICLE}/${vehicle_id}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:13.622" level="TRACE">Arguments: [ 'VehicleWebService.svc/vehicle/AWSXRSAutoHauler' ]</msg>
<msg timestamp="20200107 09:50:13.622" level="TRACE">Return: 'VehicleWebService.svc/vehicle/AWSXRSAutoHauler'</msg>
<msg timestamp="20200107 09:50:13.622" level="INFO">${uri} = VehicleWebService.svc/vehicle/AWSXRSAutoHauler</msg>
<status status="PASS" starttime="20200107 09:50:13.621" endtime="20200107 09:50:13.622"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:13.623" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'VehicleWebService.svc/vehicle/AWSXRSAutoHauler' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:50:13.623" level="INFO">GET Request using : uri=VehicleWebService.svc/vehicle/AWSXRSAutoHauler, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:50:13.625" level="DEBUG">Starting new HTTPS connection (1): d3ws.xataxrs.com:443</msg>
<msg timestamp="20200107 09:50:14.381" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /VehicleWebService.svc/vehicle/AWSXRSAutoHauler HTTP/1.1" 400 117</msg>
<msg timestamp="20200107 09:50:14.383" level="DEBUG">GET Response : status=400, reason=Bad Request
{"ErrorMessage":"Vehicle identity does not exist.","EventCode":3461016519792656384,"Parameters":["AWSXRSAutoHauler"]}</msg>
<msg timestamp="20200107 09:50:14.383" level="TRACE">Return: &lt;Response [400]&gt;</msg>
<msg timestamp="20200107 09:50:14.383" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:13.622" endtime="20200107 09:50:14.384"></status>
</kw>
<msg timestamp="20200107 09:50:14.384" level="TRACE">Return: &lt;Response [400]&gt;</msg>
<msg timestamp="20200107 09:50:14.385" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:13.621" endtime="20200107 09:50:14.385"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20200107 09:50:14.389" level="TRACE">Arguments: [ b'{"ErrorMessage":"Vehicle identity does not exist.","EventCode":3461016519792656384,"Parameters":["AWSXRSAutoHauler"]}' ]</msg>
<msg timestamp="20200107 09:50:14.389" level="INFO">To JSON using : content={"ErrorMessage":"Vehicle identity does not exist.","EventCode":3461016519792656384,"Parameters":["AWSXRSAutoHauler"]} </msg>
<msg timestamp="20200107 09:50:14.389" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20200107 09:50:14.390" level="TRACE">Return: {'ErrorMessage': 'Vehicle identity does not exist.',
 'EventCode': 3461016519792656384,
 'Parameters': ['AWSXRSAutoHauler']}</msg>
<msg timestamp="20200107 09:50:14.390" level="INFO">${json_response} = {'ErrorMessage': 'Vehicle identity does not exist.', 'EventCode': 3461016519792656384, 'Parameters': ['AWSXRSAutoHauler']}</msg>
<status status="PASS" starttime="20200107 09:50:14.387" endtime="20200107 09:50:14.391"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_response}[ErrorMessage]</arg>
<arg>Vehicle identity does not exist.</arg>
</arguments>
<msg timestamp="20200107 09:50:14.394" level="TRACE">Arguments: [ 'Vehicle identity does not exist.' | 'Vehicle identity does not exist.' ]</msg>
<msg timestamp="20200107 09:50:14.395" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:14.395" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:14.393" endtime="20200107 09:50:14.395"></status>
</kw>
<doc>Verifies that a Vehicle with a specific number does not exist</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrsvehiclerestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:50:13.620" endtime="20200107 09:50:14.396" critical="yes"></status>
</test>
<test id="s1-s1-s8-t2" name="Validate AWS XRS Post Vehicle REST Web Services Returns Code 201">
<kw name="Post Vehicles" library="Vehicle">
<doc>Calls the Post Method for Users.
Accepts a list of json objects
Json field definitions:
AllowTrailerInspection
This is read-only field that is auto-populated according to the selection in the Vehicle Type field as follows:
Vehicle Type AllowTrailerInspection
------------ ----------------------
Tractor True
Bus/Coach True
Flatbed True
Tanker True
Straight True
If false, drivers associated to this vehicle will not be prompted to perform a trailer inspection.
The Trailer inspection on the mobile will be disabled while associated to this vehicle.
Note also that the AllowTrailerInspection values for the vehicle type can only be changed on the Omnitracs XRS website in the company settings page.
Auxiliary
Type of Auxiliary Power Unit (APU).
CompanyName
The user defined name of the company.
CompanySID
The XRS unique System ID of the company.
This value is generated automatically by XRS and can be retrieved using the GET method.
Country
The name of the country where the vehicle is based.
EldVehicle
Indicates if this vehicle is an ELD vehicle or not.
When the company setting Default Host Mode = AOBRD, the following rules govern the default values:
1. If the vehicle is added before Dec 18th 2017, "false" will be the default setting
2. If the vehicle is added on or after Dec 18th 2017, "true" will be the default setting
and the user may not change the field value to "false" after saving the vehicle.
When the company setting Default Host Mode = Mixed, the following rules govern the default values:
1. If the vehicle is added before Dec 18, 2017, "true" will be the default setting
2. If the vehicle is added on or after Dec 18 2017, "true" will be the default setting
and Web Service users may not change the field value to "false" after saving the vehicle.
3. When the field is set to "true" for a vehicle, it can only be set back to "false" via XRS Master
4. If the vehicle is being added to a company that was created after Dec 18, 2017, the ELD Vehicle default will be "true",
and Web Service users may not change the field value to "false" before or after saving the vehicle.
When the company setting Default Host Mode = ELD, the following rules govern the default values:
1. The default will always be Yes and cannot be changed to “false”.
FuelDrawCapacity
The amount of fuel the vehicle can store in a single filling.
GrossVehicleWeight
The total gross vehicle weight including tonnage.
HasBerth
Identifies if the vehicle has a qualifying sleeper berth.
HasElectronicEngine
Identifies if the vehicle has an electronic engine.
This value is True for most vehicles.
HosExempt
Indicates if the vehicle is subject to HOS rules or is exempt from them (True = Exempt).
HP
The horsepower rating of the engine.
HUT
Identifies if the vehicle qualifies for Highway Use Tax
IFTA
Identifies if the vehicle qualifies for IFTA Fuel Taxes
InstallDate
The date the Relay was associated with the vehicle.
LicensePlate
The license plate of the vehicle.
Manufacture
The name of the manufacturer of the vehicle.
DAF Fiat-Iveco Foden GMC Chevrolet
Ford Freightliner Hino International Isuzu
Kenworth Mitsubishi Fuso Oshkosh Other Peterbilt
Scania Sterling Thomas Built Unimog Volvo
Western Star Mack Dodge
ManufactureDate
The date the vehicle was manufactured.
The default value for this field is:
1900-01-01T00:00:00
Model
The name of the vehicle model.
ModifiedBy
The SID of the last person to modify the driver record.
ModifiedDate
The date the driver record was last modified.
The value of this field is Read Only and cannot be modified using PUT or POST commands.
ManualVIN
No actual decription of what this is...
OBCType
The type of OBC (On Board Computer) installed ("XRS Relay").
This field is read-only.
If OBCType = XRSRelay, then either of the following TGTNumber values must be provided:
A valid TGT Number
0 - to unassign the Relay from the vehicle
Odometer
The last Odometer reading from the vehicle.
OdometerDate
The date at which the Odometer was captured from the vehicle.
OrganizationName
The user defined name of the organization that owns the vehicle.
OrganizationID
The user-defined ID of the Organization.
OrganizationSID
The XRS unique System ID of the organization that owns the vehicle.
This value is generated automatically by XRS and can be retrieved using the GET method.
OwnerOperator
A flag that determines if the vehicle is owned by an owner-operator.
PowerAxles
The number of axles on the power-unit.
ResourceGroupIdList
Indicates the set of ResourceGroupIDs to which the vehicle should belong
NOTE: If a resource group is not provided in a Put call,
the new Vehicle is to be placed in the default resource group for the organization to which the new Vehicle is being added.
SID
The XRS System ID of the vehicle.
This value is generated automatically by XRS and can be retrieved using the GET method.
StateProvince
This field contains the state, province, or territory name where the vehicle is based.
Status
Identifies if a vehicle is active or inactive in XRS.
The value of this field must be Active or Inactive.
StraightTruck
Identifies if the vehicle is classified as a straight-truck.
TGTNumber
The unique serial number (TGT Number) of the Omnitracs XRS Relay that is installed in the vehicle
If OBCType = XRSRelay, then either of the following TGTNumber values must be provided:
A valid TGT Number
0 - to unassign the Omnitracs XRS Relay from the vehicle
Web Service Integrators can perform the following:
To assign an Omnitracs XRS Relay to a vehicle, set the OBCType data field to ‘XRSRelay’
and set the TGTNumber field to the Omnitracs XRS Relay TGT Number.
To unassign an Omnitracs XRS Relay from a vehicle so that the Omnitracs XRS Relay can be assigned to another vehicle
or so that another Omnitracs XRS Relay can be assigned to this vehicle, set the OBCType data field to ‘None’
and set the TGTNumber data field to ‘0’ or ‘-1’.
To assign an Omnitracs XRS Relay that is not currently assigned to a vehicle to a vehicle that currently
has an Omnitracs XRS Relay assigned to it, set the OBCType data field to ‘XRSRelay’ and set the TGTNumber field to the new,
currently unassigned TGT Number of the Omnitracs XRS Relay.
This will unassign the current Omnitracs XRS Relay from the vehicle and assign the new Omnitracs XRS Relay to the vehicle
TransmissionMfg
The manufacturer of the transmission.
TransmissionType
The type of transmission.
Type
The type of vehicle.
Tractor, Van, Straight, IFTAExemptMailCarrier, Bulk, Tech, PickUp
UserDefinedField1
User-Defined Field #1
UserDefinedField2
User-Defined Field #2
UserDefinedField3
User-Defined Field #3
UserDefinedField4
User-Defined Field #4
UserDefinedField5
User-Defined Field #5
VehicleName
The user-defined ID of the vehicle. This is the same as Vehicle ID in the XRS Host.
3-20 Characters
VIN
The registered Vehicle Identification Number (VIN) of the vehicle.
Year
The year the vehicle was manufactured.</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_POST_TEST_VEHICLE_LIST}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:14.407" level="TRACE">Arguments: [ @{list_data}=[{'CompanyName': 'Gnome Shipping D3',
  'CompanySID': 37,
  'LicensePlate': 'AWSXRS123',
  'OBCType': 'None',
  'Odometer': 123000,
  'OrganizationID': 46663,
  'OrganizationName': 'Gnome Shipping D3',
  'OrganizationSID': 414,
  'Status': 'Active',
  'TGTNumber': 0,
  'Type': 'Tractor',
  'VIN': 'KNAGE124165094596',
  'VehicleName': 'AWSXRSAutoHauler',
  'Year': 2020}] ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Vehicle}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_VEHICLES}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:14.409" level="TRACE">Arguments: [ 'VehicleWebService.svc/vehicles' ]</msg>
<msg timestamp="20200107 09:50:14.409" level="TRACE">Return: 'VehicleWebService.svc/vehicles'</msg>
<msg timestamp="20200107 09:50:14.410" level="INFO">${uri} = VehicleWebService.svc/vehicles</msg>
<status status="PASS" starttime="20200107 09:50:14.408" endtime="20200107 09:50:14.410"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>json=${list_data}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:14.411" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'VehicleWebService.svc/vehicles' | json=[{'CompanyName': 'Gnome Shipping D3',
  'CompanySID': 37,
  'LicensePlate': 'AWSXRS123',
  'OBCType': 'None',
  'Odometer': 123000,
  'OrganizationID': 46663,
  'OrganizationName': 'Gnome Shipping D3',
  'OrganizationSID': 414,
  'Status': 'Active',
  'TGTNumber': 0,
  'Type': 'Tractor',
  'VIN': 'KNAGE124165094596',
  'VehicleName': 'AWSXRSAutoHauler',
  'Year': 2020}] | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:50:14.411" level="INFO">POST Request using : uri=VehicleWebService.svc/vehicles, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=[{'CompanyName': 'Gnome Shipping D3', 'CompanySID': 37, 'LicensePlate': 'AWSXRS123', 'OBCType': 'None', 'Odometer': 123000, 'OrganizationID': 46663, 'OrganizationName': 'Gnome Shipping D3', 'OrganizationSID': 414, 'Status': 'Active', 'TGTNumber': 0, 'Type': 'Tractor', 'VIN': 'KNAGE124165094596', 'VehicleName': 'AWSXRSAutoHauler', 'Year': 2020}]</msg>
<msg timestamp="20200107 09:50:15.095" level="DEBUG">https://d3ws.xataxrs.com:443 "POST /VehicleWebService.svc/vehicles HTTP/1.1" 200 162</msg>
<msg timestamp="20200107 09:50:15.096" level="DEBUG">POST Response : status=200, reason=OK
[{"Caption":"Created","Code":"201","Description":"Vehicle added successfully.","Id":"AWSXRSAutoHauler","ObjectName":"Vehicle","SID":2740,"Title":"VehicleAdded."}]</msg>
<msg timestamp="20200107 09:50:15.096" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:15.096" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:14.410" endtime="20200107 09:50:15.096"></status>
</kw>
<msg timestamp="20200107 09:50:15.096" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:15.097" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:14.406" endtime="20200107 09:50:15.097"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20200107 09:50:15.098" level="TRACE">Arguments: [ b'[{"Caption":"Created","Code":"201","Description":"Vehicle added successfully.","Id":"AWSXRSAutoHauler","ObjectName":"Vehicle","SID":2740,"Title":"VehicleAdded."}]' ]</msg>
<msg timestamp="20200107 09:50:15.098" level="INFO">To JSON using : content=[{"Caption":"Created","Code":"201","Description":"Vehicle added successfully.","Id":"AWSXRSAutoHauler","ObjectName":"Vehicle","SID":2740,"Title":"VehicleAdded."}] </msg>
<msg timestamp="20200107 09:50:15.098" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20200107 09:50:15.098" level="TRACE">Return: [{'Caption': 'Created',
  'Code': '201',
  'Description': 'Vehicle added successfully.',
  'Id': 'AWSXRSAutoHauler',
  'ObjectName': 'Vehicle',
  'SID': 2740,
  'Title': 'VehicleAdded.'}]</msg>
<msg timestamp="20200107 09:50:15.098" level="INFO">${json_response} = [{'Caption': 'Created', 'Code': '201', 'Description': 'Vehicle added successfully.', 'Id': 'AWSXRSAutoHauler', 'ObjectName': 'Vehicle', 'SID': 2740, 'Title': 'VehicleAdded.'}]</msg>
<status status="PASS" starttime="20200107 09:50:15.098" endtime="20200107 09:50:15.098"></status>
</kw>
<kw name="${r} IN [ @{json_response} ]" type="for">
<kw name="${r} = {'Caption': 'Created', 'Code': '201', 'Description': 'Vehicle added successfully.', 'Id': 'AWSXRSAutoHauler', 'ObjectName': 'Vehicle', 'SID': 2740, 'Title': 'VehicleAdded.'}" type="foritem">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${r}[Code]</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20200107 09:50:15.100" level="TRACE">Arguments: [ '201' | '201' ]</msg>
<msg timestamp="20200107 09:50:15.100" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:15.100" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:15.100" endtime="20200107 09:50:15.100"></status>
</kw>
<status status="PASS" starttime="20200107 09:50:15.099" endtime="20200107 09:50:15.100"></status>
</kw>
<status status="PASS" starttime="20200107 09:50:15.099" endtime="20200107 09:50:15.100"></status>
</kw>
<doc>Posts a Vehicle and expects a Code value of 201</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrsvehiclerestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:50:14.403" endtime="20200107 09:50:15.101" critical="yes"></status>
</test>
<test id="s1-s1-s8-t3" name="Validate AWS XRS Get Vehicle REST Web Services Returns 200 OK">
<kw name="Get Vehicle By ID" library="Vehicle">
<doc>Get vehicle information for a particular vehicle using the vehicle id</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_VEHICLE.VehicleName}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:15.105" level="TRACE">Arguments: [ ${vehicle_id}='AWSXRSAutoHauler' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Vehicle}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_GET_DELETE_VEHICLE}/${vehicle_id}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:15.106" level="TRACE">Arguments: [ 'VehicleWebService.svc/vehicle/AWSXRSAutoHauler' ]</msg>
<msg timestamp="20200107 09:50:15.106" level="TRACE">Return: 'VehicleWebService.svc/vehicle/AWSXRSAutoHauler'</msg>
<msg timestamp="20200107 09:50:15.106" level="INFO">${uri} = VehicleWebService.svc/vehicle/AWSXRSAutoHauler</msg>
<status status="PASS" starttime="20200107 09:50:15.105" endtime="20200107 09:50:15.106"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:15.106" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'VehicleWebService.svc/vehicle/AWSXRSAutoHauler' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:50:15.107" level="INFO">GET Request using : uri=VehicleWebService.svc/vehicle/AWSXRSAutoHauler, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:50:15.659" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /VehicleWebService.svc/vehicle/AWSXRSAutoHauler HTTP/1.1" 200 1093</msg>
<msg timestamp="20200107 09:50:15.660" level="DEBUG">GET Response : status=200, reason=OK
{"AllowTrailerInspection":true,"Auxiliary":"None","CompanyName":"Gnome Shipping D3","CompanySID":37,"Country":null,"EldVehicle":false,"FuelDrawCapacity":0,"GrossVehicleWeight":0,"HP":0,"HUT":false,"HasBerth":false,"HasElectronicEngine":false,"HosExempt":false,"IFTA":false,"InstallDate":"\/Date(-62135568000000-0800)\/","LicensePlate":"AWSXRS123","ManualVIN":"false","Manufacture":"","ManufactureDate":"\/Date(-2208960000000-0800)\/","Model":"","ModifiedBy":5412,"ModifiedDate":"\/Date(1578440987042-0800)\/","OBCType":"None","Odometer":123000,"OdometerDate":"\/Date(-62135568000000-0800)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"OwnerOperator":false,"PowerAxles":0,"ResourceGroupIdList":["Gnome Shipping D3"],"SID":2740,"StateProvince":null,"Status":"Active","StraightTruck":false,"TGTNumber":0,"TransmissionMfg":"","TransmissionType":"","Type":"Tractor","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","VIN":"KNAGE124165094596","VehicleName":"AWSXRSAutoHauler","Year":"2020"}</msg>
<msg timestamp="20200107 09:50:15.660" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:15.660" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:15.106" endtime="20200107 09:50:15.660"></status>
</kw>
<msg timestamp="20200107 09:50:15.660" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:15.660" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:15.104" endtime="20200107 09:50:15.660"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:50:15.661" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:50:15.661" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:15.661" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:15.661" endtime="20200107 09:50:15.662"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20200107 09:50:15.662" level="TRACE">Arguments: [ b'{"AllowTrailerInspection":true,"Auxiliary":"None","CompanyName":"Gnome Shipping D3","CompanySID":37,"Country":null,"EldVehicle":false,"FuelDrawCapacity":0,"GrossVehicleWeight":0,"HP":0,"HUT":false,"HasBerth":false,"HasElectronicEngine":false,"HosExempt":false,"IFTA":false,"InstallDate":"\\/Date(-62135568000000-0800)\\/","LicensePlate":"AWSXRS123","ManualVIN":"false","Manufacture":"","ManufactureDate":"\\/Date(-2208960000000-0800)\\/","Model":"","ModifiedBy":5412,"ModifiedDate":"\\/Date(1578440987042-0800)\\/","OBCType":"None","Odometer":123000,"OdometerDate":"\\/Date(-62135568000000-0800)\\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"OwnerOperator":false,"PowerAxles":0,"ResourceGroupIdList":["Gnome Shipping D3"],"SID":2740,"StateProvince":null,"Status":"Active","StraightTruck":false,"TGTNumber":0,"TransmissionMfg":"","TransmissionType":"","Type":"Tractor","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","VIN":"KNAGE124165094596","VehicleName":"AWSXRSAutoHauler","Year":"2020"}' ]</msg>
<msg timestamp="20200107 09:50:15.662" level="INFO">To JSON using : content={"AllowTrailerInspection":true,"Auxiliary":"None","CompanyName":"Gnome Shipping D3","CompanySID":37,"Country":null,"EldVehicle":false,"FuelDrawCapacity":0,"GrossVehicleWeight":0,"HP":0,"HUT":false,"HasBerth":false,"HasElectronicEngine":false,"HosExempt":false,"IFTA":false,"InstallDate":"\/Date(-62135568000000-0800)\/","LicensePlate":"AWSXRS123","ManualVIN":"false","Manufacture":"","ManufactureDate":"\/Date(-2208960000000-0800)\/","Model":"","ModifiedBy":5412,"ModifiedDate":"\/Date(1578440987042-0800)\/","OBCType":"None","Odometer":123000,"OdometerDate":"\/Date(-62135568000000-0800)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"OwnerOperator":false,"PowerAxles":0,"ResourceGroupIdList":["Gnome Shipping D3"],"SID":2740,"StateProvince":null,"Status":"Active","StraightTruck":false,"TGTNumber":0,"TransmissionMfg":"","TransmissionType":"","Type":"Tractor","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","VIN":"KNAGE124165094596","VehicleName":"AWSXRSAutoHauler","Year":"2020"} </msg>
<msg timestamp="20200107 09:50:15.662" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20200107 09:50:15.663" level="TRACE">Return: {'AllowTrailerInspection': True,
 'Auxiliary': 'None',
 'CompanyName': 'Gnome Shipping D3',
 'CompanySID': 37,
 'Country': None,
 'EldVehicle': False,
 'FuelDrawCapacity': 0,
 'GrossVehicleWeight': 0,
 'HP': 0,
 'HUT': False,
 'HasBerth': False,
 'HasElectronicEngine': False,
 'HosExempt': False,
 'IFTA': False,
 'InstallDate': '/Date(-62135568000000-0800)/',
 'LicensePlate': 'AWSXRS123',
 'ManualVIN': 'false',
 'Manufacture': '',
 'ManufactureDate': '/Date(-2208960000000-0800)/',
 'Model': '',
 'ModifiedBy': 5412,
 'ModifiedDate': '/Date(1578440987042-0800)/',
 'OBCType': 'None',
 'Odometer': 123000,
 'OdometerDate': '/Date(-62135568000000-0800)/',
 'OrganizationID': '46663',
 'OrganizationName': 'Gnome Shipping D3',
 'OrganizationSID': 414,
 'OwnerOperator': False,
 'PowerAxles': 0,
 'ResourceGroupIdList': ['Gnome Shipping D3'],
 'SID': 2740,
 'StateProvince': None,
 'Status': 'Active',
 'StraightTruck': False,
 'TGTNumber': 0,
 'TransmissionMfg': '',
 'TransmissionType': '',
 'Type': 'Tractor',
 'UserDefinedField1': '',
 'UserDefinedField2': '',
 'UserDefinedField3': '',
 'UserDefinedField4': '',
 'UserDefinedField5': '',
 'VIN': 'KNAGE124165094596',
 'VehicleName': 'AWSXRSAutoHauler',
 'Year': '2020'}</msg>
<msg timestamp="20200107 09:50:15.663" level="INFO">${json_response} = {'AllowTrailerInspection': True, 'Auxiliary': 'None', 'CompanyName': 'Gnome Shipping D3', 'CompanySID': 37, 'Country': None, 'EldVehicle': False, 'FuelDrawCapacity': 0, 'GrossVehicleWeight': 0, 'HP': ...</msg>
<status status="PASS" starttime="20200107 09:50:15.662" endtime="20200107 09:50:15.663"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${json_response}[SID]</arg>
</arguments>
<assign>
<var>${XRS_WEB_SERVICES_TEST_VEHICLE_SID}</var>
</assign>
<msg timestamp="20200107 09:50:15.664" level="TRACE">Arguments: [ 2740 ]</msg>
<msg timestamp="20200107 09:50:15.664" level="TRACE">Return: 2740</msg>
<msg timestamp="20200107 09:50:15.664" level="INFO">${XRS_WEB_SERVICES_TEST_VEHICLE_SID} = 2740</msg>
<status status="PASS" starttime="20200107 09:50:15.664" endtime="20200107 09:50:15.664"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_VEHICLE_SID}</arg>
</arguments>
<msg timestamp="20200107 09:50:15.665" level="TRACE">Arguments: [ '${XRS_WEB_SERVICES_TEST_VEHICLE_SID}' ]</msg>
<msg timestamp="20200107 09:50:15.665" level="INFO">${XRS_WEB_SERVICES_TEST_VEHICLE_SID} = 2740</msg>
<msg timestamp="20200107 09:50:15.665" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:15.665" endtime="20200107 09:50:15.665"></status>
</kw>
<doc>Verifies that a posted Vehicle now exists</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrsvehiclerestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:50:15.103" endtime="20200107 09:50:15.666" critical="yes"></status>
</test>
<test id="s1-s1-s8-t4" name="Validate AWS XRS Get Vehicle By SID REST Web Services Returns 200 OK">
<kw name="Get Vehicle By SID" library="Vehicle">
<doc>Get vehicle information for a particular vehicle using the vehicle sid</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_VEHICLE_SID}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:15.669" level="TRACE">Arguments: [ ${vehicle_sid}=2740 ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Vehicle}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_VEHICLES}/${vehicle_sid}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:15.670" level="TRACE">Arguments: [ 'VehicleWebService.svc/vehicles/2740' ]</msg>
<msg timestamp="20200107 09:50:15.670" level="TRACE">Return: 'VehicleWebService.svc/vehicles/2740'</msg>
<msg timestamp="20200107 09:50:15.670" level="INFO">${uri} = VehicleWebService.svc/vehicles/2740</msg>
<status status="PASS" starttime="20200107 09:50:15.670" endtime="20200107 09:50:15.671"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:15.671" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'VehicleWebService.svc/vehicles/2740' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:50:15.672" level="INFO">GET Request using : uri=VehicleWebService.svc/vehicles/2740, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:50:16.305" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /VehicleWebService.svc/vehicles/2740 HTTP/1.1" 200 1093</msg>
<msg timestamp="20200107 09:50:16.307" level="DEBUG">GET Response : status=200, reason=OK
{"AllowTrailerInspection":true,"Auxiliary":"None","CompanyName":"Gnome Shipping D3","CompanySID":37,"Country":null,"EldVehicle":false,"FuelDrawCapacity":0,"GrossVehicleWeight":0,"HP":0,"HUT":false,"HasBerth":false,"HasElectronicEngine":false,"HosExempt":false,"IFTA":false,"InstallDate":"\/Date(-62135568000000-0800)\/","LicensePlate":"AWSXRS123","ManualVIN":"false","Manufacture":"","ManufactureDate":"\/Date(-2208960000000-0800)\/","Model":"","ModifiedBy":5412,"ModifiedDate":"\/Date(1578440987042-0800)\/","OBCType":"None","Odometer":123000,"OdometerDate":"\/Date(-62135568000000-0800)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"OwnerOperator":false,"PowerAxles":0,"ResourceGroupIdList":["Gnome Shipping D3"],"SID":2740,"StateProvince":null,"Status":"Active","StraightTruck":false,"TGTNumber":0,"TransmissionMfg":"","TransmissionType":"","Type":"Tractor","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","VIN":"KNAGE124165094596","VehicleName":"AWSXRSAutoHauler","Year":"2020"}</msg>
<msg timestamp="20200107 09:50:16.307" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:16.308" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:15.671" endtime="20200107 09:50:16.308"></status>
</kw>
<msg timestamp="20200107 09:50:16.308" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:16.309" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:15.669" endtime="20200107 09:50:16.309"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:50:16.313" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:50:16.313" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:16.314" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:16.312" endtime="20200107 09:50:16.314"></status>
</kw>
<doc>Verifies that a posted Vehicle can be retrieved by vehicle SID</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrsvehiclerestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:50:15.668" endtime="20200107 09:50:16.316" critical="yes"></status>
</test>
<test id="s1-s1-s8-t5" name="Validate AWS XRS Put Vehicle REST Web Services Modifies Vehicle Successfully">
<kw name="Put Vehicles" library="Vehicle">
<doc>Calls the Post Method for Vehicles.
Accepts a list of json objects
See Json field definitions in the "Post Vehicles" Keyword</doc>
<arguments>
<arg>@{XRS_AWS_WEBSERVICE_PUT_TEST_VEHICLE_LIST}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:16.326" level="TRACE">Arguments: [ @{list_data}=[{'OrganizationSID': 37,
  'VIN': 'KNAGE124165094596',
  'VehicleName': 'AWSXRSAutoHauler'}] ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Vehicle}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_VEHICLES}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:16.327" level="TRACE">Arguments: [ 'VehicleWebService.svc/vehicles' ]</msg>
<msg timestamp="20200107 09:50:16.327" level="TRACE">Return: 'VehicleWebService.svc/vehicles'</msg>
<msg timestamp="20200107 09:50:16.327" level="INFO">${uri} = VehicleWebService.svc/vehicles</msg>
<status status="PASS" starttime="20200107 09:50:16.326" endtime="20200107 09:50:16.327"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary">
<doc>Send a PUT request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>json=${list_data}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:16.328" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'VehicleWebService.svc/vehicles' | json=[{'OrganizationSID': 37,
  'VIN': 'KNAGE124165094596',
  'VehicleName': 'AWSXRSAutoHauler'}] | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:50:16.329" level="INFO">PUT Request using : uri=VehicleWebService.svc/vehicles, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=[{'OrganizationSID': 37, 'VIN': 'KNAGE124165094596', 'VehicleName': 'AWSXRSAutoHauler'}]</msg>
<msg timestamp="20200107 09:50:16.967" level="DEBUG">https://d3ws.xataxrs.com:443 "PUT /VehicleWebService.svc/vehicles HTTP/1.1" 200 164</msg>
<msg timestamp="20200107 09:50:16.969" level="DEBUG">PUT Response : status=200, reason=OK
[{"Caption":"Edited.","Code":"200","Description":"Vehicle edited successfully.","Id":"AWSXRSAutoHauler","ObjectName":"Vehicle","SID":2740,"Title":"VehicleEdited."}]</msg>
<msg timestamp="20200107 09:50:16.969" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:16.970" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:16.327" endtime="20200107 09:50:16.970"></status>
</kw>
<msg timestamp="20200107 09:50:16.971" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:16.971" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:16.325" endtime="20200107 09:50:16.971"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20200107 09:50:16.975" level="TRACE">Arguments: [ b'[{"Caption":"Edited.","Code":"200","Description":"Vehicle edited successfully.","Id":"AWSXRSAutoHauler","ObjectName":"Vehicle","SID":2740,"Title":"VehicleEdited."}]' ]</msg>
<msg timestamp="20200107 09:50:16.976" level="INFO">To JSON using : content=[{"Caption":"Edited.","Code":"200","Description":"Vehicle edited successfully.","Id":"AWSXRSAutoHauler","ObjectName":"Vehicle","SID":2740,"Title":"VehicleEdited."}] </msg>
<msg timestamp="20200107 09:50:16.976" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20200107 09:50:16.976" level="TRACE">Return: [{'Caption': 'Edited.',
  'Code': '200',
  'Description': 'Vehicle edited successfully.',
  'Id': 'AWSXRSAutoHauler',
  'ObjectName': 'Vehicle',
  'SID': 2740,
  'Title': 'VehicleEdited.'}]</msg>
<msg timestamp="20200107 09:50:16.977" level="INFO">${json_response} = [{'Caption': 'Edited.', 'Code': '200', 'Description': 'Vehicle edited successfully.', 'Id': 'AWSXRSAutoHauler', 'ObjectName': 'Vehicle', 'SID': 2740, 'Title': 'VehicleEdited.'}]</msg>
<status status="PASS" starttime="20200107 09:50:16.974" endtime="20200107 09:50:16.977"></status>
</kw>
<kw name="${r} IN [ @{json_response} ]" type="for">
<kw name="${r} = {'Caption': 'Edited.', 'Code': '200', 'Description': 'Vehicle edited successfully.', 'Id': 'AWSXRSAutoHauler', 'ObjectName': 'Vehicle', 'SID': 2740, 'Title': 'VehicleEdited.'}" type="foritem">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${r}[Description]</arg>
<arg>Vehicle edited successfully.</arg>
</arguments>
<msg timestamp="20200107 09:50:16.980" level="TRACE">Arguments: [ 'Vehicle edited successfully.' | 'Vehicle edited successfully.' ]</msg>
<msg timestamp="20200107 09:50:16.980" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:16.980" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:16.979" endtime="20200107 09:50:16.980"></status>
</kw>
<status status="PASS" starttime="20200107 09:50:16.978" endtime="20200107 09:50:16.980"></status>
</kw>
<status status="PASS" starttime="20200107 09:50:16.978" endtime="20200107 09:50:16.980"></status>
</kw>
<doc>Posts a Vehicle and expects a Code value of 201</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrsvehiclerestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:50:16.322" endtime="20200107 09:50:16.981" critical="yes"></status>
</test>
<test id="s1-s1-s8-t6" name="Validate AWS XRS Get Vehicles REST Web Services Returns 200 OK">
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:50:16.986" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:50:16.987" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:50:16.987" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:50:16.987" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:50:16.987" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:50:16.986" endtime="20200107 09:50:16.987"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:50:16.988" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:50:16.989" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20200107 09:50:16.989" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:50:16.988" endtime="20200107 09:50:16.989"></status>
</kw>
<kw name="Verify Get Vehicles With Forward Slash Returns 200 OK">
<doc>Verify that using a '/' in the URI returns 200 OK</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<msg timestamp="20200107 09:50:16.990" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/</arg>
</arguments>
<assign>
<var>${ending_character}</var>
</assign>
<msg timestamp="20200107 09:50:16.991" level="TRACE">Arguments: [ '/' ]</msg>
<msg timestamp="20200107 09:50:16.991" level="TRACE">Return: '/'</msg>
<msg timestamp="20200107 09:50:16.991" level="INFO">${ending_character} = /</msg>
<status status="PASS" starttime="20200107 09:50:16.990" endtime="20200107 09:50:16.991"></status>
</kw>
<kw name="Get Vehicles With URI Ending With ${ending_character} And Parameters &amp;{params}" library="Vehicle">
<doc>This Keyword modifies character between the base uri and the parameters
This will get vehicles that match the provided parameters.
Params can be named individually or within a Dictionary
See the Get Users Keyword for param definitions.</doc>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:16.991" level="TRACE">Arguments: [ ${ending_character}='/' | ${params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Vehicle}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_VEHICLES}${ending_character}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:16.992" level="TRACE">Arguments: [ 'VehicleWebService.svc/vehicles/' ]</msg>
<msg timestamp="20200107 09:50:16.992" level="TRACE">Return: 'VehicleWebService.svc/vehicles/'</msg>
<msg timestamp="20200107 09:50:16.992" level="INFO">${uri} = VehicleWebService.svc/vehicles/</msg>
<status status="PASS" starttime="20200107 09:50:16.992" endtime="20200107 09:50:16.992"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:16.993" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'VehicleWebService.svc/vehicles/' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} | params={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<msg timestamp="20200107 09:50:16.994" level="INFO">GET Request using : uri=VehicleWebService.svc/vehicles/, params={'OrganizationID': 46663, 'IsActive': 'True', 'AsOfDateTime': '01/07/2020'}, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:50:17.687" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /VehicleWebService.svc/vehicles/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01%2F07%2F2020 HTTP/1.1" 200 2</msg>
<msg timestamp="20200107 09:50:17.688" level="DEBUG">GET Response : status=200, reason=OK
[]</msg>
<msg timestamp="20200107 09:50:17.688" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:17.689" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:16.992" endtime="20200107 09:50:17.689"></status>
</kw>
<msg timestamp="20200107 09:50:17.689" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:17.690" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:16.991" endtime="20200107 09:50:17.690"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:50:17.691" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:50:17.691" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:17.691" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:17.690" endtime="20200107 09:50:17.691"></status>
</kw>
<msg timestamp="20200107 09:50:17.691" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:16.990" endtime="20200107 09:50:17.692"></status>
</kw>
<kw name="Verify Get Vehicles Without Forward Slash Returns 200 OK">
<doc>Verify that not using a '/' in the URI returns 200 OK</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<msg timestamp="20200107 09:50:17.693" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Get Vehicles" library="Vehicle">
<doc>Call the Get Method on vehicles.
This will get vehicles that match the provided parameters.
Params can be named individually or within a Dictionary
Param Definitions:
AsOfDateTime
Tells the service to return only the data that changed since the specified date and time.
IsActive
Filters results to active vehicles only.
True, False, Both
Limit
Used in conjunction with the Offset parameter to implement paging.
Limits the number of results to a specified number.
System Limit: 10,000
Offset
Used in conjunction with the Limit parameter to implement paging.
Represents a page number for the starting point of the return set.
OrganizationID
Limits results to vehicles in one or more organizations.
Maximum of 20 characters.
OrganizationSID
Limits results to vehicles in one or more organizations.
Maximum of 20 characters.
ResourceGroupID
Limits results to vehicles in one or more resource groups.
ResourceGroupSID
Limits results to vehicles in one or more resource groups.
VehicleSID
Limits the results to vehicle object with VehicleSID in OrganizationSID and ResourceGroupSID.
Maximum of 20 characters?</doc>
<arguments>
<arg>&amp;{params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:17.695" level="TRACE">Arguments: [ &amp;{params}={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Vehicle}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_VEHICLES}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:17.696" level="TRACE">Arguments: [ 'VehicleWebService.svc/vehicles' ]</msg>
<msg timestamp="20200107 09:50:17.696" level="TRACE">Return: 'VehicleWebService.svc/vehicles'</msg>
<msg timestamp="20200107 09:50:17.696" level="INFO">${uri} = VehicleWebService.svc/vehicles</msg>
<status status="PASS" starttime="20200107 09:50:17.695" endtime="20200107 09:50:17.696"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:17.697" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'VehicleWebService.svc/vehicles' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} | params={'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663} ]</msg>
<msg timestamp="20200107 09:50:17.697" level="INFO">GET Request using : uri=VehicleWebService.svc/vehicles, params={'OrganizationID': 46663, 'IsActive': 'True', 'AsOfDateTime': '01/07/2020'}, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:50:18.343" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /VehicleWebService.svc/vehicles?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01%2F07%2F2020 HTTP/1.1" 200 2</msg>
<msg timestamp="20200107 09:50:18.345" level="DEBUG">GET Response : status=200, reason=OK
[]</msg>
<msg timestamp="20200107 09:50:18.345" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:18.346" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:17.696" endtime="20200107 09:50:18.346"></status>
</kw>
<msg timestamp="20200107 09:50:18.346" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:18.347" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:17.694" endtime="20200107 09:50:18.347"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:50:18.348" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:50:18.349" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:18.349" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:18.348" endtime="20200107 09:50:18.349"></status>
</kw>
<msg timestamp="20200107 09:50:18.350" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:17.693" endtime="20200107 09:50:18.350"></status>
</kw>
<doc>Get Vehicles with basic parameters</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrsvehiclerestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:50:16.985" endtime="20200107 09:50:18.351" critical="yes"></status>
</test>
<test id="s1-s1-s8-t7" name="Validate AWS XRS Get Vehicles REST Web Services Returns 200 OK With Raw String URI">
<kw name="Verify Get Vehicles Raw String URI With /? Returns 200 OK">
<doc>Verify that using the given character string in the raw URI string returns 200 OK</doc>
<msg timestamp="20200107 09:50:18.357" level="TRACE">Arguments: [ ${character_string}='/?' ]</msg>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:50:18.358" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:50:18.358" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:50:18.358" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:50:18.359" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:50:18.359" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:50:18.358" endtime="20200107 09:50:18.359"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:50:18.359" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:50:18.360" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20200107 09:50:18.360" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:50:18.359" endtime="20200107 09:50:18.360"></status>
</kw>
<kw name="Create URI String With" library="URIStringBuilderTool">
<doc>Helper Keyword to construct the request uri with different character strings
base_uri = webservice uri
request_type = request extension for the webservice
character_string = final character of the uri. i.e. /, /?, etc ...</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Vehicle}</arg>
<arg>${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_VEHICLES}</arg>
<arg>${character_string}</arg>
</arguments>
<assign>
<var>${uri_string}</var>
</assign>
<msg timestamp="20200107 09:50:18.361" level="TRACE">Arguments: [ ${base_uri}='VehicleWebService.svc' | ${request_type}='/vehicles' | ${character_string}='/?' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${base_uri}${request_type}${character_string}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:18.362" level="TRACE">Arguments: [ 'VehicleWebService.svc/vehicles/?' ]</msg>
<msg timestamp="20200107 09:50:18.362" level="TRACE">Return: 'VehicleWebService.svc/vehicles/?'</msg>
<msg timestamp="20200107 09:50:18.363" level="INFO">${uri} = VehicleWebService.svc/vehicles/?</msg>
<status status="PASS" starttime="20200107 09:50:18.362" endtime="20200107 09:50:18.363"></status>
</kw>
<msg timestamp="20200107 09:50:18.363" level="TRACE">Return: 'VehicleWebService.svc/vehicles/?'</msg>
<msg timestamp="20200107 09:50:18.363" level="INFO">${uri_string} = VehicleWebService.svc/vehicles/?</msg>
<status status="PASS" starttime="20200107 09:50:18.361" endtime="20200107 09:50:18.363"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${uri_string}OrganizationID=${params.OrganizationID}&amp;IsActive=${params.IsActive}&amp;AsOfDateTime=${params.AsOfDateTime}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:18.364" level="TRACE">Arguments: [ 'VehicleWebService.svc/vehicles/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' ]</msg>
<msg timestamp="20200107 09:50:18.364" level="TRACE">Return: 'VehicleWebService.svc/vehicles/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020'</msg>
<msg timestamp="20200107 09:50:18.365" level="INFO">${uri} = VehicleWebService.svc/vehicles/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020</msg>
<status status="PASS" starttime="20200107 09:50:18.363" endtime="20200107 09:50:18.365"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:18.365" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'VehicleWebService.svc/vehicles/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:50:18.366" level="INFO">GET Request using : uri=VehicleWebService.svc/vehicles/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:50:18.935" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /VehicleWebService.svc/vehicles/?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020 HTTP/1.1" 200 2</msg>
<msg timestamp="20200107 09:50:18.937" level="DEBUG">GET Response : status=200, reason=OK
[]</msg>
<msg timestamp="20200107 09:50:18.937" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:18.938" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:18.365" endtime="20200107 09:50:18.938"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:50:18.939" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:50:18.940" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:18.940" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:18.938" endtime="20200107 09:50:18.940"></status>
</kw>
<msg timestamp="20200107 09:50:18.941" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:18.357" endtime="20200107 09:50:18.941"></status>
</kw>
<kw name="Verify Get Vehicles Raw String URI With ? Returns 200 OK">
<doc>Verify that using the given character string in the raw URI string returns 200 OK</doc>
<msg timestamp="20200107 09:50:18.944" level="TRACE">Arguments: [ ${character_string}='?' ]</msg>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year,month,day</arg>
</arguments>
<assign>
<var>${yyyy}</var>
<var>${mm}</var>
<var>${dd}</var>
</assign>
<msg timestamp="20200107 09:50:18.945" level="TRACE">Arguments: [ 'year,month,day' ]</msg>
<msg timestamp="20200107 09:50:18.946" level="TRACE">Return: ['2020', '01', '07']</msg>
<msg timestamp="20200107 09:50:18.946" level="INFO">${yyyy} = 2020</msg>
<msg timestamp="20200107 09:50:18.947" level="INFO">${mm} = 01</msg>
<msg timestamp="20200107 09:50:18.947" level="INFO">${dd} = 07</msg>
<status status="PASS" starttime="20200107 09:50:18.945" endtime="20200107 09:50:18.947"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}</arg>
<arg>IsActive=True</arg>
<arg>AsOfDateTime=${mm}/${dd}/${yyyy}</arg>
</arguments>
<assign>
<var>&amp;{params}</var>
</assign>
<msg timestamp="20200107 09:50:18.948" level="TRACE">Arguments: [ 'OrganizationID=${XRS_GENERAL_INFORMATION.Company.Company_ID}' | 'IsActive=True' | 'AsOfDateTime=${mm}/${dd}/${yyyy}' ]</msg>
<msg timestamp="20200107 09:50:18.950" level="TRACE">Return: {'AsOfDateTime': '01/07/2020', 'IsActive': 'True', 'OrganizationID': 46663}</msg>
<msg timestamp="20200107 09:50:18.951" level="INFO">&amp;{params} = { OrganizationID=46663 | IsActive=True | AsOfDateTime=01/07/2020 }</msg>
<status status="PASS" starttime="20200107 09:50:18.948" endtime="20200107 09:50:18.951"></status>
</kw>
<kw name="Create URI String With" library="URIStringBuilderTool">
<doc>Helper Keyword to construct the request uri with different character strings
base_uri = webservice uri
request_type = request extension for the webservice
character_string = final character of the uri. i.e. /, /?, etc ...</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Vehicle}</arg>
<arg>${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_VEHICLES}</arg>
<arg>${character_string}</arg>
</arguments>
<assign>
<var>${uri_string}</var>
</assign>
<msg timestamp="20200107 09:50:18.952" level="TRACE">Arguments: [ ${base_uri}='VehicleWebService.svc' | ${request_type}='/vehicles' | ${character_string}='?' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${base_uri}${request_type}${character_string}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:18.954" level="TRACE">Arguments: [ 'VehicleWebService.svc/vehicles?' ]</msg>
<msg timestamp="20200107 09:50:18.954" level="TRACE">Return: 'VehicleWebService.svc/vehicles?'</msg>
<msg timestamp="20200107 09:50:18.954" level="INFO">${uri} = VehicleWebService.svc/vehicles?</msg>
<status status="PASS" starttime="20200107 09:50:18.953" endtime="20200107 09:50:18.954"></status>
</kw>
<msg timestamp="20200107 09:50:18.954" level="TRACE">Return: 'VehicleWebService.svc/vehicles?'</msg>
<msg timestamp="20200107 09:50:18.955" level="INFO">${uri_string} = VehicleWebService.svc/vehicles?</msg>
<status status="PASS" starttime="20200107 09:50:18.951" endtime="20200107 09:50:18.955"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${uri_string}OrganizationID=${params.OrganizationID}&amp;IsActive=${params.IsActive}&amp;AsOfDateTime=${params.AsOfDateTime}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:18.956" level="TRACE">Arguments: [ 'VehicleWebService.svc/vehicles?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' ]</msg>
<msg timestamp="20200107 09:50:18.956" level="TRACE">Return: 'VehicleWebService.svc/vehicles?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020'</msg>
<msg timestamp="20200107 09:50:18.956" level="INFO">${uri} = VehicleWebService.svc/vehicles?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020</msg>
<status status="PASS" starttime="20200107 09:50:18.955" endtime="20200107 09:50:18.957"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:18.958" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'VehicleWebService.svc/vehicles?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:50:18.958" level="INFO">GET Request using : uri=VehicleWebService.svc/vehicles?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:50:19.563" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /VehicleWebService.svc/vehicles?OrganizationID=46663&amp;IsActive=True&amp;AsOfDateTime=01/07/2020 HTTP/1.1" 200 2</msg>
<msg timestamp="20200107 09:50:19.564" level="DEBUG">GET Response : status=200, reason=OK
[]</msg>
<msg timestamp="20200107 09:50:19.564" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:19.564" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:18.957" endtime="20200107 09:50:19.564"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:50:19.565" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:50:19.565" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:19.565" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:19.564" endtime="20200107 09:50:19.565"></status>
</kw>
<msg timestamp="20200107 09:50:19.565" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:18.943" endtime="20200107 09:50:19.565"></status>
</kw>
<doc>Get Vehicles with basic parameters using a raw URI string</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrsvehiclerestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:50:18.355" endtime="20200107 09:50:19.566" critical="yes"></status>
</test>
<test id="s1-s1-s8-t8" name="Validate AWS XRS Delete Vehicle REST Web Services Returns 200 OK">
<kw name="Delete Vehicle By ID" library="Vehicle">
<doc>Delete vehicle information for a particular vehicle using the vehicle id
The Delete method supports the deletion of one vehicle per call only</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_VEHICLE.VehicleName}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:19.570" level="TRACE">Arguments: [ ${vehicle_id}='AWSXRSAutoHauler' ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Vehicle}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_GET_DELETE_VEHICLE}/${vehicle_id}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:19.570" level="TRACE">Arguments: [ 'VehicleWebService.svc/vehicle/AWSXRSAutoHauler' ]</msg>
<msg timestamp="20200107 09:50:19.571" level="TRACE">Return: 'VehicleWebService.svc/vehicle/AWSXRSAutoHauler'</msg>
<msg timestamp="20200107 09:50:19.571" level="INFO">${uri} = VehicleWebService.svc/vehicle/AWSXRSAutoHauler</msg>
<status status="PASS" starttime="20200107 09:50:19.570" endtime="20200107 09:50:19.571"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:19.571" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'VehicleWebService.svc/vehicle/AWSXRSAutoHauler' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:50:19.572" level="INFO">DELETE Request using : uri=VehicleWebService.svc/vehicle/AWSXRSAutoHauler, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:50:20.305" level="DEBUG">https://d3ws.xataxrs.com:443 "DELETE /VehicleWebService.svc/vehicle/AWSXRSAutoHauler HTTP/1.1" 200 165</msg>
<msg timestamp="20200107 09:50:20.308" level="DEBUG">DELETE Response : status=200, reason=OK
{"Caption":"Deleted.","Code":"200","Description":"Vehicle deleted successfully.","Id":"AWSXRSAutoHauler","ObjectName":"Vehicle","SID":2740,"Title":"VehicleDeleted."}</msg>
<msg timestamp="20200107 09:50:20.308" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:20.309" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:19.571" endtime="20200107 09:50:20.309"></status>
</kw>
<msg timestamp="20200107 09:50:20.309" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:20.310" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:19.569" endtime="20200107 09:50:20.310"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:50:20.312" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:50:20.313" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:20.313" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:20.312" endtime="20200107 09:50:20.313"></status>
</kw>
<doc>Verifies that created Vehicle is deleted</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrsvehiclerestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:50:19.568" endtime="20200107 09:50:20.314" critical="yes"></status>
</test>
<test id="s1-s1-s8-t9" name="Validate AWS XRS Get Vehicles REST Web Services For All Vehicles Returns 200 OK">
<kw name="Get All Vehicles" library="Vehicle">
<doc>Get attributes for all vehicles.</doc>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:20.320" level="TRACE">Arguments: [  ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Vehicle}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_VEHICLES}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:20.321" level="TRACE">Arguments: [ 'VehicleWebService.svc/vehicles' ]</msg>
<msg timestamp="20200107 09:50:20.321" level="TRACE">Return: 'VehicleWebService.svc/vehicles'</msg>
<msg timestamp="20200107 09:50:20.321" level="INFO">${uri} = VehicleWebService.svc/vehicles</msg>
<status status="PASS" starttime="20200107 09:50:20.321" endtime="20200107 09:50:20.321"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:20.322" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'VehicleWebService.svc/vehicles' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:50:20.322" level="INFO">GET Request using : uri=VehicleWebService.svc/vehicles, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:50:20.996" level="DEBUG">https://d3ws.xataxrs.com:443 "GET /VehicleWebService.svc/vehicles HTTP/1.1" 200 4282</msg>
<msg timestamp="20200107 09:50:20.999" level="DEBUG">GET Response : status=200, reason=OK
[{"AllowTrailerInspection":true,"Auxiliary":"None","CompanyName":"Gnome Shipping D3","CompanySID":37,"Country":"USA","EldVehicle":true,"FuelDrawCapacity":0,"GrossVehicleWeight":0,"HP":0,"HUT":false,"HasBerth":true,"HasElectronicEngine":true,"HosExempt":true,"IFTA":true,"InstallDate":"\/Date(1537829400000-0700)\/","LicensePlate":"GNM123","ManualVIN":"false","Manufacture":"","ManufactureDate":"\/Date(-2208960000000-0800)\/","Model":"","ModifiedBy":5412,"ModifiedDate":"\/Date(1568779606560-0700)\/","OBCType":"XRSRelay","Odometer":123000,"OdometerDate":"\/Date(1537790400000-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"OwnerOperator":false,"PowerAxles":1,"ResourceGroupIdList":[],"SID":2635,"StateProvince":"Minnesota","Status":"Active","StraightTruck":false,"TGTNumber":350055,"TransmissionMfg":"","TransmissionType":"","Type":"Tractor","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","VIN":"JN8AZ08W96W539181","VehicleName":"GnomeHauler1","Year":""},{"AllowTrailerInspection":true,"Auxiliary":"None","CompanyName":"Gnome Shipping D3","CompanySID":37,"Country":"USA","EldVehicle":true,"FuelDrawCapacity":0,"GrossVehicleWeight":0,"HP":0,"HUT":false,"HasBerth":false,"HasElectronicEngine":true,"HosExempt":false,"IFTA":true,"InstallDate":"\/Date(1562216880000-0700)\/","LicensePlate":"DVCL123","ManualVIN":"false","Manufacture":"","ManufactureDate":"\/Date(-2208960000000-0800)\/","Model":"","ModifiedBy":5412,"ModifiedDate":"\/Date(1562216932015-0700)\/","OBCType":"None","Odometer":123000,"OdometerDate":"\/Date(1562155200000-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"OwnerOperator":false,"PowerAxles":1,"ResourceGroupIdList":[],"SID":2685,"StateProvince":"Minnesota","Status":"Active","StraightTruck":false,"TGTNumber":0,"TransmissionMfg":"","TransmissionType":"","Type":"Tractor","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","VIN":"1HGCB7642NA299780","VehicleName":"Default_Vehicle","Year":""},{"AllowTrailerInspection":true,"Auxiliary":"None","CompanyName":"Gnome Shipping D3","CompanySID":37,"Country":"USA","EldVehicle":true,"FuelDrawCapacity":0,"GrossVehicleWeight":0,"HP":0,"HUT":false,"HasBerth":false,"HasElectronicEngine":true,"HosExempt":false,"IFTA":true,"InstallDate":"\/Date(1539311340000-0700)\/","LicensePlate":"Troller123","ManualVIN":"false","Manufacture":"","ManufactureDate":"\/Date(-2208960000000-0800)\/","Model":"","ModifiedBy":0,"ModifiedDate":"\/Date(1556317305999-0700)\/","OBCType":"None","Odometer":123000,"OdometerDate":"\/Date(1539259200000-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"OwnerOperator":false,"PowerAxles":1,"ResourceGroupIdList":[],"SID":2638,"StateProvince":"Minnesota","Status":"Active","StraightTruck":false,"TGTNumber":0,"TransmissionMfg":"","TransmissionType":"","Type":"Tractor","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","VIN":"1GTR1VE01BZ108698","VehicleName":"TrollTruck","Year":""},{"AllowTrailerInspection":true,"Auxiliary":"None","CompanyName":"Gnome Shipping D3","CompanySID":37,"Country":"USA","EldVehicle":true,"FuelDrawCapacity":0,"GrossVehicleWeight":0,"HP":0,"HUT":false,"HasBerth":true,"HasElectronicEngine":true,"HosExempt":false,"IFTA":true,"InstallDate":"\/Date(1553308620000-0700)\/","LicensePlate":"dwarf123","ManualVIN":"false","Manufacture":"","ManufactureDate":"\/Date(-2208960000000-0800)\/","Model":"","ModifiedBy":5416,"ModifiedDate":"\/Date(1555738617542-0700)\/","OBCType":"AMGC","Odometer":123000,"OdometerDate":"\/Date(1553256000000-0700)\/","OrganizationID":"46663","OrganizationName":"Gnome Shipping D3","OrganizationSID":414,"OwnerOperator":false,"PowerAxles":1,"ResourceGroupIdList":[],"SID":2667,"StateProvince":"Minnesota","Status":"Active","StraightTruck":false,"TGTNumber":170000226,"TransmissionMfg":"","TransmissionType":"","Type":"Tractor","UserDefinedField1":"","UserDefinedField2":"","UserDefinedField3":"","UserDefinedField4":"","UserDefinedField5":"","VIN":"1FVXA7AS24LM58815","VehicleName":"AMGDwarfHauler","Year":""}]</msg>
<msg timestamp="20200107 09:50:21.000" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:21.001" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:20.322" endtime="20200107 09:50:21.001"></status>
</kw>
<msg timestamp="20200107 09:50:21.002" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20200107 09:50:21.002" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:20.320" endtime="20200107 09:50:21.002"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20200107 09:50:21.006" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20200107 09:50:21.006" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:21.007" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:21.005" endtime="20200107 09:50:21.007"></status>
</kw>
<doc>Gets all the Vehicles</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrsvehiclerestwebservicevalidation</tag>
<tag>xrsawsperftest</tag>
</tags>
<status status="PASS" starttime="20200107 09:50:20.318" endtime="20200107 09:50:21.008" critical="yes"></status>
</test>
<test id="s1-s1-s8-t10" name="Validate AWS XRS Delete Vehicle By SID REST Web Services Returns ErrorMessage &quot;Vehicle identity 'xxxx' does not exist.&quot;">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>Vehicle with identity '${XRS_WEB_SERVICES_TEST_VEHICLE_SID}' does not exist.</arg>
</arguments>
<assign>
<var>${expected_error_message}</var>
</assign>
<msg timestamp="20200107 09:50:21.014" level="TRACE">Arguments: [ "Vehicle with identity '2740' does not exist." ]</msg>
<msg timestamp="20200107 09:50:21.015" level="TRACE">Return: "Vehicle with identity '2740' does not exist."</msg>
<msg timestamp="20200107 09:50:21.015" level="INFO">${expected_error_message} = Vehicle with identity '2740' does not exist.</msg>
<status status="PASS" starttime="20200107 09:50:21.014" endtime="20200107 09:50:21.015"></status>
</kw>
<kw name="Delete Vehicle By SID" library="Vehicle">
<doc>Delete vehicle information for a particular vehicle using the vehicle sid
The Delete method supports the deletion of one vehicle per call only</doc>
<arguments>
<arg>${XRS_WEB_SERVICES_TEST_VEHICLE_SID}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:21.017" level="TRACE">Arguments: [ ${vehicle_sid}=2740 ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${XRS_Entity_Management_Base_URI.Vehicle}${XRS_WEBSERVICE_ENTITY_MANAGEMENT_POST_GET_PUT_DELETE_VEHICLES}/${vehicle_sid}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20200107 09:50:21.017" level="TRACE">Arguments: [ 'VehicleWebService.svc/vehicles/2740' ]</msg>
<msg timestamp="20200107 09:50:21.017" level="TRACE">Return: 'VehicleWebService.svc/vehicles/2740'</msg>
<msg timestamp="20200107 09:50:21.018" level="INFO">${uri} = VehicleWebService.svc/vehicles/2740</msg>
<status status="PASS" starttime="20200107 09:50:21.017" endtime="20200107 09:50:21.018"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${XRS_WEB_SERVICE_SESSION_ALIAS}</arg>
<arg>${uri}</arg>
<arg>headers=${XRS_WEBSERVICES_JSON_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20200107 09:50:21.018" level="TRACE">Arguments: [ 'xrs_web_service_session' | 'VehicleWebService.svc/vehicles/2740' | headers={'Accept': 'application/json',
 'Accept-Encoding': 'gzip, deflate',
 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20200107 09:50:21.019" level="INFO">DELETE Request using : uri=VehicleWebService.svc/vehicles/2740, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20200107 09:50:21.678" level="DEBUG">https://d3ws.xataxrs.com:443 "DELETE /VehicleWebService.svc/vehicles/2740 HTTP/1.1" 400 111</msg>
<msg timestamp="20200107 09:50:21.680" level="DEBUG">DELETE Response : status=400, reason=Bad Request
{"ErrorMessage":"Vehicle with identity '2740' does not exist.","EventCode":3461016519792656384,"Parameters":[]}</msg>
<msg timestamp="20200107 09:50:21.681" level="TRACE">Return: &lt;Response [400]&gt;</msg>
<msg timestamp="20200107 09:50:21.681" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:21.018" endtime="20200107 09:50:21.682"></status>
</kw>
<msg timestamp="20200107 09:50:21.683" level="TRACE">Return: &lt;Response [400]&gt;</msg>
<msg timestamp="20200107 09:50:21.683" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20200107 09:50:21.016" endtime="20200107 09:50:21.683"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<assign>
<var>${json_response}</var>
</assign>
<msg timestamp="20200107 09:50:21.687" level="TRACE">Arguments: [ b'{"ErrorMessage":"Vehicle with identity \'2740\' does not exist.","EventCode":3461016519792656384,"Parameters":[]}' ]</msg>
<msg timestamp="20200107 09:50:21.688" level="INFO">To JSON using : content={"ErrorMessage":"Vehicle with identity '2740' does not exist.","EventCode":3461016519792656384,"Parameters":[]} </msg>
<msg timestamp="20200107 09:50:21.688" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20200107 09:50:21.688" level="TRACE">Return: {'ErrorMessage': "Vehicle with identity '2740' does not exist.",
 'EventCode': 3461016519792656384,
 'Parameters': []}</msg>
<msg timestamp="20200107 09:50:21.689" level="INFO">${json_response} = {'ErrorMessage': "Vehicle with identity '2740' does not exist.", 'EventCode': 3461016519792656384, 'Parameters': []}</msg>
<status status="PASS" starttime="20200107 09:50:21.686" endtime="20200107 09:50:21.689"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_response}[ErrorMessage]</arg>
<arg>${expected_error_message}</arg>
</arguments>
<msg timestamp="20200107 09:50:21.693" level="TRACE">Arguments: [ "Vehicle with identity '2740' does not exist." | "Vehicle with identity '2740' does not exist." ]</msg>
<msg timestamp="20200107 09:50:21.693" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200107 09:50:21.693" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:21.691" endtime="20200107 09:50:21.694"></status>
</kw>
<doc>Attempts to delete a previously deleted Vehicle.</doc>
<tags>
<tag>awsxrsrestwebservicevalidation</tag>
<tag>awsxrsvehiclerestwebservicevalidation</tag>
</tags>
<status status="PASS" starttime="20200107 09:50:21.012" endtime="20200107 09:50:21.696" critical="yes"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary" type="teardown">
<doc>Removes all the session objects</doc>
<msg timestamp="20200107 09:50:21.705" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200107 09:50:21.705" level="INFO">Delete All Sessions</msg>
<msg timestamp="20200107 09:50:21.708" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200107 09:50:21.704" endtime="20200107 09:50:21.708"></status>
</kw>
<doc>Fundamental suite to test XRS AWS Vehicle Entity Management Web Services</doc>
<status status="PASS" starttime="20200107 09:50:13.191" endtime="20200107 09:50:21.708"></status>
</suite>
<status status="FAIL" starttime="20200107 09:49:02.006" endtime="20200107 09:50:21.723"></status>
</suite>
<status status="FAIL" starttime="20200107 09:49:01.982" endtime="20200107 09:50:21.746"></status>
</suite>
<statistics>
<total>
<stat pass="76" fail="2">Critical Tests</stat>
<stat pass="76" fail="2">All Tests</stat>
</total>
<tag>
<stat pass="8" fail="0">awsxrsdevicerestwebservicevalidation</stat>
<stat pass="9" fail="0">awsxrsdriverrestwebservicevalidation</stat>
<stat pass="11" fail="1">awsxrsorganizationrestwebservicevalidation</stat>
<stat pass="4" fail="0">awsxrsresourcegrouprestwebservicevalidation</stat>
<stat pass="76" fail="2">awsxrsrestwebservicevalidation</stat>
<stat pass="9" fail="0">awsxrssiterestwebservicevalidation</stat>
<stat pass="17" fail="0">awsxrstrailerrestwebservicevalidation</stat>
<stat pass="8" fail="1">awsxrsuserrestwebservicevalidation</stat>
<stat pass="10" fail="0">awsxrsvehiclerestwebservicevalidation</stat>
<stat pass="9" fail="0">xrsawsperftest</stat>
</tag>
<suite>
<stat pass="76" fail="2" id="s1" name="Tests">Tests</stat>
<stat pass="76" fail="2" id="s1-s1" name="AWS XRS WebServicesTests">Tests.AWS XRS WebServicesTests</stat>
<stat pass="8" fail="0" id="s1-s1-s1" name="ValidateAWSXRSDeviceWebServices">Tests.AWS XRS WebServicesTests.ValidateAWSXRSDeviceWebServices</stat>
<stat pass="9" fail="0" id="s1-s1-s2" name="Validate AWSXRSDriverWebServices">Tests.AWS XRS WebServicesTests.Validate AWSXRSDriverWebServices</stat>
<stat pass="11" fail="1" id="s1-s1-s3" name="ValidateAWSXRSOrganizationWebService">Tests.AWS XRS WebServicesTests.ValidateAWSXRSOrganizationWebService</stat>
<stat pass="4" fail="0" id="s1-s1-s4" name="ValidateAWSXRSResourceGroupWebService">Tests.AWS XRS WebServicesTests.ValidateAWSXRSResourceGroupWebService</stat>
<stat pass="9" fail="0" id="s1-s1-s5" name="ValidateAWSXRSSiteWebService">Tests.AWS XRS WebServicesTests.ValidateAWSXRSSiteWebService</stat>
<stat pass="17" fail="0" id="s1-s1-s6" name="ValidateAWSXRSTrailerWebService">Tests.AWS XRS WebServicesTests.ValidateAWSXRSTrailerWebService</stat>
<stat pass="8" fail="1" id="s1-s1-s7" name="ValidateAWSXRSUserWebService">Tests.AWS XRS WebServicesTests.ValidateAWSXRSUserWebService</stat>
<stat pass="10" fail="0" id="s1-s1-s8" name="ValidateAWSXRSVehicleWebService">Tests.AWS XRS WebServicesTests.ValidateAWSXRSVehicleWebService</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
